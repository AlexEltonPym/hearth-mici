{"ast":null,"code":"/* eslint eqeqeq: \"off\", no-unused-vars: \"off\" */\n//to fix totalHeight bug, change p5 by changing o-totalHeight to just o\n//todo: fix this on a generic p5 import somehow\n//todo: language stuff\n//todo: buttons\n//todo: creature types\n//todo: card types\n//todo: task front end\n//todo: sheets\n//todo: effect limit\nexport default function sketch(p) {\n  const buttons = [];\n  let button_id = 0;\n  const effects = [];\n  const tasks = [{\n    title: \"Mage vs Warrior\",\n    instruction: \"Create 2 mage cards that helps against warriors.\",\n    num_cards: 2,\n    class: \"mage\"\n  }, {\n    title: \"Murlocs\",\n    instruction: \"Create 3 murlocs\",\n    num_cards: 3,\n    class: \"shaman\"\n  }, {\n    title: \"The ultimate defense\",\n    instruction: \"Create the ultimate defensive card.\",\n    num_cards: 1,\n    class: \"warrior\"\n  }];\n  let current_task_index = 0;\n  let user = \"\";\n  const cards = [];\n  const card_types = [\"spell\", \"minion\", \"weapon\"];\n  const method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\n  const target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\n  const target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"];\n  const filter_names = [\"enemy\", \"friendly\", \"all\"];\n  const duration_names = [\"turn\", \"permanently\"];\n  const param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\n  const effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"];\n  const keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"];\n  const all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"];\n  const creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"];\n  const survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\n  let current_survey_topic = 0;\n  let survey_drop_target = null;\n  const font_pixels_large = 32;\n  ;\n  const font_pixels = 24;\n  const font_pixels_small = 20;\n  let hearthstone_font;\n  const mouse_padding = 1;\n  let w_padding, h_padding;\n  let grid_w_padding, grid_h_padding;\n  let rect_mask, ellipse_mask;\n  let blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\n  let bg;\n  let gan_imgs = [];\n  let theMouse;\n  let setupDone = false;\n  let hoveredOption = -1;\n  let editing = \"none\";\n  let editing_card = null;\n  let effect_to_remove = null;\n  let editX = 0;\n  let editY = 0;\n  let simCount = 3;\n  let simulating = false;\n  let simDuration = 2000;\n  let simTime = -simDuration;\n  let mouse_over_queuer;\n  let simResults = null;\n  let simTurns = null;\n  let props;\n\n  p.myCustomRedrawAccordingToNewPropsHandler = _props => {\n    props = _props;\n  };\n\n  p.preload = () => {\n    bg = p.loadImage(props.bg_img);\n    blank_spell_img = p.loadImage(props.spell_img);\n    blank_weapon_img = p.loadImage(props.weapon_img);\n    blank_creature_img = p.loadImage(props.creature_img);\n    full_blank_creature_img = p.loadImage(props.full_blank_creature_img);\n    hearthstone_font = p.loadFont(props.hs_font);\n\n    for (let im of props.gan_imgs) {\n      gan_imgs.push(p.loadImage(im));\n    }\n  };\n\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    user = p.getURLParams().user;\n    theMouse = new p.FancyMouse();\n    h_padding = p.height * 0.1;\n    w_padding = p.width * 0.2;\n    grid_h_padding = p.height * 0.2;\n    grid_w_padding = p.width * 0.1;\n    p.imageMode(p.CENTER);\n    p.rectMode(p.CENTER);\n    p.textFont(hearthstone_font);\n    p.textSize(font_pixels);\n    p.fill(255);\n    p.noStroke();\n    p.register_all();\n\n    for (let card_id = 0; card_id < tasks[current_task_index].num_cards; card_id++) {\n      cards.push(new p.Card(card_id, current_task_index, tasks[current_task_index].class));\n    }\n\n    p.resize_all();\n    setupDone = true;\n  };\n\n  p.draw = () => {\n    p.background(255);\n    p.textAlign(p.LEFT, p.CENTER);\n    p.image(bg, p.width / 2, p.height / 2, p.width, p.height);\n\n    for (let c of cards) {\n      c.run();\n    }\n\n    for (let b of buttons) {\n      b.run();\n    }\n\n    if (theMouse.busy && current_survey_topic == 0) {\n      p.push();\n      p.translate(p.mouseX - theMouse.xOffset, p.mouseY - theMouse.yOffset);\n      p.textSize(28);\n      p.text(theMouse.effect.label_name, 0, 0);\n      p.pop();\n    }\n\n    p.draw_task_overlay();\n    p.draw_edit_overlay();\n    p.sim_overlay();\n\n    if (survey_topics[current_survey_topic] != \"none\") {\n      p.draw_survey();\n    }\n  };\n\n  p.draw_task_overlay = () => {\n    p.textAlign(p.RIGHT, p.CENTER);\n    p.textSize(font_pixels_large);\n    p.text(tasks[current_task_index].title, p.width - w_padding / 2, h_padding);\n    p.textSize(font_pixels);\n    p.text(tasks[current_task_index].instruction, p.width - w_padding / 2, h_padding + font_pixels_large);\n  };\n\n  p.draw_survey = () => {\n    p.push();\n    p.textAlign(p.CENTER, p.CENTER);\n    p.textSize(font_pixels);\n    p.rectMode(p.CENTER);\n    p.background(0, 100);\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (setting[0][0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (setting[0][0] == \"k\") {\n      options = keywords;\n    } else if (setting[0][0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      for (let attack = 1; attack < 11; attack++) {\n        for (let defense = 1; defense < 11; defense++) {\n          let xPos = p.map(attack, 1, 10, grid_w_padding, p.width - grid_w_padding);\n          let yPos = p.map(defense, 1, 10, grid_h_padding, p.height - grid_h_padding);\n          let boxWidth = (p.width - grid_w_padding * 2) / 10;\n          let boxHeight = (p.height - grid_h_padding * 2) / 10;\n\n          if (p.mouseX > xPos - boxWidth / 2 && p.mouseX < xPos + boxWidth / 2 && p.mouseY > yPos - boxHeight / 2 && p.mouseY < yPos + boxHeight / 2) {\n            p.fill(255, 100);\n          } else {\n            p.fill(255, 0);\n          }\n\n          p.rect(xPos, yPos, boxWidth, boxHeight);\n          p.fill(255);\n          p.text(attack + \"/\" + defense, xPos, yPos - 10);\n        }\n      }\n    } else {\n      p.textSize(40);\n      p.fill(255);\n      p.text(theMouse.effect.label_name + \"...\", p.width / 2, p.height * 0.1);\n      p.textSize(font_pixels);\n      p.rectMode(p.CENTER);\n      let optionButtonWidth = p.width / options.length * 0.5;\n      let optionButtonHeight = p.height * 0.10;\n      let optionButtonsPadding = p.width * 0.25;\n\n      for (let [index, option] of options.entries()) {\n        let xPos = p.map(index, 0, options.length - 1, optionButtonsPadding, p.width - optionButtonsPadding);\n\n        if (p.mouseX > xPos - optionButtonWidth / 2 && p.mouseX < xPos + optionButtonWidth / 2) {\n          p.fill(255, 100);\n          hoveredOption = index;\n        } else {\n          p.fill(255, 50);\n        }\n\n        p.rect(xPos, p.height * 0.5, optionButtonWidth, optionButtonHeight, 16);\n        p.fill(255);\n        let optionString = option.toString();\n        optionString = optionString[0].toUpperCase() + optionString.substring(1);\n        optionString = optionString.split(\" \").join(\"\\n\");\n        p.text(optionString, xPos, p.height / 2);\n      }\n    }\n\n    p.pop();\n  };\n\n  p.mousePressedWhileSurveying = () => {\n    if (p.progressSurveyThroughIssues()) {\n      return;\n    }\n\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (options[0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (options[0] == \"k\") {\n      options = keywords;\n    } else if (options[0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      setting[1] = {\n        x: p.floor(p.map(p.mouseX, 0, p.width, 1, 11)),\n        y: p.floor(p.map(p.mouseY, 0, p.height, 1, 11))\n      };\n    } else {\n      setting[1] = options[hoveredOption];\n    }\n\n    current_survey_topic++;\n\n    if (p.progressSurveyThroughIssues()) {\n      return;\n    }\n  };\n\n  p.mousePressedWhileNotSurveying = () => {\n    let clickedCard = null;\n\n    for (let c of cards) {\n      if (c.mouseInImg()) {\n        clickedCard = c;\n      }\n    }\n\n    if (clickedCard) {\n      if (theMouse.busy) {\n        //dropping effect onto a card\n        p.dropEffectOnCard(clickedCard);\n      } else {\n        //clicking on a card generally\n        p.clickToEditCard(clickedCard);\n      }\n    } else {\n      if (theMouse.busy) {\n        //clicked away to drop label\n        theMouse.busy = false;\n        theMouse.setOffset(0, 0);\n        theMouse.effect = null;\n      } else {\n        //other clicks\n        if (mouse_over_next && current_task_index < tasks.length) {\n          current_task_index;\n        }\n\n        if (mouse_over_queuer) {\n          p.add_to_queue();\n        }\n\n        p.mouse_click_while_editing();\n\n        for (let b of buttons) {\n          //clicking on a button with an empty hand\n          if (b.mouseInRegion()) {\n            theMouse.busy = true;\n            theMouse.setOffset(b.text_x, b.text_y);\n            theMouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n            break;\n          }\n        }\n      }\n    }\n  }; //returns true if you need to return out of mouse\n\n\n  p.progressSurveyThroughIssues = () => {\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    for (let i = 0; i < survey_topics.length; i++) {\n      if (theMouse.effect.settings[survey_topics[current_survey_topic]][0] == null || !param_format_names.includes(theMouse.effect.settings[survey_topics[current_survey_topic]][0][0]) && theMouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1) {\n        current_survey_topic++;\n\n        if (current_survey_topic == survey_topics.length) {\n          p.finished_survey();\n          return true;\n        }\n      }\n    }\n\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    return false;\n  };\n\n  p.dropEffectOnCard = c => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if (p.progressSurveyThroughIssues()) {\n      return;\n    }\n  };\n\n  p.clickToEditCard = c => {\n    if (c.mouse_over_mana) {\n      editing = \"mana\";\n      editing_card = c;\n    } else if (c.mouse_over_power) {\n      editing = \"power\";\n      editing_card = c;\n    } else if (c.mouse_over_toughness && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"toughness\";\n      editing_card = c;\n    } else if (c.mouse_over_card_effect && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"effect\";\n      editX = c.hovered_effect.x + blank_spell_img.width / 2;\n      editY = c.hovered_effect.y + c.hovered_effect.effect_string_height / 2;\n      editing_card = c;\n      effect_to_remove = c.hovered_effect;\n    } else if (editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10) {\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n      editing = \"none\";\n    }\n  };\n\n  p.mouse_click_while_editing = () => {\n    if (editing == \"mana\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY - 50) < 40) {\n        editing_card.mana--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY - 50) < 40) {\n        editing_card.mana++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.mana = p.constrain(editing_card.mana, 0, 10);\n    } else if (editing == \"power\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.power--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.power++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.power = p.constrain(editing_card.power, 0, 10);\n    } else if (editing == \"toughness\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.toughness--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.toughness++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.toughness = p.constrain(editing_card.toughness, 1, 10);\n    } else if (editing == \"effect\") {\n      editing = \"none\";\n    }\n  };\n\n  p.draw_edit_overlay = () => {\n    p.push();\n\n    if (editing != \"none\") {\n      p.translate(editX, editY);\n      p.noStroke();\n\n      if (editing == \"effect\") {\n        p.rotate(p.QUARTER_PI);\n        p.fill(0);\n        p.rect(0, 0, 22, 6);\n        p.rect(0, 0, 6, 22);\n        p.fill(255);\n        p.rect(0, 0, 20, 4);\n        p.rect(0, 0, 4, 20);\n      } else {\n        p.fill(0);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 8, 32);\n        p.fill(255);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 6, 30);\n      }\n    }\n\n    p.pop();\n  };\n\n  p.mousePressed = () => {\n    if (setupDone) {\n      if (survey_topics[current_survey_topic] != \"none\") {\n        p.mousePressedWhileSurveying();\n      } else {\n        p.mousePressedWhileNotSurveying();\n      }\n    }\n  };\n\n  p.finished_survey = () => {\n    survey_drop_target.effects.push(JSON.parse(JSON.stringify(theMouse.effect)));\n    current_survey_topic = 0;\n    theMouse.effect = null;\n    theMouse.busy = false;\n  };\n\n  p.keyPressed = () => {\n    if (p.key == ' ' && !simulating) {\n      simResults = null;\n      simTurns = null;\n      simulating = true;\n      simTime = simCount;\n      p.submit();\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    p.resize_all();\n  };\n\n  p.add_to_queue = () => {\n    if (!simulating) {\n      simulating = true;\n      simTime = p.millis();\n      p.submit();\n    }\n  };\n\n  p.sim_overlay = () => {\n    p.push();\n    let queur_x = p.map(2, 0, 3, w_padding, p.width - w_padding);\n    let queur_y = p.height * 0.85;\n    mouse_over_queuer = p.mouseX > queur_x - 100 && p.mouseX < queur_x + 100 && p.mouseY > queur_y - 30 && p.mouseY < queur_y + 30;\n    p.translate(queur_x, queur_y);\n\n    if (mouse_over_queuer && !simulating) {\n      p.fill(255, 255);\n    } else {\n      p.fill(p.map(p.millis(), simTime, simTime + simDuration, 100, 255, true), 100);\n    }\n\n    p.rect(0, 0, 200, 60, 4);\n    p.fill(0, 255);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.text(simulating ? \"Adding...\" : \"Add to queue\", 0, -4);\n    p.rectMode(p.CORNER); // if(simulating)\n    // p.fill(0)\n    // p.rect(-100, -30, map(millis(), simTime, simTime+simDuration, 0, 200, true), 60, 4)\n\n    p.pop();\n\n    if (simulating) {\n      if (p.millis() > simTime + simDuration) {\n        simulating = false;\n      }\n    } // if (simulating) {\n    //   simTime = constrain(simTime - random(0.001, 0.002), 0, simCount);\n    //   let lw = map(simTime, 0, simCount, 0, 200);\n    //   noStroke();\n    //   p.fill(200);\n    //   p.rect(width * 0.5 - 100, height * 0.85 - 16, 200, 40)\n    //   p.fill(0)\n    //   p.rect(width * 0.5 - 100, height * 0.85 - 16, lw, 40)\n    //   p.fill(255);\n    //   text(\"Simulating...\", width * 0.5, height * 0.85)\n    // } else {\n    //   text(\"Press Spacebar to simulate\", width / 2, height * 0.9);\n    // }\n    // if (simResults != null) {\n    //   text(\"The win rate with your card is: \" + simResults +\n    //     \"%\\n\" + \"The average game lasted \" + simTurns +\n    //     \" turns.\", width * 0.5, height * 0.10);\n    // }\n\n  };\n\n  p.submit = () => {\n    let submissions = [];\n\n    for (let c of cards) {\n      let card_submission = {\n        id: c.card_id,\n        task: c.card_task_index,\n        user: user,\n        p: c.power,\n        t: c.toughness,\n        m: c.mana\n      };\n      let repeat_checker = {};\n\n      for (let e of c.effects) {\n        if (repeat_checker[e.effect_short] == undefined) {\n          repeat_checker[e.effect_short] = 0;\n        } else {\n          repeat_checker[e.effect_short]++;\n        }\n\n        if (e.settings.methods[0] != null) card_submission[e.effect_short + \"-method-\" + repeat_checker[e.effect_short]] = e.settings.methods[1];\n        if (e.settings.params[0] != null) card_submission[e.effect_short + \"-param-\" + repeat_checker[e.effect_short]] = e.settings.params[1];\n        if (e.settings.targets[0] != null) card_submission[e.effect_short + \"-target-\" + repeat_checker[e.effect_short]] = e.settings.targets[1];\n        if (e.settings.filters[0] != null) card_submission[e.effect_short + \"-filter-\" + repeat_checker[e.effect_short]] = e.settings.filters[1];\n        if (e.settings.duration[0] != null) card_submission[e.effect_short + \"-duration-\" + repeat_checker[e.effect_short]] = e.settings.duration[1];\n      }\n\n      submissions[c.card_task_index + \"-\" + c.card_id] = card_submission;\n    }\n\n    props.send_to_google_sheets(submissions);\n  }; // gapi.load('client', ()=>{\n  //   gapi.client.init({ 'apiKey':  config.sheets_api_key}).then(()=>{\n  //     gapi.client.sheets.spreadsheets.values.get({\n  //       spreadsheetId: config.sheet_id,\n  //       range: \"queue!A1:D5\"\n  //     }).then((response) => {\n  //       var result = response.result;\n  //       var numRows = result.values ? result.values.length : 0;\n  //       console.log(`${numRows} rows retrieved.`);\n  //     });\n  //   }); \n  // });\n  // httpPost('https://hearth-mici-backend.loca.lt/get_winrates', submission, (response) => {\n  //   simulating = false;\n  //   simResults = round(JSON.parse(response).win_rate, 2);\n  //   simTurns = round(JSON.parse(response).num_turns, 2);\n  //   console.log(simResults, simTurns)\n  // });\n  // httpPost('https://sheets.googleapis.com/v4/spreadsheets/1TlgFYV4zwkyfwGq1DNU39Sq1kOsOaL3jfppokpmgX0w/values/queue!A1:E1:append?key='+config.sheets_api_key, {\n  //   range: \"queue!A1:E1\",\n  //   key: config.sheets_api_key,\n  //   majorDimension: \"ROWS\",\n  //   values: [\n  //     [\"Door\", \"$15\", \"2\", \"3/15/2016\"],\n  //     [\"Engine\", \"$100\", \"1\", \"3/20/2016\"],\n  //   ],\n  // }, (response) => {\n  //   console.log(response)\n  // });\n\n\n  p.resize_all = () => {\n    for (let b of buttons) {\n      b.resized();\n    }\n\n    for (let c of cards) {\n      c.resized();\n    }\n\n    p.generate_masks();\n  };\n\n  p.generate_masks = () => {\n    ellipse_mask = p.createGraphics(250, 250);\n    ellipse_mask.ellipse(ellipse_mask.width / 2, ellipse_mask.height / 2, 200, 200);\n    rect_mask = p.createGraphics(250, 250);\n    rect_mask.rectMode(p.CENTER);\n    rect_mask.rect(rect_mask.width / 2, rect_mask.height / 2, 200, 160);\n  };\n\n  p.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n    effects[effect_text] = new p.Effect(effect_text, effect_short, method, param, targets, filters, duration);\n    buttons.push(new p.Button(effect_text, button_id++));\n  };\n\n  p.register_all = () => {\n    p.register_effect(\"Deal damage\", \"dam\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Destroy\", \"des\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Heal\", \"hea\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Gain armour\", \"arm\", null, [\"x\"], null, null, null);\n    p.register_effect(\"Change stats\", \"cha\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Set stats\", \"set\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Give keyword\", \"giv\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"k\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Return to hand\", \"ret\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Draw\", \"dra\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Gain mana\", \"gai\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Summon\", \"sum\", null, [\"x/x\"], null, null, null);\n    p.register_effect(\"Keyword\", \"key\", null, [\"k\"], null, null, null);\n    p.register_effect(\"Creature type\", \"cre\", null, [\"c\"], null, null, null);\n  };\n\n  p.FancyMouse = class {\n    constuctor() {\n      this.busy = false;\n      this.xOffset = 0;\n      this.yOffset = 0;\n      this.effect = null;\n    }\n\n    setOffset(buttonX, buttonY) {\n      this.xOffset = p.mouseX - buttonX;\n      this.yOffset = p.mouseY - buttonY;\n    }\n\n  };\n  p.Effect = class {\n    constructor(label_name, effect_short, methods, param_format, targets, filters, duration) {\n      this.x = 0;\n      this.y = 0;\n      this.effect_string = \"\";\n      this.effect_string_height = 0;\n      this.effect_string_width = blank_spell_img.width * 0.5;\n      this.label_name = label_name;\n      this.effect_short = effect_short;\n      this.settings = {\n        methods: [methods, \"\"],\n        params: [param_format, \"\"],\n        targets: [targets, \"\"],\n        filters: [filters, \"\"],\n        duration: [duration, \"\"]\n      };\n    }\n\n  };\n  p.Card = class {\n    constructor(card_id, card_task_index, card_class) {\n      this.y = 0;\n      this.x = 0;\n      this.w = blank_spell_img.width * 0.75;\n      this.h = blank_spell_img.height * 0.75;\n      this.oversized = false;\n      this.class = card_class;\n      this.type_id = 1; //creature\n\n      this.card_id = card_id;\n      this.card_task_index = card_task_index;\n      this.flav_img_index = p.floor(p.random(gan_imgs.length));\n      this.mana = 5;\n      this.power = 5;\n      this.toughness = 5;\n      this.effects = [];\n      this.hovered_effect = null;\n      this.mouse_over_card_effect = false;\n      this.mouse_over_mana = false;\n      this.mouse_over_power = false;\n      this.mouse_over_toughness = false;\n    }\n\n    resized() {\n      this.x = p.map(this.card_id + 1, 0, cards.length, w_padding, p.width - w_padding);\n      this.y = p.height / 2;\n    }\n\n    run() {\n      this.generate_effect_text();\n      this.check_mouse_hovers();\n      this.display();\n    }\n\n    generate_effect_text() {\n      for (let e of this.effects) {\n        e.effect_string = \"\";\n\n        if (e.label_name == \"Keyword\" || e.label_name == \"Creature type\") {\n          e.effect_string = e.settings.params[1];\n        } else if (e.label_name == \"Deal damage\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n          } else {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \";\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1];\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n          }\n        } else if (e.label_name == \"Destroy\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly destroy a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Destroy a target \";\n          } else {\n            e.effect_string = \"Destroy all \";\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1];\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n          }\n        } else if (e.label_name == \"Heal\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n          } else {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1];\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n          }\n        } else {\n          e.effect_string = e.label_name;\n        }\n\n        let estimatedCharactersPerLine = 20;\n        let estimatedLines = e.effect_string.length / estimatedCharactersPerLine;\n        e.effect_string_height = font_pixels_small * estimatedLines + 30;\n      }\n    }\n\n    display() {\n      p.push();\n      p.fill(0);\n      p.textAlign(p.CENTER, p.CENTER);\n\n      if (this.effects.length > 2) {\n        this.oversized = true;\n      } else {\n        this.oversized = false;\n      }\n\n      let flav = gan_imgs[this.flav_img_index].get();\n      let forg;\n\n      if (card_types[this.type_id] == \"spell\") {\n        flav.mask(rect_mask);\n        forg = blank_spell_img;\n      } else if (card_types[this.type_id] == \"minion\") {\n        flav.mask(ellipse_mask);\n        forg = this.oversized ? full_blank_creature_img : blank_creature_img;\n      } else {\n        flav.mask(rect_mask);\n        forg = blank_weapon_img;\n      }\n\n      if (!this.oversized) {\n        p.image(flav, this.x, this.y - 90, 250, 250);\n      }\n\n      p.image(forg, this.x, this.y, this.w, this.h);\n      p.push();\n      p.textSize(60);\n      p.fill(255);\n      p.strokeWeight(3);\n      p.stroke(0);\n\n      if (card_types[this.type_id] == \"minion\") {\n        p.text(this.power, this.x - this.w / 2.99, this.y + this.h / 2.8);\n        p.text(this.toughness, this.x + this.w / 2.6, this.y + this.h / 2.8);\n      }\n\n      p.text(this.mana, this.x - this.w / 2.99, this.y - this.h / 2.3);\n      p.pop();\n      p.push();\n      p.fill(0);\n      p.textSize(font_pixels_small);\n      let translation_offset_y;\n\n      if (this.oversized) {\n        translation_offset_y = this.y - this.h / 2 + 80;\n        p.translate(this.x, this.y - this.h / 2 + 80);\n      } else {\n        translation_offset_y = this.y + 50;\n        p.translate(this.x, this.y + 50);\n      }\n\n      this.mouse_over_card_effect = false;\n      this.hovered_effect = null;\n\n      for (let e of this.effects) {\n        translation_offset_y += e.effect_string_height / 2;\n        p.translate(0, e.effect_string_height / 2);\n\n        if (p.mouseY > translation_offset_y - e.effect_string_height / 2 && p.mouseY < translation_offset_y + e.effect_string_height / 2 && p.mouseX > this.x - e.effect_string_width / 2 && p.mouseX < this.x + e.effect_string_width / 2) {\n          this.mouse_over_card_effect = true;\n          this.hovered_effect = e;\n          this.hovered_effect.x = this.x - e.effect_string_width / 2;\n          this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n          p.fill(0, 100);\n        } else {\n          p.fill(0, 50);\n        }\n\n        p.rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4);\n        p.fill(255, 255);\n        p.text(e.effect_string, 0, 0, blank_spell_img.width / 2, blank_spell_img.height / 2);\n        translation_offset_y += e.effect_string_height / 2 + 5;\n        p.translate(0, e.effect_string_height / 2 + 5);\n      }\n\n      p.pop();\n      p.push();\n\n      if (editing_card == this) {\n        if (editing == \"mana\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y - this.h / 2.3;\n        } else if (editing == \"power\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y + this.h / 2.8;\n        } else if (editing == \"toughness\") {\n          editX = this.x + this.w / 2.6;\n          editY = this.y + this.h / 2.8;\n        }\n      }\n\n      p.pop();\n    }\n\n    mouseInImg() {\n      return p.mouseX > this.x - this.w / 2 - mouse_padding && p.mouseX < this.x + this.w / 2 + mouse_padding && p.mouseY > this.y - this.h / 2 - mouse_padding && p.mouseY < this.y + this.h / 2 + mouse_padding;\n    }\n\n    check_mouse_hovers() {\n      if (card_types[this.type_id] == \"minion\") {\n        this.mouse_over_power = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y + this.h / 2.8) < 50;\n        this.mouse_over_toughness = p.dist(p.mouseX, p.mouseY, this.x + this.w / 2.6, this.y + this.h / 2.8) < 50;\n      }\n\n      this.mouse_over_mana = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y - this.h / 2.3) < 50;\n    }\n\n  };\n  p.Button = class {\n    constructor(button_name, button_id) {\n      this.button_name = button_name;\n      this.button_id = button_id;\n      this.x = 0;\n      this.y = 0;\n      this.w = p.textWidth(button_name) + 14;\n      this.h = font_pixels + 10;\n      this.fillAlpha = 100;\n      this.text_x = 0;\n      this.text_y = 0;\n    }\n\n    mouseInRegion() {\n      return p.mouseX > this.x - this.w / 2 - mouse_padding && p.mouseX < this.x + this.w / 2 + mouse_padding && p.mouseY > this.y - this.h / 2 - mouse_padding && p.mouseY < this.y + this.h / 2 + mouse_padding;\n    }\n\n    resized() {\n      this.x = w_padding - 150 + this.w / 2 - 7;\n      this.y = p.map(this.button_id, 0, buttons.length, h_padding, p.height - h_padding);\n      this.text_x = this.x - this.w / 2 + 7;\n      this.text_y = this.y - 6;\n    }\n\n    run() {\n      this.update();\n      this.display();\n    }\n\n    update() {\n      if (this.mouseInRegion() && current_survey_topic == 0) {\n        this.fillAlpha = 255;\n      } else {\n        this.fillAlpha = 100;\n      }\n    }\n\n    display() {\n      p.textSize(font_pixels);\n      p.textAlign(p.LEFT, p.CENTER);\n      p.fill(255, this.fillAlpha);\n      p.rect(this.x, this.y, this.w, this.h, 4, 4);\n      p.fill(0, 255);\n      p.text(this.button_name, this.text_x, this.text_y);\n    }\n\n  };\n\n  document.oncontextmenu = function () {\n    return false;\n  };\n}","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/src/code/sketch.js"],"names":["sketch","p","buttons","button_id","effects","tasks","title","instruction","num_cards","class","current_task_index","user","cards","card_types","method_names","target_names","target_names_singular","filter_names","duration_names","param_format_names","effect_names","keywords","all_creature_types","creature_types","survey_topics","current_survey_topic","survey_drop_target","font_pixels_large","font_pixels","font_pixels_small","hearthstone_font","mouse_padding","w_padding","h_padding","grid_w_padding","grid_h_padding","rect_mask","ellipse_mask","blank_spell_img","blank_creature_img","blank_weapon_img","full_blank_creature_img","bg","gan_imgs","theMouse","setupDone","hoveredOption","editing","editing_card","effect_to_remove","editX","editY","simCount","simulating","simDuration","simTime","mouse_over_queuer","simResults","simTurns","props","myCustomRedrawAccordingToNewPropsHandler","_props","preload","loadImage","bg_img","spell_img","weapon_img","creature_img","loadFont","hs_font","im","push","setup","createCanvas","windowWidth","windowHeight","getURLParams","FancyMouse","height","width","imageMode","CENTER","rectMode","textFont","textSize","fill","noStroke","register_all","card_id","Card","resize_all","draw","background","textAlign","LEFT","image","c","run","b","busy","translate","mouseX","xOffset","mouseY","yOffset","text","effect","label_name","pop","draw_task_overlay","draw_edit_overlay","sim_overlay","draw_survey","RIGHT","setting","settings","options","attack","defense","xPos","map","yPos","boxWidth","boxHeight","rect","optionButtonWidth","length","optionButtonHeight","optionButtonsPadding","index","option","entries","optionString","toString","toUpperCase","substring","split","join","mousePressedWhileSurveying","progressSurveyThroughIssues","x","floor","y","mousePressedWhileNotSurveying","clickedCard","mouseInImg","dropEffectOnCard","clickToEditCard","setOffset","mouse_over_next","add_to_queue","mouse_click_while_editing","mouseInRegion","text_x","text_y","JSON","parse","stringify","button_name","finished_survey","i","includes","mouse_over_mana","mouse_over_power","mouse_over_toughness","dist","mouse_over_card_effect","hovered_effect","effect_string_height","splice","indexOf","mana","constrain","power","toughness","rotate","QUARTER_PI","mousePressed","keyPressed","key","submit","windowResized","resizeCanvas","millis","queur_x","queur_y","CORNER","submissions","card_submission","id","task","card_task_index","t","m","repeat_checker","e","effect_short","undefined","methods","params","targets","filters","duration","send_to_google_sheets","resized","generate_masks","createGraphics","ellipse","register_effect","effect_text","method","param","Effect","Button","constuctor","buttonX","buttonY","constructor","param_format","effect_string","effect_string_width","card_class","w","h","oversized","type_id","flav_img_index","random","generate_effect_text","check_mouse_hovers","display","estimatedCharactersPerLine","estimatedLines","flav","get","forg","mask","strokeWeight","stroke","translation_offset_y","textWidth","fillAlpha","update","document","oncontextmenu"],"mappings":"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","sourcesContent":["/* eslint eqeqeq: \"off\", no-unused-vars: \"off\" */\n\n\n//to fix totalHeight bug, change p5 by changing o-totalHeight to just o\n//todo: fix this on a generic p5 import somehow\n\n\n//todo: language stuff\n//todo: buttons\n//todo: creature types\n//todo: card types\n//todo: task front end\n//todo: sheets\n//todo: effect limit\n\nexport default function sketch(p) {\n\n\n  const buttons = [];\n  let button_id = 0;\n\n  const effects = [];\n\n  const tasks = [{\n    title: \"Mage vs Warrior\",\n    instruction: \"Create 2 mage cards that helps against warriors.\",\n    num_cards: 2,\n    class: \"mage\"\n  },\n  {\n    title: \"Murlocs\",\n    instruction: \"Create 3 murlocs\",\n    num_cards: 3,\n    class: \"shaman\"\n  },\n  {\n    title: \"The ultimate defense\",\n    instruction: \"Create the ultimate defensive card.\",\n    num_cards: 1,\n    class: \"warrior\"\n  }\n  ]\n  let current_task_index = 0;\n\n\n\n  let user = \"\"\n\n  const cards = [];\n  const card_types = [\"spell\", \"minion\", \"weapon\"]\n\n  const method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\n  const target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\n  const target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"]\n  const filter_names = [\"enemy\", \"friendly\", \"all\"];\n  const duration_names = [\"turn\", \"permanently\"];\n  const param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\n  const effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"]\n  const keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"]\n  const all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"]\n  const creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"]\n\n  const survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\n  let current_survey_topic = 0;\n\n  let survey_drop_target = null;\n\n  const font_pixels_large = 32;;\n  const font_pixels = 24;\n  const font_pixels_small = 20;\n\n  let hearthstone_font;\n  const mouse_padding = 1;\n  let w_padding, h_padding;\n  let grid_w_padding, grid_h_padding;\n\n  let rect_mask, ellipse_mask;\n  let blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\n  let bg;\n  let gan_imgs = [];\n\n\n  let theMouse;\n  let setupDone = false;\n  let hoveredOption = -1;\n\n  let editing = \"none\";\n  let editing_card = null;\n  let effect_to_remove = null;\n  let editX = 0;\n  let editY = 0;\n\n  let simCount = 3;\n  let simulating = false;\n  let simDuration = 2000;\n  let simTime = -simDuration;\n\n  let mouse_over_queuer;\n\n  let simResults = null;\n  let simTurns = null;\n\n  let props;\n\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (_props) => {\n    props = _props;\n  }\n\n  p.preload = () => {\n    bg = p.loadImage(props.bg_img)\n    blank_spell_img = p.loadImage(props.spell_img);\n    blank_weapon_img = p.loadImage(props.weapon_img)\n    blank_creature_img = p.loadImage(props.creature_img)\n    full_blank_creature_img = p.loadImage(props.full_blank_creature_img);\n    hearthstone_font = p.loadFont(props.hs_font);\n    for(let im of props.gan_imgs){\n      gan_imgs.push(p.loadImage(im))\n    }\n  }\n\n\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    user = p.getURLParams().user;\n\n    theMouse = new p.FancyMouse();\n\n\n    h_padding = p.height * 0.1;\n    w_padding = p.width * 0.2;\n    grid_h_padding = p.height * 0.2;\n    grid_w_padding = p.width * 0.1;\n    p.imageMode(p.CENTER)\n    p.rectMode(p.CENTER);\n    p.textFont(hearthstone_font);\n    p.textSize(font_pixels);\n    p.fill(255);\n    p.noStroke();\n\n    p.register_all();\n\n\n    for (let card_id = 0; card_id < tasks[current_task_index].num_cards; card_id++) {\n      cards.push(new p.Card(card_id, current_task_index, tasks[current_task_index].class));\n    }\n\n    p.resize_all();\n\n\n\n\n    setupDone = true;\n\n  }\n\n\n  p.draw = () => {\n    p.background(255)\n    p.textAlign(p.LEFT, p.CENTER);\n    p.image(bg, p.width / 2, p.height / 2, p.width, p.height);\n\n    for (let c of cards) {\n      c.run();\n    }\n\n    for (let b of buttons) {\n      b.run();\n    }\n\n    if (theMouse.busy && current_survey_topic == 0) {\n      p.push();\n      p.translate(p.mouseX - theMouse.xOffset, p.mouseY - theMouse.yOffset)\n      p.textSize(28)\n      p.text(theMouse.effect.label_name, 0, 0)\n      p.pop();\n    }\n\n    p.draw_task_overlay();\n    p.draw_edit_overlay();\n    p.sim_overlay();\n\n\n    if (survey_topics[current_survey_topic] != \"none\") {\n      p.draw_survey();\n    }\n\n  }\n\n  p.draw_task_overlay = () => {\n    p.textAlign(p.RIGHT, p.CENTER)\n    p.textSize(font_pixels_large);\n    p.text(tasks[current_task_index].title,  p.width-w_padding/2, h_padding)\n\n    p.textSize(font_pixels);\n    p.text(tasks[current_task_index].instruction, p.width-w_padding/2, h_padding+font_pixels_large)\n\n  }\n\n\n\n  p.draw_survey = () => {\n    p.push();\n    p.textAlign(p.CENTER, p.CENTER)\n    p.textSize(font_pixels)\n\n    p.rectMode(p.CENTER)\n    p.background(0, 100)\n\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]]\n    let options = setting[0]\n\n\n    if (setting[0][0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (setting[0][0] == \"k\") {\n      options = keywords\n    } else if (setting[0][0] == \"c\") {\n      options = creature_types;\n    }\n\n\n    if (options[0] == \"x/x\") {\n      for (let attack = 1; attack < 11; attack++) {\n        for (let defense = 1; defense < 11; defense++) {\n          let xPos = p.map(attack, 1, 10, grid_w_padding, p.width - grid_w_padding);\n          let yPos = p.map(defense, 1, 10, grid_h_padding, p.height - grid_h_padding);\n          let boxWidth = (p.width - grid_w_padding * 2) / 10;\n          let boxHeight = (p.height - grid_h_padding * 2) / 10;\n\n          if (p.mouseX > xPos - boxWidth / 2 && p.mouseX < xPos + boxWidth / 2 &&\n            p.mouseY > yPos - boxHeight / 2 && p.mouseY < yPos + boxHeight / 2) {\n            p.fill(255, 100);\n          } else {\n            p.fill(255, 0);\n          }\n          p.rect(xPos, yPos, boxWidth, boxHeight);\n          p.fill(255);\n          p.text(attack + \"/\" + defense, xPos, yPos - 10)\n        }\n      }\n    } else {\n\n\n      p.textSize(40);\n      p.fill(255)\n      p.text(theMouse.effect.label_name + \"...\", p.width / 2, p.height * 0.1);\n\n      p.textSize(font_pixels)\n      p.rectMode(p.CENTER)\n\n      let optionButtonWidth = (p.width / options.length) * 0.5;\n      let optionButtonHeight = p.height * 0.10;\n      let optionButtonsPadding = p.width * 0.25;\n\n      for (let [index, option] of options.entries()) {\n        let xPos = p.map(index, 0, options.length - 1, optionButtonsPadding, p.width - optionButtonsPadding);\n        if (p.mouseX > xPos - optionButtonWidth / 2 && p.mouseX < xPos + optionButtonWidth / 2) {\n          p.fill(255, 100)\n          hoveredOption = index;\n        } else {\n          p.fill(255, 50)\n        }\n        p.rect(xPos, p.height * 0.5, optionButtonWidth, optionButtonHeight, 16);\n        p.fill(255);\n\n        let optionString = option.toString();\n        optionString = optionString[0].toUpperCase() + optionString.substring(1)\n        optionString = optionString.split(\" \").join(\"\\n\");\n\n        p.text(optionString, xPos, p.height / 2)\n      }\n    }\n\n    p.pop();\n  }\n\n\n  p.mousePressedWhileSurveying = () => {\n    if (p.progressSurveyThroughIssues()) {\n      return\n    }\n\n\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0]\n    if (options[0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    } else if (options[0] == \"k\") {\n      options = keywords;\n    } else if (options[0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      setting[1] = {\n        x: p.floor(p.map(p.mouseX, 0, p.width, 1, 11)),\n        y: p.floor(p.map(p.mouseY, 0, p.height, 1, 11))\n      }\n    } else {\n      setting[1] = options[hoveredOption];\n    }\n\n    current_survey_topic++;\n\n    if (p.progressSurveyThroughIssues()) {\n      return\n    }\n\n  }\n\n\n  p.mousePressedWhileNotSurveying = () => {\n    let clickedCard = null;\n\n    for (let c of cards) {\n      if (c.mouseInImg()) {\n        clickedCard = c;\n      }\n    }\n\n\n    if (clickedCard) {\n      if (theMouse.busy) { //dropping effect onto a card\n        p.dropEffectOnCard(clickedCard)\n      } else { //clicking on a card generally\n        p.clickToEditCard(clickedCard)\n      }\n    } else {\n      if (theMouse.busy) { //clicked away to drop label\n        theMouse.busy = false;\n        theMouse.setOffset(0, 0);\n        theMouse.effect = null;\n      } else { //other clicks\n\n\n        if(mouse_over_next && current_task_index < tasks.length){\n          current_task_index \n        }\n        if (mouse_over_queuer) {\n          p.add_to_queue();\n        }\n\n        p.mouse_click_while_editing();\n\n\n        for (let b of buttons) { //clicking on a button with an empty hand\n          if (b.mouseInRegion()) {\n            theMouse.busy = true;\n            theMouse.setOffset(b.text_x, b.text_y);\n            theMouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n\n            break;\n          }\n        }\n      }\n    }\n\n  }\n\n\n\n  //returns true if you need to return out of mouse\n  p.progressSurveyThroughIssues = () => {\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    for (let i = 0; i < survey_topics.length; i++) {\n      if (theMouse.effect.settings[survey_topics[current_survey_topic]][0] == null ||\n        (!param_format_names.includes(theMouse.effect.settings[survey_topics[current_survey_topic]][0][0]) &&\n          theMouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1)) {\n        current_survey_topic++;\n        if (current_survey_topic == survey_topics.length) {\n          p.finished_survey();\n          return true;\n        }\n      }\n    }\n\n\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n\n    return false;\n  }\n\n  p.dropEffectOnCard = (c) => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if (p.progressSurveyThroughIssues()) {\n\n      return\n    }\n  }\n\n\n  p.clickToEditCard = (c) => {\n\n    if (c.mouse_over_mana) {\n      editing = \"mana\";\n      editing_card = c;\n    } else if (c.mouse_over_power) {\n      editing = \"power\";\n      editing_card = c;\n    } else if (c.mouse_over_toughness && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"toughness\";\n      editing_card = c;\n    } else if (c.mouse_over_card_effect && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"effect\";\n      editX = c.hovered_effect.x + blank_spell_img.width / 2;\n      editY = c.hovered_effect.y + c.hovered_effect.effect_string_height / 2;\n      editing_card = c;\n      effect_to_remove = c.hovered_effect;\n    } else if (editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10) {\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n      editing = \"none\";\n    }\n  }\n\n\n  p.mouse_click_while_editing = () => {\n    if (editing == \"mana\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY - 50) < 40) {\n        editing_card.mana--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY - 50) < 40) {\n        editing_card.mana++;\n      } else {\n        editing = \"none\"\n      }\n      editing_card.mana = p.constrain(editing_card.mana, 0, 10)\n    } else if (editing == \"power\") {\n\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.power--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.power++;\n      } else {\n        editing = \"none\"\n      }\n      editing_card.power = p.constrain(editing_card.power, 0, 10)\n    } else if (editing == \"toughness\") {\n\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.toughness--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.toughness++;\n      } else {\n        editing = \"none\"\n      }\n      editing_card.toughness = p.constrain(editing_card.toughness, 1, 10)\n    } else if (editing == \"effect\") {\n      editing = \"none\";\n    }\n  }\n\n\n  p.draw_edit_overlay = () => {\n    p.push();\n    if (editing != \"none\") {\n      p.translate(editX, editY)\n      p.noStroke();\n      if (editing == \"effect\") {\n        p.rotate(p.QUARTER_PI);\n        p.fill(0);\n        p.rect(0, 0, 22, 6);\n        p.rect(0, 0, 6, 22);\n        p.fill(255);\n        p.rect(0, 0, 20, 4);\n        p.rect(0, 0, 4, 20);\n\n      } else {\n        p.fill(0);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 8, 32);\n        p.fill(255);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 6, 30);\n      }\n    }\n    p.pop();\n  }\n\n  p.mousePressed = () => {\n    if (setupDone) {\n      if (survey_topics[current_survey_topic] != \"none\") {\n        p.mousePressedWhileSurveying();\n      } else {\n        p.mousePressedWhileNotSurveying();\n      }\n    }\n  }\n\n  p.finished_survey = () => {\n\n    survey_drop_target.effects.push(JSON.parse(JSON.stringify(theMouse.effect)))\n    current_survey_topic = 0;\n    theMouse.effect = null;\n    theMouse.busy = false;\n  }\n\n  p.keyPressed = () => {\n    if (p.key == ' ' && !simulating) {\n      simResults = null;\n      simTurns = null;\n      simulating = true;\n      simTime = simCount;\n      p.submit();\n    }\n\n  }\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    p.resize_all();\n  }\n\n  p.add_to_queue = () => {\n    if (!simulating) {\n      simulating = true;\n      simTime = p.millis();\n      p.submit();\n    }\n  }\n\n  p.sim_overlay = () => {\n    p.push();\n    let queur_x = p.map(2, 0, 3, w_padding, p.width - w_padding);\n    let queur_y = p.height * 0.85\n    mouse_over_queuer = (p.mouseX > queur_x - 100 && p.mouseX < queur_x + 100 && p.mouseY > queur_y - 30 && p.mouseY < queur_y + 30)\n\n    p.translate(queur_x, queur_y);\n\n    if (mouse_over_queuer && !simulating) {\n      p.fill(255, 255);\n    } else {\n      p.fill(p.map(p.millis(), simTime, simTime + simDuration, 100, 255, true), 100)\n    }\n    p.rect(0, 0, 200, 60, 4)\n\n\n    p.fill(0, 255);\n    p.textAlign(p.CENTER, p.CENTER)\n    p.text(simulating ? \"Adding...\" : \"Add to queue\", 0, -4)\n\n    p.rectMode(p.CORNER)\n\n    // if(simulating)\n    // p.fill(0)\n    // p.rect(-100, -30, map(millis(), simTime, simTime+simDuration, 0, 200, true), 60, 4)\n\n\n    p.pop();\n\n    if (simulating) {\n      if (p.millis() > simTime + simDuration) {\n        simulating = false;\n      }\n    }\n    // if (simulating) {\n    //   simTime = constrain(simTime - random(0.001, 0.002), 0, simCount);\n\n    //   let lw = map(simTime, 0, simCount, 0, 200);\n    //   noStroke();\n    //   p.fill(200);\n    //   p.rect(width * 0.5 - 100, height * 0.85 - 16, 200, 40)\n    //   p.fill(0)\n    //   p.rect(width * 0.5 - 100, height * 0.85 - 16, lw, 40)\n    //   p.fill(255);\n    //   text(\"Simulating...\", width * 0.5, height * 0.85)\n    // } else {\n    //   text(\"Press Spacebar to simulate\", width / 2, height * 0.9);\n    // }\n\n    // if (simResults != null) {\n\n    //   text(\"The win rate with your card is: \" + simResults +\n    //     \"%\\n\" + \"The average game lasted \" + simTurns +\n    //     \" turns.\", width * 0.5, height * 0.10);\n    // }\n  }\n\n  p.submit = () => {\n    let submissions = [];\n    for (let c of cards) {\n\n      let card_submission = {\n        id: c.card_id,\n        task: c.card_task_index,\n        user: user,\n        p: c.power,\n        t: c.toughness,\n        m: c.mana,\n      }\n\n\n      let repeat_checker = {};\n\n      for (let e of c.effects) {\n        if (repeat_checker[e.effect_short] == undefined) {\n          repeat_checker[e.effect_short] = 0;\n        } else {\n          repeat_checker[e.effect_short]++;\n        }\n\n        if (e.settings.methods[0] != null) card_submission[e.effect_short + \"-method-\" + repeat_checker[e.effect_short]] = e.settings.methods[1];\n        if (e.settings.params[0] != null) card_submission[e.effect_short + \"-param-\" + repeat_checker[e.effect_short]] = e.settings.params[1];\n        if (e.settings.targets[0] != null) card_submission[e.effect_short + \"-target-\" + repeat_checker[e.effect_short]] = e.settings.targets[1];\n        if (e.settings.filters[0] != null) card_submission[e.effect_short + \"-filter-\" + repeat_checker[e.effect_short]] = e.settings.filters[1];\n        if (e.settings.duration[0] != null) card_submission[e.effect_short + \"-duration-\" + repeat_checker[e.effect_short]] = e.settings.duration[1];\n\n      }\n      submissions[c.card_task_index + \"-\" + c.card_id] = card_submission;\n    }\n\n\n    props.send_to_google_sheets(submissions)\n\n  }\n\n\n  // gapi.load('client', ()=>{\n  //   gapi.client.init({ 'apiKey':  config.sheets_api_key}).then(()=>{\n  //     gapi.client.sheets.spreadsheets.values.get({\n  //       spreadsheetId: config.sheet_id,\n  //       range: \"queue!A1:D5\"\n  //     }).then((response) => {\n  //       var result = response.result;\n  //       var numRows = result.values ? result.values.length : 0;\n  //       console.log(`${numRows} rows retrieved.`);\n  //     });\n  //   }); \n  // });\n\n\n\n\n\n\n\n  // httpPost('https://hearth-mici-backend.loca.lt/get_winrates', submission, (response) => {\n  //   simulating = false;\n  //   simResults = round(JSON.parse(response).win_rate, 2);\n  //   simTurns = round(JSON.parse(response).num_turns, 2);\n  //   console.log(simResults, simTurns)\n  // });\n\n\n  // httpPost('https://sheets.googleapis.com/v4/spreadsheets/1TlgFYV4zwkyfwGq1DNU39Sq1kOsOaL3jfppokpmgX0w/values/queue!A1:E1:append?key='+config.sheets_api_key, {\n  //   range: \"queue!A1:E1\",\n  //   key: config.sheets_api_key,\n  //   majorDimension: \"ROWS\",\n  //   values: [\n  //     [\"Door\", \"$15\", \"2\", \"3/15/2016\"],\n  //     [\"Engine\", \"$100\", \"1\", \"3/20/2016\"],\n  //   ],\n  // }, (response) => {\n  //   console.log(response)\n  // });\n\n\n\n  p.resize_all = () => {\n    for (let b of buttons) {\n      b.resized();\n    }\n\n    for (let c of cards) {\n      c.resized();\n    }\n\n    p.generate_masks();\n   \n  }\n\n  p.generate_masks = () => {\n    ellipse_mask = p.createGraphics(250, 250);\n    ellipse_mask.ellipse(ellipse_mask.width / 2, ellipse_mask.height / 2, 200,  200)\n\n    rect_mask = p.createGraphics(250, 250);\n    rect_mask.rectMode(p.CENTER);\n    rect_mask.rect(rect_mask.width / 2, rect_mask.height / 2, 200, 160)\n  }\n\n  p.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n\n    effects[effect_text] = new p.Effect(effect_text, effect_short, method, param, targets, filters, duration);\n    buttons.push(new p.Button(effect_text, button_id++));\n  }\n\n  p.register_all = () => {\n\n    p.register_effect(\"Deal damage\", \"dam\",\n      [\"randomly\", \"targeted\", \"all\"],\n      [\"x\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n    p.register_effect(\"Destroy\", \"des\",\n      [\"randomly\", \"targeted\", \"all\"],\n      null,\n      [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n    p.register_effect(\"Heal\", \"hea\",\n      [\"randomly\", \"targeted\", \"all\"],\n      [\"x\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n    p.register_effect(\"Gain armour\", \"arm\",\n      null,\n      [\"x\"],\n      null,\n      null,\n      null);\n\n    p.register_effect(\"Change stats\", \"cha\",\n      [\"randomly\", \"targeted\", \"all\", \"aura\"],\n      [\"x/x\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      [\"turn\", \"permanently\"]);\n\n    p.register_effect(\"Set stats\", \"set\",\n      [\"randomly\", \"targeted\", \"all\", \"aura\"],\n      [\"x/x\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      [\"turn\", \"permanently\"]);\n\n\n    p.register_effect(\"Give keyword\", \"giv\",\n      [\"randomly\", \"targeted\", \"all\", \"aura\"],\n      [\"k\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      [\"turn\", \"permanently\"]);\n\n    p.register_effect(\"Return to hand\", \"ret\",\n      [\"randomly\", \"targeted\", \"all\"],\n      null,\n      [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n\n    p.register_effect(\"Draw\", \"dra\",\n      null,\n      [\"x\"],\n      null,\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n\n    p.register_effect(\"Gain mana\", \"gai\",\n      null,\n      [\"x\"],\n      null,\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n    p.register_effect(\"Summon\", \"sum\",\n      null,\n      [\"x/x\"],\n      null,\n      null,\n      null);\n\n    p.register_effect(\"Keyword\", \"key\",\n      null,\n      [\"k\"],\n      null,\n      null,\n      null);\n\n    p.register_effect(\"Creature type\", \"cre\",\n      null,\n      [\"c\"],\n      null,\n      null,\n      null);\n\n\n\n  }\n\n\n  p.FancyMouse = class {\n    constuctor() {\n      this.busy = false;\n      this.xOffset = 0;\n      this.yOffset = 0;\n      this.effect = null;\n    }\n    setOffset(buttonX, buttonY) {\n      this.xOffset = p.mouseX - buttonX;\n      this.yOffset = p.mouseY - buttonY;\n    }\n  }\n\n\n\n\n\n  p.Effect = class {\n    constructor(label_name, effect_short, methods, param_format, targets, filters, duration) {\n      this.x = 0;\n      this.y = 0;\n\n      this.effect_string = \"\";\n      this.effect_string_height = 0;\n      this.effect_string_width = blank_spell_img.width * 0.5;\n      this.label_name = label_name;\n      this.effect_short = effect_short;\n\n      this.settings = {\n        methods: [methods, \"\"],\n        params: [param_format, \"\"],\n        targets: [targets, \"\"],\n        filters: [filters, \"\"],\n        duration: [duration, \"\"]\n      };\n    }\n  }\n\n\n  p.Card = class {\n    constructor(card_id, card_task_index, card_class) {\n      this.y = 0;\n      this.x = 0;\n      this.w = blank_spell_img.width * 0.75;\n      this.h = blank_spell_img.height * 0.75;\n      this.oversized = false;\n\n\n      this.class = card_class;\n      this.type_id = 1; //creature\n      this.card_id = card_id;\n      this.card_task_index = card_task_index;\n\n\n      this.flav_img_index = p.floor(p.random(gan_imgs.length));\n      this.mana = 5;\n      this.power = 5;\n      this.toughness = 5;\n      this.effects = [];\n\n      this.hovered_effect = null;\n      this.mouse_over_card_effect = false;\n      this.mouse_over_mana = false;\n      this.mouse_over_power = false;\n      this.mouse_over_toughness = false;\n\n\n    }\n\n    resized() {\n      this.x = p.map(this.card_id + 1, 0, cards.length, w_padding, p.width - w_padding)\n      this.y = p.height / 2;\n    }\n\n    run() {\n      this.generate_effect_text();\n      this.check_mouse_hovers();\n      this.display();\n    }\n\n    generate_effect_text() {\n      for (let e of this.effects) {\n        e.effect_string = \"\";\n        if (e.label_name == \"Keyword\" || e.label_name == \"Creature type\") {\n          e.effect_string = e.settings.params[1];\n        } else if (e.label_name == \"Deal damage\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n          } else {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \"\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \" //remove \"all all\"\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1]\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n          }\n        } else if (e.label_name == \"Destroy\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly destroy a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Destroy a target \";\n          } else {\n            e.effect_string = \"Destroy all \"\n          }\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \" //remove \"all all\"\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1]\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n          }\n        } else if (e.label_name == \"Heal\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n          } else {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n          }\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \" //remove \"all all\"\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1]\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n          }\n        } else {\n          e.effect_string = e.label_name\n        }\n\n\n\n        let estimatedCharactersPerLine = 20;\n        let estimatedLines = e.effect_string.length / estimatedCharactersPerLine;\n        e.effect_string_height = font_pixels_small * estimatedLines + 30;\n\n      }\n\n    }\n\n    display() {\n      p.push();\n      p.fill(0);\n      p.textAlign(p.CENTER, p.CENTER)\n      if (this.effects.length > 2) {\n        this.oversized = true;\n      } else {\n        this.oversized = false;\n      }\n\n\n      let flav = gan_imgs[this.flav_img_index].get();\n      let forg;\n\n      if (card_types[this.type_id] == \"spell\") {\n        flav.mask(rect_mask)\n        forg = blank_spell_img;\n      } else if (card_types[this.type_id] == \"minion\") {\n        flav.mask(ellipse_mask)\n        forg = this.oversized ? full_blank_creature_img : blank_creature_img;\n      } else {\n        flav.mask(rect_mask)\n        forg = blank_weapon_img;\n      }\n\n      if (!this.oversized) {\n        p.image(flav, this.x, this.y-90, 250, 250)\n      }\n      p.image(forg, this.x, this.y, this.w, this.h);\n\n      p.push();\n      p.textSize(60);\n      p.fill(255);\n      p.strokeWeight(3);\n      p.stroke(0);\n\n      if (card_types[this.type_id] == \"minion\") {\n        p.text(this.power, this.x - this.w / 2.99, this.y + this.h / 2.8)\n        p.text(this.toughness, this.x + this.w / 2.6, this.y + this.h / 2.8)\n      }\n\n\n      p.text(this.mana, this.x - this.w / 2.99, this.y - this.h / 2.3)\n\n      p.pop();\n\n\n      p.push();\n      p.fill(0);\n      p.textSize(font_pixels_small);\n      let translation_offset_y;\n      if (this.oversized) {\n        translation_offset_y = this.y - this.h / 2 + 80;\n        p.translate(this.x, this.y - this.h / 2 + 80);\n      } else {\n        translation_offset_y = this.y + 50;\n        p.translate(this.x, this.y + 50);\n      }\n\n      this.mouse_over_card_effect = false;\n      this.hovered_effect = null;\n      for (let e of this.effects) {\n\n        translation_offset_y += e.effect_string_height / 2;\n        p.translate(0, e.effect_string_height / 2)\n\n        if (p.mouseY > translation_offset_y - e.effect_string_height / 2 &&\n          p.mouseY < translation_offset_y + e.effect_string_height / 2 &&\n          p.mouseX > this.x - e.effect_string_width / 2 &&\n          p.mouseX < this.x + e.effect_string_width / 2) {\n\n          this.mouse_over_card_effect = true;\n\n          this.hovered_effect = e;\n          this.hovered_effect.x = this.x - e.effect_string_width / 2;\n          this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n          p.fill(0, 100);\n        } else {\n          p.fill(0, 50)\n        }\n\n        p.rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4)\n        p.fill(255, 255)\n        p.text(e.effect_string, 0, 0, blank_spell_img.width / 2, blank_spell_img.height / 2)\n        translation_offset_y += e.effect_string_height / 2 + 5;\n        p.translate(0, e.effect_string_height / 2 + 5)\n\n      }\n      p.pop();\n\n\n      p.push();\n\n      if (editing_card == this) {\n        if (editing == \"mana\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y - this.h / 2.3;\n        } else if (editing == \"power\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y + this.h / 2.8;\n        } else if (editing == \"toughness\") {\n          editX = this.x + this.w / 2.6;\n          editY = this.y + this.h / 2.8;\n        }\n      }\n\n      p.pop();\n    }\n\n\n    mouseInImg() {\n      return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n        p.mouseX < this.x + this.w / 2 + mouse_padding &&\n        p.mouseY > this.y - this.h / 2 - mouse_padding &&\n        p.mouseY < this.y + this.h / 2 + mouse_padding);\n\n    }\n    check_mouse_hovers() {\n      if (card_types[this.type_id] == \"minion\") {\n        this.mouse_over_power = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y + this.h / 2.8) < 50\n        this.mouse_over_toughness = p.dist(p.mouseX, p.mouseY, this.x + this.w / 2.6, this.y + this.h / 2.8) < 50\n      }\n      this.mouse_over_mana = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y - this.h / 2.3) < 50\n    }\n  }\n\n\n\n\n\n  p.Button = class {\n\n    constructor(button_name, button_id) {\n      this.button_name = button_name;\n      this.button_id = button_id;\n\n      this.x = 0;\n      this.y = 0;\n      this.w = p.textWidth(button_name) + 14;\n      this.h = font_pixels + 10;\n      this.fillAlpha = 100;\n\n      this.text_x = 0;\n      this.text_y = 0;\n    }\n    mouseInRegion() {\n      return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n        p.mouseX < this.x + this.w / 2 + mouse_padding &&\n        p.mouseY > this.y - this.h / 2 - mouse_padding &&\n        p.mouseY < this.y + this.h / 2 + mouse_padding);\n    }\n\n    resized() {\n      this.x = w_padding - 150 + this.w / 2 - 7;\n      this.y = p.map(this.button_id, 0, buttons.length, h_padding, p.height - h_padding);\n      this.text_x = this.x - this.w / 2 + 7;\n      this.text_y = this.y - 6;\n    }\n\n    run() {\n      this.update();\n      this.display();\n    }\n\n    update() {\n\n      if (this.mouseInRegion() && current_survey_topic == 0) {\n        this.fillAlpha = 255;\n      } else {\n        this.fillAlpha = 100;\n      }\n\n    }\n\n    display() {\n\n\n      p.textSize(font_pixels)\n      p.textAlign(p.LEFT, p.CENTER)\n      p.fill(255, this.fillAlpha);\n      p.rect(this.x, this.y, this.w, this.h, 4, 4);\n      p.fill(0, 255);\n      p.text(this.button_name, this.text_x, this.text_y);\n    }\n\n\n  }\n\n\n  document.oncontextmenu = function () {\n    return false;\n  }\n\n\n}"]},"metadata":{},"sourceType":"module"}