{"ast":null,"code":"/* eslint eqeqeq: \"off\", no-unused-vars: \"off\" */\n//to fix totalHeight bug, change p5 by changing o-totalHeight to just o\n//todo: fix this on a generic p5 import somehow\n//todo: language stuff\n//todo: buttons\n//todo: creature types\n//todo: card types\n//todo: effect limit\n//ABC test reports, articulate logic for report design\n//make rampiness, variety, controllynes and see when they would be useful\nexport default function sketch(p) {\n  const buttons = [];\n  let button_id = 0;\n  const effects = [];\n  let current_task_index = 0;\n  const task_details = [{\n    id: 0,\n    title: \"Mage vs Warrior\",\n    instruction: \"Create 2 mage cards that helps against warriors.\",\n    num_cards: 2,\n    class: \"mage\"\n  }, {\n    id: 1,\n    title: \"Murlocs\",\n    instruction: \"Create 3 murlocs\",\n    num_cards: 3,\n    class: \"shaman\"\n  }, {\n    id: 2,\n    title: \"The ultimate defense\",\n    instruction: \"Create the ultimate defensive card.\",\n    num_cards: 1,\n    class: \"warrior\"\n  }];\n  let user = \"\";\n  let tasks = [];\n  const card_types = [\"spell\", \"minion\", \"weapon\"];\n  const method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\n  const target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\n  const target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"];\n  const filter_names = [\"enemy\", \"friendly\", \"all\"];\n  const duration_names = [\"turn\", \"permanently\"];\n  const param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\n  const effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"];\n  const keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"];\n  const all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"];\n  const creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"];\n  const survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\n  let current_survey_topic = 0;\n  let survey_drop_target = null;\n  const font_pixels_large = 32;\n  const font_pixels = 24;\n  const font_pixels_small = 20;\n  let hearthstone_font;\n  const mouse_padding = 1;\n  let w_padding, h_padding;\n  let grid_w_padding, grid_h_padding;\n  let rect_mask, ellipse_mask;\n  let blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\n  let bg;\n  let gan_imgs = [];\n  let the_mouse;\n  let setup_done = false;\n  let hovered_option = -1;\n  let editing = \"none\";\n  let editing_card = null;\n  let effect_to_remove = null;\n  let editX = 0;\n  let editY = 0;\n  let sending = false;\n  let send_start_time = -10000;\n  const estimated_send_duration = 3000; //over-estimate\n\n  let sent = false;\n  let mouse_over_queuer;\n  let mouse_over_next;\n  let mouse_over_prev;\n  let props;\n\n  p.myCustomRedrawAccordingToNewPropsHandler = _props => {\n    props = _props;\n  };\n\n  p.preload = () => {\n    bg = p.loadImage(props.bg_img);\n    blank_spell_img = p.loadImage(props.spell_img);\n    blank_weapon_img = p.loadImage(props.weapon_img);\n    blank_creature_img = p.loadImage(props.creature_img);\n    full_blank_creature_img = p.loadImage(props.full_blank_creature_img);\n    hearthstone_font = p.loadFont(props.hs_font);\n\n    for (let im of props.gan_imgs) {\n      gan_imgs.push(p.loadImage(im));\n    }\n  };\n\n  p.setup = () => {\n    var _p$getURLParams$user;\n\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    user = (_p$getURLParams$user = p.getURLParams().user) !== null && _p$getURLParams$user !== void 0 ? _p$getURLParams$user : 2;\n    console.log(\"loading\");\n    props.load_from_google_sheets().then(result => {\n      console.log(result.data.r.data.values);\n    });\n    the_mouse = new p.FancyMouse();\n    h_padding = p.height * 0.1;\n    w_padding = p.width * 0.2;\n    grid_h_padding = p.height * 0.2;\n    grid_w_padding = p.width * 0.1;\n    p.imageMode(p.CENTER);\n    p.rectMode(p.CENTER);\n    p.textFont(hearthstone_font);\n    p.textSize(font_pixels);\n    p.fill(255);\n    p.noStroke();\n    p.register_all();\n\n    for (let task of task_details) {\n      tasks[task.id] = [];\n\n      for (let card_id = 0; card_id < task.num_cards; card_id++) {\n        tasks[task.id].push(new p.Card(card_id, task.id, task.class));\n      }\n    }\n\n    p.resize_all();\n    setup_done = true;\n  };\n\n  p.draw = () => {\n    p.background(255);\n    p.textAlign(p.LEFT, p.CENTER);\n    p.image(bg, p.width / 2, p.height / 2, p.width, p.height);\n\n    if (current_task_index < task_details.length) {\n      for (let c of tasks[current_task_index]) {\n        c.run();\n      }\n    }\n\n    for (let b of buttons) {\n      b.run();\n    }\n\n    if (the_mouse.busy && current_survey_topic == 0) {\n      p.push();\n      p.translate(p.mouseX - the_mouse.xOffset, p.mouseY - the_mouse.yOffset);\n      p.textSize(28);\n      p.text(the_mouse.effect.label_name, 0, 0);\n      p.pop();\n    }\n\n    p.draw_edit_overlay();\n    p.draw_task_controls();\n\n    if (current_task_index == task_details.length) {\n      p.send_overlay();\n    } else {\n      p.draw_task_overlay();\n    }\n\n    if (survey_topics[current_survey_topic] != \"none\") {\n      p.draw_survey();\n    }\n  };\n\n  p.draw_task_controls = () => {\n    let next_x = p.width - w_padding;\n    let next_y = p.height - h_padding;\n    mouse_over_next = p.dist(p.mouseX, p.mouseY, next_x, next_y) < 75;\n    p.push();\n    p.translate(next_x, next_y);\n    p.fill(255, current_task_index == task_details.length ? 0 : mouse_over_next ? 255 : 100);\n    p.triangle(0, -25, 0, 25, 75, 0);\n    p.pop();\n    let prev_x = p.map(1, 0, 3, w_padding, p.width - w_padding);\n    mouse_over_prev = p.dist(p.mouseX, p.mouseY, prev_x, next_y) < 75;\n    p.push();\n    p.translate(prev_x, next_y);\n    p.fill(255, current_task_index == 0 ? 50 : mouse_over_prev ? 255 : 100);\n    p.triangle(0, -25, 0, 25, -75, 0);\n    p.pop();\n  };\n\n  p.draw_task_overlay = () => {\n    p.textAlign(p.RIGHT, p.CENTER);\n    p.textSize(font_pixels_large);\n    p.text(task_details[current_task_index].title, p.width - w_padding / 2, h_padding);\n    p.textSize(font_pixels);\n    p.text(task_details[current_task_index].instruction, p.width - w_padding / 2, h_padding + font_pixels_large);\n    p.fill(0);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.text(`Task ${current_task_index + 1} \\\\ ${task_details.length}`, p.map(2, 0, 3, w_padding, p.width - w_padding), p.height - h_padding);\n  };\n\n  p.draw_survey = () => {\n    p.push();\n    p.textAlign(p.CENTER, p.CENTER);\n    p.textSize(font_pixels);\n    p.rectMode(p.CENTER);\n    p.background(0, 100);\n    let setting = the_mouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (setting[0][0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (setting[0][0] == \"k\") {\n      options = keywords;\n    } else if (setting[0][0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      for (let attack = 1; attack < 11; attack++) {\n        for (let defense = 1; defense < 11; defense++) {\n          let xPos = p.map(attack, 1, 10, grid_w_padding, p.width - grid_w_padding);\n          let yPos = p.map(defense, 1, 10, grid_h_padding, p.height - grid_h_padding);\n          let box_width = (p.width - grid_w_padding * 2) / 10;\n          let box_height = (p.height - grid_h_padding * 2) / 10;\n\n          if (p.mouseX > xPos - box_width / 2 && p.mouseX < xPos + box_width / 2 && p.mouseY > yPos - box_height / 2 && p.mouseY < yPos + box_height / 2) {\n            p.fill(255, 100);\n          } else {\n            p.fill(255, 0);\n          }\n\n          p.rect(xPos, yPos, box_width, box_height);\n          p.fill(255);\n          p.text(attack + \"/\" + defense, xPos, yPos - 10);\n        }\n      }\n    } else {\n      p.textSize(40);\n      p.fill(255);\n      p.text(the_mouse.effect.label_name + \"...\", p.width / 2, p.height * 0.1);\n      p.textSize(font_pixels);\n      p.rectMode(p.CENTER);\n      let option_button_width = p.width / options.length * 0.5;\n      let option_button_height = p.height * 0.10;\n      let option_buttons_padding = p.width * 0.25;\n\n      for (let [index, option] of options.entries()) {\n        let xPos = p.map(index, 0, options.length - 1, option_buttons_padding, p.width - option_buttons_padding);\n\n        if (p.mouseX > xPos - option_button_width / 2 && p.mouseX < xPos + option_button_width / 2) {\n          p.fill(255, 100);\n          hovered_option = index;\n        } else {\n          p.fill(255, 50);\n        }\n\n        p.rect(xPos, p.height * 0.5, option_button_width, option_button_height, 16);\n        p.fill(255);\n        let option_string = option.toString();\n        option_string = option_string[0].toUpperCase() + option_string.substring(1);\n        option_string = option_string.split(\" \").join(\"\\n\");\n        p.text(option_string, xPos, p.height / 2);\n      }\n    }\n\n    p.pop();\n  };\n\n  p.mouse_pressed_while_surveying = () => {\n    if (p.progress_survey_through_issues()) {\n      return;\n    }\n\n    let setting = the_mouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (options[0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (options[0] == \"k\") {\n      options = keywords;\n    } else if (options[0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      setting[1] = `${p.floor(p.map(p.mouseX, 0, p.width, 1, 11))}/${p.floor(p.map(p.mouseY, 0, p.height, 1, 11))}`;\n    } else {\n      setting[1] = options[hovered_option];\n    }\n\n    current_survey_topic++;\n\n    if (p.progress_survey_through_issues()) {\n      return;\n    }\n  };\n\n  p.mouse_pressed_while_not_surveying = () => {\n    let clicked_card = null;\n\n    if (current_task_index < task_details.length) {\n      for (let c of tasks[current_task_index]) {\n        if (c.mouseInImg()) {\n          clicked_card = c;\n        }\n      }\n    }\n\n    if (clicked_card) {\n      if (the_mouse.busy) {\n        //dropping effect onto a card\n        p.drop_effect_on_card(clicked_card);\n      } else {\n        //clicking on a card generally\n        p.click_to_edit_card(clicked_card);\n      }\n    } else {\n      if (the_mouse.busy) {\n        //clicked away to drop label\n        the_mouse.busy = false;\n        the_mouse.setOffset(0, 0);\n        the_mouse.effect = null;\n      } else {\n        //other clicks\n        if (mouse_over_next && current_task_index < task_details.length) {\n          current_task_index++;\n        } else if (mouse_over_prev && current_task_index > 0) {\n          current_task_index--;\n        }\n\n        if (mouse_over_queuer && current_task_index == task_details.length && !sending) {\n          p.submit();\n        }\n\n        p.mouse_click_while_editing();\n\n        for (let b of buttons) {\n          //clicking on a button with an empty hand\n          if (b.mouseInRegion()) {\n            the_mouse.busy = true;\n            the_mouse.setOffset(b.text_x, b.text_y);\n            the_mouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n            break;\n          }\n        }\n      }\n    }\n  }; //returns true if you need to return out of mouse\n\n\n  p.progress_survey_through_issues = () => {\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    for (let i = 0; i < survey_topics.length; i++) {\n      if (the_mouse.effect.settings[survey_topics[current_survey_topic]][0] == null || !param_format_names.includes(the_mouse.effect.settings[survey_topics[current_survey_topic]][0][0]) && the_mouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1) {\n        current_survey_topic++;\n\n        if (current_survey_topic == survey_topics.length) {\n          p.finished_survey();\n          return true;\n        }\n      }\n    }\n\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    return false;\n  };\n\n  p.drop_effect_on_card = c => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if (p.progress_survey_through_issues()) {\n      return;\n    }\n  };\n\n  p.click_to_edit_card = c => {\n    if (c.mouse_over_mana) {\n      editing = \"mana\";\n      editing_card = c;\n    } else if (c.mouse_over_power) {\n      editing = \"power\";\n      editing_card = c;\n    } else if (c.mouse_over_toughness && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"toughness\";\n      editing_card = c;\n    } else if (c.mouse_over_card_effect && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"effect\";\n      editX = c.hovered_effect.x + blank_spell_img.width / 2;\n      editY = c.hovered_effect.y + c.hovered_effect.effect_string_height / 2;\n      editing_card = c;\n      effect_to_remove = c.hovered_effect;\n    } else if (editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10) {\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n      editing = \"none\";\n    }\n  };\n\n  p.mouse_click_while_editing = () => {\n    if (editing == \"mana\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY - 50) < 40) {\n        editing_card.mana--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY - 50) < 40) {\n        editing_card.mana++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.mana = p.constrain(editing_card.mana, 0, 10);\n    } else if (editing == \"power\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.power--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.power++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.power = p.constrain(editing_card.power, 0, 10);\n    } else if (editing == \"toughness\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.toughness--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.toughness++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.toughness = p.constrain(editing_card.toughness, 1, 10);\n    } else if (editing == \"effect\") {\n      editing = \"none\";\n    }\n  };\n\n  p.draw_edit_overlay = () => {\n    p.push();\n\n    if (editing != \"none\") {\n      p.translate(editX, editY);\n      p.noStroke();\n\n      if (editing == \"effect\") {\n        p.rotate(p.QUARTER_PI);\n        p.fill(0);\n        p.rect(0, 0, 22, 6);\n        p.rect(0, 0, 6, 22);\n        p.fill(255);\n        p.rect(0, 0, 20, 4);\n        p.rect(0, 0, 4, 20);\n      } else {\n        p.fill(0);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 8, 32);\n        p.fill(255);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 6, 30);\n      }\n    }\n\n    p.pop();\n  };\n\n  p.mousePressed = () => {\n    if (setup_done) {\n      if (survey_topics[current_survey_topic] != \"none\") {\n        p.mouse_pressed_while_surveying();\n      } else {\n        p.mouse_pressed_while_not_surveying();\n      }\n    }\n  };\n\n  p.finished_survey = () => {\n    survey_drop_target.effects.push(JSON.parse(JSON.stringify(the_mouse.effect)));\n    current_survey_topic = 0;\n    the_mouse.effect = null;\n    the_mouse.busy = false;\n  };\n\n  p.keyPressed = () => {};\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    p.resize_all();\n  };\n\n  p.ease_out_cubic = x => {\n    return 1 - p.pow(1 - x, 3);\n  };\n\n  p.send_overlay = () => {\n    p.push();\n    let queur_x = p.width - w_padding;\n    let queur_y = p.height - h_padding;\n    mouse_over_queuer = p.mouseX > queur_x - 100 && p.mouseX < queur_x + 100 && p.mouseY > queur_y - 30 && p.mouseY < queur_y + 30;\n    p.translate(queur_x, queur_y);\n\n    if (sending) {\n      let q = p.map(p.millis(), send_start_time, send_start_time + estimated_send_duration, 0, 1, true);\n      q = p.ease_out_cubic(q);\n      p.fill(255, p.map(q, 0, 1, 50, 100));\n      p.rect(p.map(q, 0, 1, -100, 0), 0, p.map(q, 0, 1, 0, 200), 60, 4);\n      p.rect(0, 0, 200, 60, 4);\n    } else {\n      p.fill(255, mouse_over_queuer ? 255 : 100);\n      p.rect(0, 0, 200, 60, 4);\n    }\n\n    p.fill(0, 255);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.text(sending ? sent ? \"Sending again...\" : \"Sending...\" : sent ? mouse_over_queuer ? \"Send again\" : \"Done.\" : \"Send to sheets\", 0, -4);\n    p.pop();\n  };\n\n  p.submit = () => {\n    if (!sending) {\n      sending = true;\n      send_start_time = p.millis();\n      const submissions = p.generate_submissions();\n      props.send_to_google_sheets(submissions).then(result => {\n        console.log(result);\n        sending = false;\n        sent = true;\n      });\n    }\n  }; // p.load_save = () => {\n  //   props.load_from_google_sheets().then((result) => {\n  //     console.log(result);\n  //     tasks = JSON.parse(\"\");\n  //     for(let t of tasks){\n  //       for(let c of t){\n  //         c.__proto__ = p.Card.prototype;\n  //       }\n  //     }\n  // })\n  // }\n\n\n  p.make_save = () => {\n    let asString = JSON.stringify(tasks);\n    props.save_to_google_sheets([user, asString]).then(result => {\n      console.log(result);\n    });\n  };\n\n  p.generate_submissions = () => {\n    const submissions = [];\n    p.make_save();\n\n    for (let t of tasks) {\n      for (let c of t) {\n        let card_submission = {\n          id: c.card_id,\n          task: c.card_task_index,\n          user: user,\n          p: c.power,\n          t: c.toughness,\n          m: c.mana\n        };\n        let repeat_checker = {};\n\n        for (let e of c.effects) {\n          if (repeat_checker[e.effect_short] == undefined) {\n            repeat_checker[e.effect_short] = 0;\n          } else {\n            repeat_checker[e.effect_short]++;\n          }\n\n          if (e.settings.methods[0] != null) card_submission[e.effect_short + \"-method-\" + repeat_checker[e.effect_short]] = e.settings.methods[1];\n          if (e.settings.params[0] != null) card_submission[e.effect_short + \"-param-\" + repeat_checker[e.effect_short]] = e.settings.params[1];\n          if (e.settings.targets[0] != null) card_submission[e.effect_short + \"-target-\" + repeat_checker[e.effect_short]] = e.settings.targets[1];\n          if (e.settings.filters[0] != null) card_submission[e.effect_short + \"-filter-\" + repeat_checker[e.effect_short]] = e.settings.filters[1];\n          if (e.settings.duration[0] != null) card_submission[e.effect_short + \"-duration-\" + repeat_checker[e.effect_short]] = e.settings.duration[1];\n        }\n\n        submissions[c.card_task_index + \"-\" + c.card_id] = card_submission;\n      }\n    }\n\n    return submissions;\n  };\n\n  p.resize_all = () => {\n    for (let b of buttons) {\n      b.resized();\n    }\n\n    for (let t of tasks) {\n      for (let c of t) {\n        c.resized();\n      }\n    }\n\n    p.generate_masks();\n  };\n\n  p.generate_masks = () => {\n    ellipse_mask = p.createGraphics(250, 250);\n    ellipse_mask.ellipse(ellipse_mask.width / 2, ellipse_mask.height / 2, 200, 200);\n    rect_mask = p.createGraphics(250, 250);\n    rect_mask.rectMode(p.CENTER);\n    rect_mask.rect(rect_mask.width / 2, rect_mask.height / 2, 200, 160);\n  };\n\n  p.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n    effects[effect_text] = new p.Effect(effect_text, effect_short, method, param, targets, filters, duration);\n    buttons.push(new p.Button(effect_text, button_id++));\n  };\n\n  p.register_all = () => {\n    p.register_effect(\"Deal damage\", \"dam\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Destroy\", \"des\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Heal\", \"hea\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Gain armour\", \"arm\", null, [\"x\"], null, null, null);\n    p.register_effect(\"Change stats\", \"cha\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Set stats\", \"set\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Give keyword\", \"giv\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"k\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Return to hand\", \"ret\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Draw\", \"dra\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Gain mana\", \"gai\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Summon\", \"sum\", null, [\"x/x\"], null, null, null);\n    p.register_effect(\"Keyword\", \"key\", null, [\"k\"], null, null, null);\n    p.register_effect(\"Creature type\", \"cre\", null, [\"c\"], null, null, null);\n  };\n\n  p.FancyMouse = class {\n    constuctor() {\n      this.busy = false;\n      this.xOffset = 0;\n      this.yOffset = 0;\n      this.effect = null;\n    }\n\n    setOffset(buttonX, buttonY) {\n      this.xOffset = p.mouseX - buttonX;\n      this.yOffset = p.mouseY - buttonY;\n    }\n\n  };\n  p.Effect = class {\n    constructor(label_name, effect_short, methods, param_format, targets, filters, duration) {\n      this.x = 0;\n      this.y = 0;\n      this.effect_string = \"\";\n      this.effect_string_height = 0;\n      this.effect_string_width = blank_spell_img.width * 0.5;\n      this.label_name = label_name;\n      this.effect_short = effect_short;\n      this.settings = {\n        methods: [methods, \"\"],\n        params: [param_format, \"\"],\n        targets: [targets, \"\"],\n        filters: [filters, \"\"],\n        duration: [duration, \"\"]\n      };\n    }\n\n  };\n  p.Card = class {\n    constructor(card_id, card_task_index, card_class) {\n      this.y = 0;\n      this.x = 0;\n      this.w = blank_spell_img.width * 0.75;\n      this.h = blank_spell_img.height * 0.75;\n      this.oversized = false;\n      this.class = card_class;\n      this.type_id = 1; //creature\n\n      this.card_id = card_id;\n      this.card_task_index = card_task_index;\n      this.flav_img_index = p.floor(p.random(gan_imgs.length));\n      this.mana = 5;\n      this.power = 5;\n      this.toughness = 5;\n      this.effects = [];\n      this.hovered_effect = null;\n      this.mouse_over_card_effect = false;\n      this.mouse_over_mana = false;\n      this.mouse_over_power = false;\n      this.mouse_over_toughness = false;\n    }\n\n    resized() {\n      if (tasks[this.card_task_index].length == 1) {\n        this.x = p.map(2, 0, 3, w_padding, p.width - w_padding);\n      } else if (tasks[this.card_task_index].length == 2) {\n        this.x = p.map(this.card_id == 0 ? 1.5 : 2.5, 0, 3, w_padding, p.width - w_padding);\n      } else {\n        this.x = p.map(this.card_id + 1, 0, 3, w_padding, p.width - w_padding);\n      }\n\n      this.y = p.height / 2;\n    }\n\n    run() {\n      this.generate_effect_text();\n      this.check_mouse_hovers();\n      this.display();\n    }\n\n    generate_effect_text() {\n      for (let e of this.effects) {\n        e.effect_string = \"\";\n\n        if (e.label_name == \"Keyword\" || e.label_name == \"Creature type\") {\n          e.effect_string = e.settings.params[1];\n        } else if (e.label_name == \"Deal damage\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n          } else {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \";\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1];\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n          }\n        } else if (e.label_name == \"Destroy\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly destroy a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Destroy a target \";\n          } else {\n            e.effect_string = \"Destroy all \";\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1];\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n          }\n        } else if (e.label_name == \"Heal\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n          } else {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1];\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n          }\n        } else {\n          e.effect_string = e.label_name;\n        }\n\n        let estimated_characters_per_line = 20;\n        let estimated_lines = e.effect_string.length / estimated_characters_per_line;\n        e.effect_string_height = font_pixels_small * estimated_lines + 30;\n      }\n    }\n\n    display() {\n      p.push();\n      p.fill(0);\n      p.textAlign(p.CENTER, p.CENTER);\n\n      if (this.effects.length > 2) {\n        this.oversized = true;\n      } else {\n        this.oversized = false;\n      }\n\n      let flav = gan_imgs[this.flav_img_index].get();\n      let forg;\n\n      if (card_types[this.type_id] == \"spell\") {\n        flav.mask(rect_mask);\n        forg = blank_spell_img;\n      } else if (card_types[this.type_id] == \"minion\") {\n        flav.mask(ellipse_mask);\n        forg = this.oversized ? full_blank_creature_img : blank_creature_img;\n      } else {\n        flav.mask(rect_mask);\n        forg = blank_weapon_img;\n      }\n\n      if (!this.oversized) {\n        p.image(flav, this.x, this.y - 90, 250, 250);\n      }\n\n      p.image(forg, this.x, this.y, this.w, this.h);\n      p.push();\n      p.textSize(60);\n      p.fill(255);\n      p.strokeWeight(3);\n      p.stroke(0);\n\n      if (card_types[this.type_id] == \"minion\") {\n        p.text(this.power, this.x - this.w / 2.99, this.y + this.h / 2.8);\n        p.text(this.toughness, this.x + this.w / 2.6, this.y + this.h / 2.8);\n      }\n\n      p.text(this.mana, this.x - this.w / 2.99, this.y - this.h / 2.3);\n      p.pop();\n      p.push();\n      p.fill(0);\n      p.textSize(font_pixels_small);\n      let translation_offset_y;\n\n      if (this.oversized) {\n        translation_offset_y = this.y - this.h / 2 + 80;\n        p.translate(this.x, this.y - this.h / 2 + 80);\n      } else {\n        translation_offset_y = this.y + 50;\n        p.translate(this.x, this.y + 50);\n      }\n\n      this.mouse_over_card_effect = false;\n      this.hovered_effect = null;\n\n      for (let e of this.effects) {\n        translation_offset_y += e.effect_string_height / 2;\n        p.translate(0, e.effect_string_height / 2);\n\n        if (p.mouseY > translation_offset_y - e.effect_string_height / 2 && p.mouseY < translation_offset_y + e.effect_string_height / 2 && p.mouseX > this.x - e.effect_string_width / 2 && p.mouseX < this.x + e.effect_string_width / 2) {\n          this.mouse_over_card_effect = true;\n          this.hovered_effect = e;\n          this.hovered_effect.x = this.x - e.effect_string_width / 2;\n          this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n          p.fill(0, 100);\n        } else {\n          p.fill(0, 50);\n        }\n\n        p.rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4);\n        p.fill(255, 255);\n        p.text(e.effect_string, 0, 0, blank_spell_img.width / 2, blank_spell_img.height / 2);\n        translation_offset_y += e.effect_string_height / 2 + 5;\n        p.translate(0, e.effect_string_height / 2 + 5);\n      }\n\n      p.pop();\n      p.push();\n\n      if (editing_card == this) {\n        if (editing == \"mana\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y - this.h / 2.3;\n        } else if (editing == \"power\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y + this.h / 2.8;\n        } else if (editing == \"toughness\") {\n          editX = this.x + this.w / 2.6;\n          editY = this.y + this.h / 2.8;\n        }\n      }\n\n      p.pop();\n      p.pop();\n    }\n\n    mouseInImg() {\n      return p.mouseX > this.x - this.w / 2 - mouse_padding && p.mouseX < this.x + this.w / 2 + mouse_padding && p.mouseY > this.y - this.h / 2 - mouse_padding && p.mouseY < this.y + this.h / 2 + mouse_padding;\n    }\n\n    check_mouse_hovers() {\n      if (card_types[this.type_id] == \"minion\") {\n        this.mouse_over_power = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y + this.h / 2.8) < 50;\n        this.mouse_over_toughness = p.dist(p.mouseX, p.mouseY, this.x + this.w / 2.6, this.y + this.h / 2.8) < 50;\n      }\n\n      this.mouse_over_mana = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y - this.h / 2.3) < 50;\n    }\n\n  };\n  p.Button = class {\n    constructor(button_name, button_id) {\n      this.button_name = button_name;\n      this.button_id = button_id;\n      this.x = 0;\n      this.y = 0;\n      this.w = p.textWidth(button_name) + 14;\n      this.h = font_pixels + 10;\n      this.fillAlpha = 100;\n      this.text_x = 0;\n      this.text_y = 0;\n    }\n\n    mouseInRegion() {\n      return p.mouseX > this.x - this.w / 2 - mouse_padding && p.mouseX < this.x + this.w / 2 + mouse_padding && p.mouseY > this.y - this.h / 2 - mouse_padding && p.mouseY < this.y + this.h / 2 + mouse_padding;\n    }\n\n    resized() {\n      this.x = w_padding - 150 + this.w / 2 - 7;\n      this.y = p.map(this.button_id, 0, buttons.length, h_padding, p.height - h_padding);\n      this.text_x = this.x - this.w / 2 + 7;\n      this.text_y = this.y - 6;\n    }\n\n    run() {\n      this.update();\n      this.display();\n    }\n\n    update() {\n      if (this.mouseInRegion() && current_survey_topic == 0) {\n        this.fillAlpha = 255;\n      } else {\n        this.fillAlpha = 100;\n      }\n    }\n\n    display() {\n      p.textSize(font_pixels);\n      p.textAlign(p.LEFT, p.CENTER);\n      p.fill(255, this.fillAlpha);\n      p.rect(this.x, this.y, this.w, this.h, 4, 4);\n      p.fill(0, 255);\n      p.text(this.button_name, this.text_x, this.text_y);\n    }\n\n  };\n\n  document.oncontextmenu = function () {\n    return false;\n  };\n}","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/src/code/sketch.js"],"names":["sketch","p","buttons","button_id","effects","current_task_index","task_details","id","title","instruction","num_cards","class","user","tasks","card_types","method_names","target_names","target_names_singular","filter_names","duration_names","param_format_names","effect_names","keywords","all_creature_types","creature_types","survey_topics","current_survey_topic","survey_drop_target","font_pixels_large","font_pixels","font_pixels_small","hearthstone_font","mouse_padding","w_padding","h_padding","grid_w_padding","grid_h_padding","rect_mask","ellipse_mask","blank_spell_img","blank_creature_img","blank_weapon_img","full_blank_creature_img","bg","gan_imgs","the_mouse","setup_done","hovered_option","editing","editing_card","effect_to_remove","editX","editY","sending","send_start_time","estimated_send_duration","sent","mouse_over_queuer","mouse_over_next","mouse_over_prev","props","myCustomRedrawAccordingToNewPropsHandler","_props","preload","loadImage","bg_img","spell_img","weapon_img","creature_img","loadFont","hs_font","im","push","setup","createCanvas","windowWidth","windowHeight","getURLParams","console","log","load_from_google_sheets","then","result","data","r","values","FancyMouse","height","width","imageMode","CENTER","rectMode","textFont","textSize","fill","noStroke","register_all","task","card_id","Card","resize_all","draw","background","textAlign","LEFT","image","length","c","run","b","busy","translate","mouseX","xOffset","mouseY","yOffset","text","effect","label_name","pop","draw_edit_overlay","draw_task_controls","send_overlay","draw_task_overlay","draw_survey","next_x","next_y","dist","triangle","prev_x","map","RIGHT","setting","settings","options","attack","defense","xPos","yPos","box_width","box_height","rect","option_button_width","option_button_height","option_buttons_padding","index","option","entries","option_string","toString","toUpperCase","substring","split","join","mouse_pressed_while_surveying","progress_survey_through_issues","floor","mouse_pressed_while_not_surveying","clicked_card","mouseInImg","drop_effect_on_card","click_to_edit_card","setOffset","submit","mouse_click_while_editing","mouseInRegion","text_x","text_y","JSON","parse","stringify","button_name","finished_survey","i","includes","mouse_over_mana","mouse_over_power","mouse_over_toughness","mouse_over_card_effect","hovered_effect","x","y","effect_string_height","splice","indexOf","mana","constrain","power","toughness","rotate","QUARTER_PI","mousePressed","keyPressed","windowResized","resizeCanvas","ease_out_cubic","pow","queur_x","queur_y","q","millis","submissions","generate_submissions","send_to_google_sheets","make_save","asString","save_to_google_sheets","t","card_submission","card_task_index","m","repeat_checker","e","effect_short","undefined","methods","params","targets","filters","duration","resized","generate_masks","createGraphics","ellipse","register_effect","effect_text","method","param","Effect","Button","constuctor","buttonX","buttonY","constructor","param_format","effect_string","effect_string_width","card_class","w","h","oversized","type_id","flav_img_index","random","generate_effect_text","check_mouse_hovers","display","estimated_characters_per_line","estimated_lines","flav","get","forg","mask","strokeWeight","stroke","translation_offset_y","textWidth","fillAlpha","update","document","oncontextmenu"],"mappings":"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","sourcesContent":["/* eslint eqeqeq: \"off\", no-unused-vars: \"off\" */\n\n\n//to fix totalHeight bug, change p5 by changing o-totalHeight to just o\n//todo: fix this on a generic p5 import somehow\n\n\n//todo: language stuff\n//todo: buttons\n//todo: creature types\n//todo: card types\n//todo: effect limit\n//ABC test reports, articulate logic for report design\n\n//make rampiness, variety, controllynes and see when they would be useful\n\nexport default function sketch(p) {\n\n\n  const buttons = [];\n  let button_id = 0;\n\n  const effects = [];\n\n\n  let current_task_index = 0;\n  const task_details = [{\n    id: 0,\n    title: \"Mage vs Warrior\",\n    instruction: \"Create 2 mage cards that helps against warriors.\",\n    num_cards: 2,\n    class: \"mage\"\n  },\n  {\n    id: 1,\n    title: \"Murlocs\",\n    instruction: \"Create 3 murlocs\",\n    num_cards: 3,\n    class: \"shaman\"\n  },\n  {\n    id: 2,\n    title: \"The ultimate defense\",\n    instruction: \"Create the ultimate defensive card.\",\n    num_cards: 1,\n    class: \"warrior\"\n  }\n  ]\n\n\n\n  let user = \"\"\n\n  let tasks = [];\n  const card_types = [\"spell\", \"minion\", \"weapon\"]\n\n  const method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\n  const target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\n  const target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"]\n  const filter_names = [\"enemy\", \"friendly\", \"all\"];\n  const duration_names = [\"turn\", \"permanently\"];\n  const param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\n  const effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"]\n  const keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"]\n  const all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"]\n  const creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"]\n\n  const survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\n  let current_survey_topic = 0;\n\n  let survey_drop_target = null;\n\n  const font_pixels_large = 32;\n  const font_pixels = 24;\n  const font_pixels_small = 20;\n\n  let hearthstone_font;\n  const mouse_padding = 1;\n  let w_padding, h_padding;\n  let grid_w_padding, grid_h_padding;\n\n  let rect_mask, ellipse_mask;\n  let blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\n  let bg;\n  let gan_imgs = [];\n\n\n  let the_mouse;\n  let setup_done = false;\n  let hovered_option = -1;\n\n  let editing = \"none\";\n  let editing_card = null;\n  let effect_to_remove = null;\n  let editX = 0;\n  let editY = 0;\n\n  let sending = false;\n  let send_start_time = -10000;\n  const estimated_send_duration = 3000; //over-estimate\n  let sent = false;\n\n  let mouse_over_queuer;\n  let mouse_over_next;\n  let mouse_over_prev;\n\n\n  let props;\n\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (_props) => {\n    props = _props;\n  }\n\n  p.preload = () => {\n    bg = p.loadImage(props.bg_img)\n    blank_spell_img = p.loadImage(props.spell_img);\n    blank_weapon_img = p.loadImage(props.weapon_img)\n    blank_creature_img = p.loadImage(props.creature_img)\n    full_blank_creature_img = p.loadImage(props.full_blank_creature_img);\n    hearthstone_font = p.loadFont(props.hs_font);\n    for (let im of props.gan_imgs) {\n      gan_imgs.push(p.loadImage(im))\n    }\n  }\n\n\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    user = p.getURLParams().user ?? 2;\n\n    console.log(\"loading\")\n    props.load_from_google_sheets().then((result) => {\n      console.log(result.data.r.data.values);\n    });\n\n    the_mouse = new p.FancyMouse();\n\n\n    h_padding = p.height * 0.1;\n    w_padding = p.width * 0.2;\n    grid_h_padding = p.height * 0.2;\n    grid_w_padding = p.width * 0.1;\n    p.imageMode(p.CENTER)\n    p.rectMode(p.CENTER);\n    p.textFont(hearthstone_font);\n    p.textSize(font_pixels);\n    p.fill(255);\n    p.noStroke();\n\n    p.register_all();\n\n\n    for (let task of task_details) {\n      tasks[task.id] = [];\n      for (let card_id = 0; card_id < task.num_cards; card_id++) {\n        tasks[task.id].push(new p.Card(card_id, task.id, task.class));\n      }\n    }\n\n\n    p.resize_all();\n\n\n\n\n    setup_done = true;\n\n  }\n\n\n  p.draw = () => {\n    p.background(255)\n    p.textAlign(p.LEFT, p.CENTER);\n    p.image(bg, p.width / 2, p.height / 2, p.width, p.height);\n\n\n    if (current_task_index < task_details.length) {\n      for (let c of tasks[current_task_index]) {\n        c.run();\n      }\n    }\n\n    for (let b of buttons) {\n      b.run();\n    }\n\n    if (the_mouse.busy && current_survey_topic == 0) {\n      p.push();\n      p.translate(p.mouseX - the_mouse.xOffset, p.mouseY - the_mouse.yOffset)\n      p.textSize(28)\n      p.text(the_mouse.effect.label_name, 0, 0)\n      p.pop();\n    }\n\n    p.draw_edit_overlay();\n    p.draw_task_controls();\n\n\n    if (current_task_index == task_details.length) {\n      p.send_overlay();\n    } else {\n      p.draw_task_overlay();\n\n    }\n\n\n    if (survey_topics[current_survey_topic] != \"none\") {\n      p.draw_survey();\n    }\n\n  }\n\n  p.draw_task_controls = () => {\n\n\n    let next_x = p.width - w_padding;\n    let next_y = p.height - h_padding;\n    mouse_over_next = p.dist(p.mouseX, p.mouseY, next_x, next_y) < 75;\n\n    p.push();\n    p.translate(next_x, next_y)\n    p.fill(255, current_task_index == task_details.length ? 0 : mouse_over_next ? 255 : 100)\n    p.triangle(0, -25, 0, 25, 75, 0);\n    p.pop();\n\n    let prev_x = p.map(1, 0, 3, w_padding, p.width - w_padding)\n    mouse_over_prev = p.dist(p.mouseX, p.mouseY, prev_x, next_y) < 75;\n\n    p.push();\n    p.translate(prev_x, next_y)\n    p.fill(255, current_task_index == 0 ? 50 : mouse_over_prev ? 255 : 100)\n    p.triangle(0, -25, 0, 25, -75, 0);\n    p.pop();\n\n  }\n\n  p.draw_task_overlay = () => {\n    p.textAlign(p.RIGHT, p.CENTER)\n    p.textSize(font_pixels_large);\n    p.text(task_details[current_task_index].title, p.width - w_padding / 2, h_padding)\n\n    p.textSize(font_pixels);\n    p.text(task_details[current_task_index].instruction, p.width - w_padding / 2, h_padding + font_pixels_large)\n\n\n    p.fill(0);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.text(`Task ${current_task_index + 1} \\\\ ${task_details.length}`, p.map(2, 0, 3, w_padding, p.width - w_padding), p.height - h_padding)\n  }\n\n\n\n  p.draw_survey = () => {\n    p.push();\n    p.textAlign(p.CENTER, p.CENTER)\n    p.textSize(font_pixels)\n\n    p.rectMode(p.CENTER)\n    p.background(0, 100)\n\n    let setting = the_mouse.effect.settings[survey_topics[current_survey_topic]]\n    let options = setting[0]\n\n\n    if (setting[0][0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (setting[0][0] == \"k\") {\n      options = keywords\n    } else if (setting[0][0] == \"c\") {\n      options = creature_types;\n    }\n\n\n    if (options[0] == \"x/x\") {\n      for (let attack = 1; attack < 11; attack++) {\n        for (let defense = 1; defense < 11; defense++) {\n          let xPos = p.map(attack, 1, 10, grid_w_padding, p.width - grid_w_padding);\n          let yPos = p.map(defense, 1, 10, grid_h_padding, p.height - grid_h_padding);\n          let box_width = (p.width - grid_w_padding * 2) / 10;\n          let box_height = (p.height - grid_h_padding * 2) / 10;\n\n          if (p.mouseX > xPos - box_width / 2 && p.mouseX < xPos + box_width / 2 &&\n            p.mouseY > yPos - box_height / 2 && p.mouseY < yPos + box_height / 2) {\n            p.fill(255, 100);\n          } else {\n            p.fill(255, 0);\n          }\n          p.rect(xPos, yPos, box_width, box_height);\n          p.fill(255);\n          p.text(attack + \"/\" + defense, xPos, yPos - 10)\n        }\n      }\n    } else {\n\n\n      p.textSize(40);\n      p.fill(255)\n      p.text(the_mouse.effect.label_name + \"...\", p.width / 2, p.height * 0.1);\n\n      p.textSize(font_pixels)\n      p.rectMode(p.CENTER)\n\n      let option_button_width = (p.width / options.length) * 0.5;\n      let option_button_height = p.height * 0.10;\n      let option_buttons_padding = p.width * 0.25;\n\n      for (let [index, option] of options.entries()) {\n        let xPos = p.map(index, 0, options.length - 1, option_buttons_padding, p.width - option_buttons_padding);\n        if (p.mouseX > xPos - option_button_width / 2 && p.mouseX < xPos + option_button_width / 2) {\n          p.fill(255, 100)\n          hovered_option = index;\n        } else {\n          p.fill(255, 50)\n        }\n        p.rect(xPos, p.height * 0.5, option_button_width, option_button_height, 16);\n        p.fill(255);\n\n        let option_string = option.toString();\n        option_string = option_string[0].toUpperCase() + option_string.substring(1)\n        option_string = option_string.split(\" \").join(\"\\n\");\n\n        p.text(option_string, xPos, p.height / 2)\n      }\n    }\n\n    p.pop();\n  }\n\n\n  p.mouse_pressed_while_surveying = () => {\n    if (p.progress_survey_through_issues()) {\n      return\n    }\n\n\n    let setting = the_mouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0]\n    if (options[0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    } else if (options[0] == \"k\") {\n      options = keywords;\n    } else if (options[0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      setting[1] = `${p.floor(p.map(p.mouseX, 0, p.width, 1, 11))}/${p.floor(p.map(p.mouseY, 0, p.height, 1, 11))}`\n    } else {\n      setting[1] = options[hovered_option]\n    }\n\n\n\n    current_survey_topic++;\n\n    if (p.progress_survey_through_issues()) {\n      return\n    }\n\n  }\n\n\n  p.mouse_pressed_while_not_surveying = () => {\n    let clicked_card = null;\n\n    if (current_task_index < task_details.length) {\n      for (let c of tasks[current_task_index]) {\n        if (c.mouseInImg()) {\n          clicked_card = c;\n        }\n      }\n    }\n\n\n    if (clicked_card) {\n      if (the_mouse.busy) { //dropping effect onto a card\n        p.drop_effect_on_card(clicked_card)\n      } else { //clicking on a card generally\n        p.click_to_edit_card(clicked_card)\n      }\n    } else {\n      if (the_mouse.busy) { //clicked away to drop label\n        the_mouse.busy = false;\n        the_mouse.setOffset(0, 0);\n        the_mouse.effect = null;\n      } else { //other clicks\n\n\n        if (mouse_over_next && current_task_index < task_details.length) {\n          current_task_index++;\n        } else if (mouse_over_prev && current_task_index > 0) {\n          current_task_index--;\n        }\n\n        if (mouse_over_queuer && current_task_index == task_details.length && !sending) {\n          p.submit();\n        }\n\n        p.mouse_click_while_editing();\n\n\n        for (let b of buttons) { //clicking on a button with an empty hand\n          if (b.mouseInRegion()) {\n            the_mouse.busy = true;\n            the_mouse.setOffset(b.text_x, b.text_y);\n            the_mouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n\n            break;\n          }\n        }\n      }\n    }\n\n  }\n\n\n\n  //returns true if you need to return out of mouse\n  p.progress_survey_through_issues = () => {\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    for (let i = 0; i < survey_topics.length; i++) {\n      if (the_mouse.effect.settings[survey_topics[current_survey_topic]][0] == null ||\n        (!param_format_names.includes(the_mouse.effect.settings[survey_topics[current_survey_topic]][0][0]) &&\n          the_mouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1)) {\n        current_survey_topic++;\n        if (current_survey_topic == survey_topics.length) {\n          p.finished_survey();\n          return true;\n        }\n      }\n    }\n\n\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n\n    return false;\n  }\n\n  p.drop_effect_on_card = (c) => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if (p.progress_survey_through_issues()) {\n\n      return\n    }\n  }\n\n\n  p.click_to_edit_card = (c) => {\n\n    if (c.mouse_over_mana) {\n      editing = \"mana\";\n      editing_card = c;\n    } else if (c.mouse_over_power) {\n      editing = \"power\";\n      editing_card = c;\n    } else if (c.mouse_over_toughness && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"toughness\";\n      editing_card = c;\n    } else if (c.mouse_over_card_effect && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"effect\";\n      editX = c.hovered_effect.x + blank_spell_img.width / 2;\n      editY = c.hovered_effect.y + c.hovered_effect.effect_string_height / 2;\n      editing_card = c;\n      effect_to_remove = c.hovered_effect;\n    } else if (editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10) {\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n      editing = \"none\";\n    }\n  }\n\n\n  p.mouse_click_while_editing = () => {\n    if (editing == \"mana\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY - 50) < 40) {\n        editing_card.mana--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY - 50) < 40) {\n        editing_card.mana++;\n      } else {\n        editing = \"none\"\n      }\n      editing_card.mana = p.constrain(editing_card.mana, 0, 10)\n    } else if (editing == \"power\") {\n\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.power--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.power++;\n      } else {\n        editing = \"none\"\n      }\n      editing_card.power = p.constrain(editing_card.power, 0, 10)\n    } else if (editing == \"toughness\") {\n\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.toughness--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.toughness++;\n      } else {\n        editing = \"none\"\n      }\n      editing_card.toughness = p.constrain(editing_card.toughness, 1, 10)\n    } else if (editing == \"effect\") {\n      editing = \"none\";\n    }\n  }\n\n\n  p.draw_edit_overlay = () => {\n    p.push();\n    if (editing != \"none\") {\n      p.translate(editX, editY)\n      p.noStroke();\n      if (editing == \"effect\") {\n        p.rotate(p.QUARTER_PI);\n        p.fill(0);\n        p.rect(0, 0, 22, 6);\n        p.rect(0, 0, 6, 22);\n        p.fill(255);\n        p.rect(0, 0, 20, 4);\n        p.rect(0, 0, 4, 20);\n\n      } else {\n        p.fill(0);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 8, 32);\n        p.fill(255);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 6, 30);\n      }\n    }\n    p.pop();\n  }\n\n  p.mousePressed = () => {\n    if (setup_done) {\n      if (survey_topics[current_survey_topic] != \"none\") {\n        p.mouse_pressed_while_surveying();\n      } else {\n        p.mouse_pressed_while_not_surveying();\n      }\n    }\n  }\n\n  p.finished_survey = () => {\n\n    survey_drop_target.effects.push(JSON.parse(JSON.stringify(the_mouse.effect)))\n    current_survey_topic = 0;\n    the_mouse.effect = null;\n    the_mouse.busy = false;\n  }\n\n  p.keyPressed = () => {\n\n\n  }\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    p.resize_all();\n  }\n\n  p.ease_out_cubic = (x) => {\n    return 1 - p.pow(1 - x, 3);\n  }\n\n\n  p.send_overlay = () => {\n    p.push();\n    let queur_x = p.width - w_padding;\n    let queur_y = p.height - h_padding;\n    mouse_over_queuer = (p.mouseX > queur_x - 100 && p.mouseX < queur_x + 100 && p.mouseY > queur_y - 30 && p.mouseY < queur_y + 30)\n\n    p.translate(queur_x, queur_y);\n\n    if (sending) {\n      let q = p.map(p.millis(), send_start_time, send_start_time + estimated_send_duration, 0, 1, true)\n      q = p.ease_out_cubic(q);\n\n      p.fill(255, p.map(q, 0, 1, 50, 100));\n      p.rect(p.map(q, 0, 1, -100, 0), 0, p.map(q, 0, 1, 0, 200), 60, 4);\n      p.rect(0, 0, 200, 60, 4);\n    } else {\n      p.fill(255, mouse_over_queuer ? 255 : 100);\n      p.rect(0, 0, 200, 60, 4)\n    }\n\n\n\n    p.fill(0, 255);\n    p.textAlign(p.CENTER, p.CENTER)\n    p.text(sending ? sent ? \"Sending again...\" : \"Sending...\" : sent ? mouse_over_queuer ? \"Send again\" : \"Done.\" : \"Send to sheets\", 0, -4)\n    p.pop();\n\n  }\n\n  p.submit = () => {\n    if (!sending) {\n      sending = true;\n      send_start_time = p.millis();\n\n      const submissions = p.generate_submissions();\n\n      props.send_to_google_sheets(submissions).then((result) => {\n        console.log(result);\n        sending = false;\n        sent = true;\n\n      })\n    }\n  }\n\n  // p.load_save = () => {\n  //   props.load_from_google_sheets().then((result) => {\n  //     console.log(result);\n\n  //     tasks = JSON.parse(\"\");\n  //     for(let t of tasks){\n  //       for(let c of t){\n  //         c.__proto__ = p.Card.prototype;\n  //       }\n  //     }\n  // })\n  // }\n\n  p.make_save = () => {\n    let asString = JSON.stringify(tasks)\n\n    props.save_to_google_sheets([user, asString]).then((result) => {\n      console.log(result);\n    })\n  }\n\n  p.generate_submissions = () => {\n    const submissions = [];\n    p.make_save();\n\n    for (let t of tasks) {\n      for (let c of t) {\n        let card_submission = {\n          id: c.card_id,\n          task: c.card_task_index,\n          user: user,\n          p: c.power,\n          t: c.toughness,\n          m: c.mana,\n        }\n\n\n        let repeat_checker = {};\n\n        for (let e of c.effects) {\n          if (repeat_checker[e.effect_short] == undefined) {\n            repeat_checker[e.effect_short] = 0;\n          } else {\n            repeat_checker[e.effect_short]++;\n          }\n\n          if (e.settings.methods[0] != null) card_submission[e.effect_short + \"-method-\" + repeat_checker[e.effect_short]] = e.settings.methods[1];\n          if (e.settings.params[0] != null) card_submission[e.effect_short + \"-param-\" + repeat_checker[e.effect_short]] = e.settings.params[1];\n          if (e.settings.targets[0] != null) card_submission[e.effect_short + \"-target-\" + repeat_checker[e.effect_short]] = e.settings.targets[1];\n          if (e.settings.filters[0] != null) card_submission[e.effect_short + \"-filter-\" + repeat_checker[e.effect_short]] = e.settings.filters[1];\n          if (e.settings.duration[0] != null) card_submission[e.effect_short + \"-duration-\" + repeat_checker[e.effect_short]] = e.settings.duration[1];\n\n        }\n        submissions[c.card_task_index + \"-\" + c.card_id] = card_submission;\n      }\n    }\n\n    return submissions;\n  }\n\n  p.resize_all = () => {\n    for (let b of buttons) {\n      b.resized();\n    }\n\n    for (let t of tasks) {\n      for (let c of t) {\n        c.resized();\n      }\n    }\n\n    p.generate_masks();\n\n  }\n\n  p.generate_masks = () => {\n    ellipse_mask = p.createGraphics(250, 250);\n    ellipse_mask.ellipse(ellipse_mask.width / 2, ellipse_mask.height / 2, 200, 200)\n\n    rect_mask = p.createGraphics(250, 250);\n    rect_mask.rectMode(p.CENTER);\n    rect_mask.rect(rect_mask.width / 2, rect_mask.height / 2, 200, 160)\n  }\n\n  p.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n\n    effects[effect_text] = new p.Effect(effect_text, effect_short, method, param, targets, filters, duration);\n    buttons.push(new p.Button(effect_text, button_id++));\n  }\n\n  p.register_all = () => {\n\n    p.register_effect(\"Deal damage\", \"dam\",\n      [\"randomly\", \"targeted\", \"all\"],\n      [\"x\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n    p.register_effect(\"Destroy\", \"des\",\n      [\"randomly\", \"targeted\", \"all\"],\n      null,\n      [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n    p.register_effect(\"Heal\", \"hea\",\n      [\"randomly\", \"targeted\", \"all\"],\n      [\"x\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n    p.register_effect(\"Gain armour\", \"arm\",\n      null,\n      [\"x\"],\n      null,\n      null,\n      null);\n\n    p.register_effect(\"Change stats\", \"cha\",\n      [\"randomly\", \"targeted\", \"all\", \"aura\"],\n      [\"x/x\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      [\"turn\", \"permanently\"]);\n\n    p.register_effect(\"Set stats\", \"set\",\n      [\"randomly\", \"targeted\", \"all\", \"aura\"],\n      [\"x/x\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      [\"turn\", \"permanently\"]);\n\n\n    p.register_effect(\"Give keyword\", \"giv\",\n      [\"randomly\", \"targeted\", \"all\", \"aura\"],\n      [\"k\"],\n      [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      [\"turn\", \"permanently\"]);\n\n    p.register_effect(\"Return to hand\", \"ret\",\n      [\"randomly\", \"targeted\", \"all\"],\n      null,\n      [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n\n    p.register_effect(\"Draw\", \"dra\",\n      null,\n      [\"x\"],\n      null,\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n\n    p.register_effect(\"Gain mana\", \"gai\",\n      null,\n      [\"x\"],\n      null,\n      [\"enemy\", \"friendly\", \"all\"],\n      null);\n\n    p.register_effect(\"Summon\", \"sum\",\n      null,\n      [\"x/x\"],\n      null,\n      null,\n      null);\n\n    p.register_effect(\"Keyword\", \"key\",\n      null,\n      [\"k\"],\n      null,\n      null,\n      null);\n\n    p.register_effect(\"Creature type\", \"cre\",\n      null,\n      [\"c\"],\n      null,\n      null,\n      null);\n\n\n\n  }\n\n\n  p.FancyMouse = class {\n    constuctor() {\n      this.busy = false;\n      this.xOffset = 0;\n      this.yOffset = 0;\n      this.effect = null;\n    }\n    setOffset(buttonX, buttonY) {\n      this.xOffset = p.mouseX - buttonX;\n      this.yOffset = p.mouseY - buttonY;\n    }\n  }\n\n\n\n\n\n  p.Effect = class {\n    constructor(label_name, effect_short, methods, param_format, targets, filters, duration) {\n      this.x = 0;\n      this.y = 0;\n\n      this.effect_string = \"\";\n      this.effect_string_height = 0;\n      this.effect_string_width = blank_spell_img.width * 0.5;\n      this.label_name = label_name;\n      this.effect_short = effect_short;\n\n      this.settings = {\n        methods: [methods, \"\"],\n        params: [param_format, \"\"],\n        targets: [targets, \"\"],\n        filters: [filters, \"\"],\n        duration: [duration, \"\"]\n      };\n    }\n  }\n\n\n  p.Card = class {\n    constructor(card_id, card_task_index, card_class) {\n      this.y = 0;\n      this.x = 0;\n      this.w = blank_spell_img.width * 0.75;\n      this.h = blank_spell_img.height * 0.75;\n      this.oversized = false;\n\n\n      this.class = card_class;\n      this.type_id = 1; //creature\n      this.card_id = card_id;\n      this.card_task_index = card_task_index;\n\n\n      this.flav_img_index = p.floor(p.random(gan_imgs.length));\n      this.mana = 5;\n      this.power = 5;\n      this.toughness = 5;\n      this.effects = [];\n\n      this.hovered_effect = null;\n      this.mouse_over_card_effect = false;\n      this.mouse_over_mana = false;\n      this.mouse_over_power = false;\n      this.mouse_over_toughness = false;\n\n\n    }\n\n    resized() {\n      if (tasks[this.card_task_index].length == 1) {\n        this.x = p.map(2, 0, 3, w_padding, p.width - w_padding)\n      } else if (tasks[this.card_task_index].length == 2) {\n        this.x = p.map(this.card_id == 0 ? 1.5 : 2.5, 0, 3, w_padding, p.width - w_padding)\n      } else {\n        this.x = p.map(this.card_id + 1, 0, 3, w_padding, p.width - w_padding)\n      }\n      this.y = p.height / 2;\n    }\n\n    run() {\n      this.generate_effect_text();\n      this.check_mouse_hovers();\n      this.display();\n    }\n\n    generate_effect_text() {\n      for (let e of this.effects) {\n        e.effect_string = \"\";\n        if (e.label_name == \"Keyword\" || e.label_name == \"Creature type\") {\n          e.effect_string = e.settings.params[1];\n        } else if (e.label_name == \"Deal damage\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n          } else {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \"\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \" //remove \"all all\"\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1]\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n          }\n        } else if (e.label_name == \"Destroy\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly destroy a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Destroy a target \";\n          } else {\n            e.effect_string = \"Destroy all \"\n          }\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \" //remove \"all all\"\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1]\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n          }\n        } else if (e.label_name == \"Heal\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n          } else {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n          }\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \" //remove \"all all\"\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1]\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n          }\n        } else {\n          e.effect_string = e.label_name\n        }\n\n\n\n        let estimated_characters_per_line = 20;\n        let estimated_lines = e.effect_string.length / estimated_characters_per_line;\n        e.effect_string_height = font_pixels_small * estimated_lines + 30;\n\n      }\n\n    }\n\n    display() {\n\n      p.push();\n      p.fill(0);\n      p.textAlign(p.CENTER, p.CENTER)\n      if (this.effects.length > 2) {\n        this.oversized = true;\n      } else {\n        this.oversized = false;\n      }\n\n\n      let flav = gan_imgs[this.flav_img_index].get();\n      let forg;\n\n      if (card_types[this.type_id] == \"spell\") {\n        flav.mask(rect_mask)\n        forg = blank_spell_img;\n      } else if (card_types[this.type_id] == \"minion\") {\n        flav.mask(ellipse_mask)\n        forg = this.oversized ? full_blank_creature_img : blank_creature_img;\n      } else {\n        flav.mask(rect_mask)\n        forg = blank_weapon_img;\n      }\n\n      if (!this.oversized) {\n        p.image(flav, this.x, this.y - 90, 250, 250)\n      }\n      p.image(forg, this.x, this.y, this.w, this.h);\n\n      p.push();\n      p.textSize(60);\n      p.fill(255);\n      p.strokeWeight(3);\n      p.stroke(0);\n\n      if (card_types[this.type_id] == \"minion\") {\n        p.text(this.power, this.x - this.w / 2.99, this.y + this.h / 2.8)\n        p.text(this.toughness, this.x + this.w / 2.6, this.y + this.h / 2.8)\n      }\n\n\n      p.text(this.mana, this.x - this.w / 2.99, this.y - this.h / 2.3)\n\n      p.pop();\n\n\n      p.push();\n      p.fill(0);\n      p.textSize(font_pixels_small);\n      let translation_offset_y;\n      if (this.oversized) {\n        translation_offset_y = this.y - this.h / 2 + 80;\n        p.translate(this.x, this.y - this.h / 2 + 80);\n      } else {\n        translation_offset_y = this.y + 50;\n        p.translate(this.x, this.y + 50);\n      }\n\n      this.mouse_over_card_effect = false;\n      this.hovered_effect = null;\n\n      for (let e of this.effects) {\n\n        translation_offset_y += e.effect_string_height / 2;\n        p.translate(0, e.effect_string_height / 2)\n\n        if (p.mouseY > translation_offset_y - e.effect_string_height / 2 &&\n          p.mouseY < translation_offset_y + e.effect_string_height / 2 &&\n          p.mouseX > this.x - e.effect_string_width / 2 &&\n          p.mouseX < this.x + e.effect_string_width / 2) {\n\n          this.mouse_over_card_effect = true;\n\n          this.hovered_effect = e;\n          this.hovered_effect.x = this.x - e.effect_string_width / 2;\n          this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n          p.fill(0, 100);\n        } else {\n          p.fill(0, 50)\n        }\n\n        p.rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4)\n        p.fill(255, 255)\n        p.text(e.effect_string, 0, 0, blank_spell_img.width / 2, blank_spell_img.height / 2)\n        translation_offset_y += e.effect_string_height / 2 + 5;\n        p.translate(0, e.effect_string_height / 2 + 5)\n\n      }\n      p.pop();\n\n\n      p.push();\n\n      if (editing_card == this) {\n        if (editing == \"mana\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y - this.h / 2.3;\n        } else if (editing == \"power\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y + this.h / 2.8;\n        } else if (editing == \"toughness\") {\n          editX = this.x + this.w / 2.6;\n          editY = this.y + this.h / 2.8;\n        }\n      }\n\n      p.pop();\n      p.pop();\n    }\n\n\n    mouseInImg() {\n      return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n        p.mouseX < this.x + this.w / 2 + mouse_padding &&\n        p.mouseY > this.y - this.h / 2 - mouse_padding &&\n        p.mouseY < this.y + this.h / 2 + mouse_padding);\n\n    }\n    check_mouse_hovers() {\n      if (card_types[this.type_id] == \"minion\") {\n        this.mouse_over_power = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y + this.h / 2.8) < 50\n        this.mouse_over_toughness = p.dist(p.mouseX, p.mouseY, this.x + this.w / 2.6, this.y + this.h / 2.8) < 50\n      }\n      this.mouse_over_mana = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y - this.h / 2.3) < 50\n    }\n  }\n\n\n\n\n\n  p.Button = class {\n\n    constructor(button_name, button_id) {\n      this.button_name = button_name;\n      this.button_id = button_id;\n\n      this.x = 0;\n      this.y = 0;\n      this.w = p.textWidth(button_name) + 14;\n      this.h = font_pixels + 10;\n      this.fillAlpha = 100;\n\n      this.text_x = 0;\n      this.text_y = 0;\n    }\n    mouseInRegion() {\n      return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n        p.mouseX < this.x + this.w / 2 + mouse_padding &&\n        p.mouseY > this.y - this.h / 2 - mouse_padding &&\n        p.mouseY < this.y + this.h / 2 + mouse_padding);\n    }\n\n    resized() {\n      this.x = w_padding - 150 + this.w / 2 - 7;\n      this.y = p.map(this.button_id, 0, buttons.length, h_padding, p.height - h_padding);\n      this.text_x = this.x - this.w / 2 + 7;\n      this.text_y = this.y - 6;\n    }\n\n    run() {\n      this.update();\n      this.display();\n    }\n\n    update() {\n\n      if (this.mouseInRegion() && current_survey_topic == 0) {\n        this.fillAlpha = 255;\n      } else {\n        this.fillAlpha = 100;\n      }\n\n    }\n\n    display() {\n\n\n      p.textSize(font_pixels)\n      p.textAlign(p.LEFT, p.CENTER)\n      p.fill(255, this.fillAlpha);\n      p.rect(this.x, this.y, this.w, this.h, 4, 4);\n      p.fill(0, 255);\n      p.text(this.button_name, this.text_x, this.text_y);\n    }\n\n\n  }\n\n\n  document.oncontextmenu = function () {\n    return false;\n  }\n\n\n}"]},"metadata":{},"sourceType":"module"}