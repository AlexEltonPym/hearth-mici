{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionBuilder = exports.runWith = exports.region = void 0;\n\nconst _ = require(\"lodash\");\n\nconst function_configuration_1 = require(\"./function-configuration\");\n\nconst analytics = require(\"./providers/analytics\");\n\nconst auth = require(\"./providers/auth\");\n\nconst database = require(\"./providers/database\");\n\nconst firestore = require(\"./providers/firestore\");\n\nconst https = require(\"./providers/https\");\n\nconst pubsub = require(\"./providers/pubsub\");\n\nconst remoteConfig = require(\"./providers/remoteConfig\");\n\nconst storage = require(\"./providers/storage\");\n\nconst testLab = require(\"./providers/testLab\");\n/**\n * Assert that the runtime options passed in are valid.\n * @param runtimeOptions object containing memory and timeout information.\n * @throws { Error } Memory and TimeoutSeconds values must be valid.\n */\n\n\nfunction assertRuntimeOptionsValid(runtimeOptions) {\n  if (runtimeOptions.memory && !_.includes(function_configuration_1.VALID_MEMORY_OPTIONS, runtimeOptions.memory)) {\n    throw new Error(`The only valid memory allocation values are: ${function_configuration_1.VALID_MEMORY_OPTIONS.join(', ')}`);\n  }\n\n  if (runtimeOptions.timeoutSeconds > function_configuration_1.MAX_TIMEOUT_SECONDS || runtimeOptions.timeoutSeconds < 0) {\n    throw new Error(`TimeoutSeconds must be between 0 and ${function_configuration_1.MAX_TIMEOUT_SECONDS}`);\n  }\n\n  if (runtimeOptions.ingressSettings && !_.includes(function_configuration_1.INGRESS_SETTINGS_OPTIONS, runtimeOptions.ingressSettings)) {\n    throw new Error(`The only valid ingressSettings values are: ${function_configuration_1.INGRESS_SETTINGS_OPTIONS.join(',')}`);\n  }\n\n  if (runtimeOptions.vpcConnectorEgressSettings && !_.includes(function_configuration_1.VPC_EGRESS_SETTINGS_OPTIONS, runtimeOptions.vpcConnectorEgressSettings)) {\n    throw new Error(`The only valid vpcConnectorEgressSettings values are: ${function_configuration_1.VPC_EGRESS_SETTINGS_OPTIONS.join(',')}`);\n  }\n\n  if (runtimeOptions.failurePolicy !== undefined) {\n    if (_.isBoolean(runtimeOptions.failurePolicy) === false && _.isObjectLike(runtimeOptions.failurePolicy) === false) {\n      throw new Error(`failurePolicy must be a boolean or an object.`);\n    }\n\n    if (typeof runtimeOptions.failurePolicy === 'object') {\n      if (_.isObjectLike(runtimeOptions.failurePolicy.retry) === false || _.isEmpty(runtimeOptions.failurePolicy.retry) === false) {\n        throw new Error('failurePolicy.retry must be an empty object.');\n      }\n    }\n  }\n\n  if (runtimeOptions.serviceAccount && runtimeOptions.serviceAccount !== 'default' && !_.includes(runtimeOptions.serviceAccount, '@')) {\n    throw new Error(`serviceAccount must be set to 'default', a service account email, or '{serviceAccountName}@'`);\n  }\n\n  return true;\n}\n/**\n * Assert regions specified are valid.\n * @param regions list of regions.\n * @throws { Error } Regions must be in list of supported regions.\n */\n\n\nfunction assertRegionsAreValid(regions) {\n  if (!regions.length) {\n    throw new Error('You must specify at least one region');\n  }\n\n  return true;\n}\n/**\n * Configure the regions that the function is deployed to.\n * @param regions One of more region strings.\n * @example\n * functions.region('us-east1')\n * @example\n * functions.region('us-east1', 'us-central1')\n */\n\n\nfunction region(...regions) {\n  if (assertRegionsAreValid(regions)) {\n    return new FunctionBuilder({\n      regions\n    });\n  }\n}\n\nexports.region = region;\n/**\n * Configure runtime options for the function.\n * @param runtimeOptions Object with optional fields:\n * 1. `memory`: amount of memory to allocate to the function, possible values\n *    are: '128MB', '256MB', '512MB', '1GB', '2GB', and '4GB'.\n * 2. `timeoutSeconds`: timeout for the function in seconds, possible values are\n *    0 to 540.\n * 3. `failurePolicy`: failure policy of the function, with boolean `true` being\n *    equivalent to providing an empty retry object.\n * 4. `vpcConnector`: id of a VPC connector in same project and region.\n * 5. `vpcConnectorEgressSettings`: when a vpcConnector is set, control which\n *    egress traffic is sent through the vpcConnector.\n * 6. `serviceAccount`: Specific service account for the function.\n * 7. `ingressSettings`: ingress settings for the function, which control where a HTTPS\n *    function can be called from.\n *\n * Value must not be null.\n */\n\nfunction runWith(runtimeOptions) {\n  if (assertRuntimeOptionsValid(runtimeOptions)) {\n    return new FunctionBuilder(runtimeOptions);\n  }\n}\n\nexports.runWith = runWith;\n\nclass FunctionBuilder {\n  constructor(options) {\n    this.options = options;\n  }\n  /**\n   * Configure the regions that the function is deployed to.\n   * @param regions One or more region strings.\n   * @example\n   * functions.region('us-east1')\n   * @example\n   * functions.region('us-east1', 'us-central1')\n   */\n\n\n  region(...regions) {\n    if (assertRegionsAreValid(regions)) {\n      this.options.regions = regions;\n      return this;\n    }\n  }\n  /**\n   * Configure runtime options for the function.\n   * @param runtimeOptions Object with optional fields:\n   * 1. `memory`: amount of memory to allocate to the function, possible values\n   *    are: '128MB', '256MB', '512MB', '1GB', '2GB', and '4GB'.\n   * 2. `timeoutSeconds`: timeout for the function in seconds, possible values are\n   *    0 to 540.\n   * 3. `failurePolicy`: failure policy of the function, with boolean `true` being\n   *    equivalent to providing an empty retry object.\n   * 4. `vpcConnector`: id of a VPC connector in the same project and region\n   * 5. `vpcConnectorEgressSettings`: when a `vpcConnector` is set, control which\n   *    egress traffic is sent through the `vpcConnector`.\n   *\n   * Value must not be null.\n   */\n\n\n  runWith(runtimeOptions) {\n    if (assertRuntimeOptionsValid(runtimeOptions)) {\n      this.options = _.assign(this.options, runtimeOptions);\n      return this;\n    }\n  }\n\n  get https() {\n    if (this.options.failurePolicy !== undefined) {\n      console.warn('RuntimeOptions.failurePolicy is not supported in https functions.');\n    }\n\n    return {\n      /**\n       * Handle HTTP requests.\n       * @param handler A function that takes a request and response object,\n       * same signature as an Express app.\n       */\n      onRequest: handler => https._onRequestWithOptions(handler, this.options),\n\n      /**\n       * Declares a callable method for clients to call using a Firebase SDK.\n       * @param handler A method that takes a data and context and returns a value.\n       */\n      onCall: handler => https._onCallWithOptions(handler, this.options)\n    };\n  }\n\n  get database() {\n    return {\n      /**\n       * Selects a database instance that will trigger the function. If omitted,\n       * will pick the default database for your project.\n       * @param instance The Realtime Database instance to use.\n       */\n      instance: instance => database._instanceWithOptions(instance, this.options),\n\n      /**\n       * Select Firebase Realtime Database Reference to listen to.\n       *\n       * This method behaves very similarly to the method of the same name in\n       * the client and Admin Firebase SDKs. Any change to the Database that\n       * affects the data at or below the provided `path` will fire an event in\n       * Cloud Functions.\n       *\n       * There are three important differences between listening to a Realtime\n       * Database event in Cloud Functions and using the Realtime Database in\n       * the client and Admin SDKs:\n       * 1. Cloud Functions allows wildcards in the `path` name. Any `path`\n       *    component in curly brackets (`{}`) is a wildcard that matches all\n       *    strings. The value that matched a certain invocation of a Cloud\n       *    Function is returned as part of the `context.params` object. For\n       *    example, `ref(\"messages/{messageId}\")` matches changes at\n       *    `/messages/message1` or `/messages/message2`, resulting in\n       *    `context.params.messageId` being set to `\"message1\"` or\n       *    `\"message2\"`, respectively.\n       * 2. Cloud Functions do not fire an event for data that already existed\n       *    before the Cloud Function was deployed.\n       * 3. Cloud Function events have access to more information, including\n       *    information about the user who triggered the Cloud Function.\n       * @param ref Path of the database to listen to.\n       */\n      ref: path => database._refWithOptions(path, this.options)\n    };\n  }\n\n  get firestore() {\n    return {\n      /**\n       * Select the Firestore document to listen to for events.\n       * @param path Full database path to listen to. This includes the name of\n       * the collection that the document is a part of. For example, if the\n       * collection is named \"users\" and the document is named \"Ada\", then the\n       * path is \"/users/Ada\".\n       */\n      document: path => firestore._documentWithOptions(path, this.options),\n\n      /** @hidden */\n      namespace: namespace => firestore._namespaceWithOptions(namespace, this.options),\n\n      /** @hidden */\n      database: database => firestore._databaseWithOptions(database, this.options)\n    };\n  }\n\n  get analytics() {\n    return {\n      /**\n       * Select analytics events to listen to for events.\n       * @param analyticsEventType Name of the analytics event type.\n       */\n      event: analyticsEventType => analytics._eventWithOptions(analyticsEventType, this.options)\n    };\n  }\n\n  get remoteConfig() {\n    return {\n      /**\n       * Handle all updates (including rollbacks) that affect a Remote Config\n       * project.\n       * @param handler A function that takes the updated Remote Config template\n       * version metadata as an argument.\n       */\n      onUpdate: handler => remoteConfig._onUpdateWithOptions(handler, this.options)\n    };\n  }\n\n  get storage() {\n    return {\n      /**\n       * The optional bucket function allows you to choose which buckets' events\n       * to handle. This step can be bypassed by calling object() directly,\n       * which will use the default Cloud Storage for Firebase bucket.\n       * @param bucket Name of the Google Cloud Storage bucket to listen to.\n       */\n      bucket: bucket => storage._bucketWithOptions(this.options, bucket),\n\n      /**\n       * Handle events related to Cloud Storage objects.\n       */\n      object: () => storage._objectWithOptions(this.options)\n    };\n  }\n\n  get pubsub() {\n    return {\n      /**\n       * Select Cloud Pub/Sub topic to listen to.\n       * @param topic Name of Pub/Sub topic, must belong to the same project as\n       * the function.\n       */\n      topic: topic => pubsub._topicWithOptions(topic, this.options),\n      schedule: schedule => pubsub._scheduleWithOptions(schedule, this.options)\n    };\n  }\n\n  get auth() {\n    return {\n      /**\n       * Handle events related to Firebase authentication users.\n       */\n      user: () => auth._userWithOptions(this.options)\n    };\n  }\n\n  get testLab() {\n    return {\n      /**\n       * Handle events related to Test Lab test matrices.\n       */\n      testMatrix: () => testLab._testMatrixWithOpts(this.options)\n    };\n  }\n\n}\n\nexports.FunctionBuilder = FunctionBuilder;","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/node_modules/firebase-functions/lib/function-builder.js"],"names":["Object","defineProperty","exports","value","FunctionBuilder","runWith","region","_","require","function_configuration_1","analytics","auth","database","firestore","https","pubsub","remoteConfig","storage","testLab","assertRuntimeOptionsValid","runtimeOptions","memory","includes","VALID_MEMORY_OPTIONS","Error","join","timeoutSeconds","MAX_TIMEOUT_SECONDS","ingressSettings","INGRESS_SETTINGS_OPTIONS","vpcConnectorEgressSettings","VPC_EGRESS_SETTINGS_OPTIONS","failurePolicy","undefined","isBoolean","isObjectLike","retry","isEmpty","serviceAccount","assertRegionsAreValid","regions","length","constructor","options","assign","console","warn","onRequest","handler","_onRequestWithOptions","onCall","_onCallWithOptions","instance","_instanceWithOptions","ref","path","_refWithOptions","document","_documentWithOptions","namespace","_namespaceWithOptions","_databaseWithOptions","event","analyticsEventType","_eventWithOptions","onUpdate","_onUpdateWithOptions","bucket","_bucketWithOptions","object","_objectWithOptions","topic","_topicWithOptions","schedule","_scheduleWithOptions","user","_userWithOptions","testMatrix","_testMatrixWithOpts"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionBuilder = exports.runWith = exports.region = void 0;\nconst _ = require(\"lodash\");\nconst function_configuration_1 = require(\"./function-configuration\");\nconst analytics = require(\"./providers/analytics\");\nconst auth = require(\"./providers/auth\");\nconst database = require(\"./providers/database\");\nconst firestore = require(\"./providers/firestore\");\nconst https = require(\"./providers/https\");\nconst pubsub = require(\"./providers/pubsub\");\nconst remoteConfig = require(\"./providers/remoteConfig\");\nconst storage = require(\"./providers/storage\");\nconst testLab = require(\"./providers/testLab\");\n/**\n * Assert that the runtime options passed in are valid.\n * @param runtimeOptions object containing memory and timeout information.\n * @throws { Error } Memory and TimeoutSeconds values must be valid.\n */\nfunction assertRuntimeOptionsValid(runtimeOptions) {\n    if (runtimeOptions.memory &&\n        !_.includes(function_configuration_1.VALID_MEMORY_OPTIONS, runtimeOptions.memory)) {\n        throw new Error(`The only valid memory allocation values are: ${function_configuration_1.VALID_MEMORY_OPTIONS.join(', ')}`);\n    }\n    if (runtimeOptions.timeoutSeconds > function_configuration_1.MAX_TIMEOUT_SECONDS ||\n        runtimeOptions.timeoutSeconds < 0) {\n        throw new Error(`TimeoutSeconds must be between 0 and ${function_configuration_1.MAX_TIMEOUT_SECONDS}`);\n    }\n    if (runtimeOptions.ingressSettings &&\n        !_.includes(function_configuration_1.INGRESS_SETTINGS_OPTIONS, runtimeOptions.ingressSettings)) {\n        throw new Error(`The only valid ingressSettings values are: ${function_configuration_1.INGRESS_SETTINGS_OPTIONS.join(',')}`);\n    }\n    if (runtimeOptions.vpcConnectorEgressSettings &&\n        !_.includes(function_configuration_1.VPC_EGRESS_SETTINGS_OPTIONS, runtimeOptions.vpcConnectorEgressSettings)) {\n        throw new Error(`The only valid vpcConnectorEgressSettings values are: ${function_configuration_1.VPC_EGRESS_SETTINGS_OPTIONS.join(',')}`);\n    }\n    if (runtimeOptions.failurePolicy !== undefined) {\n        if (_.isBoolean(runtimeOptions.failurePolicy) === false &&\n            _.isObjectLike(runtimeOptions.failurePolicy) === false) {\n            throw new Error(`failurePolicy must be a boolean or an object.`);\n        }\n        if (typeof runtimeOptions.failurePolicy === 'object') {\n            if (_.isObjectLike(runtimeOptions.failurePolicy.retry) === false ||\n                _.isEmpty(runtimeOptions.failurePolicy.retry) === false) {\n                throw new Error('failurePolicy.retry must be an empty object.');\n            }\n        }\n    }\n    if (runtimeOptions.serviceAccount &&\n        runtimeOptions.serviceAccount !== 'default' &&\n        !_.includes(runtimeOptions.serviceAccount, '@')) {\n        throw new Error(`serviceAccount must be set to 'default', a service account email, or '{serviceAccountName}@'`);\n    }\n    return true;\n}\n/**\n * Assert regions specified are valid.\n * @param regions list of regions.\n * @throws { Error } Regions must be in list of supported regions.\n */\nfunction assertRegionsAreValid(regions) {\n    if (!regions.length) {\n        throw new Error('You must specify at least one region');\n    }\n    return true;\n}\n/**\n * Configure the regions that the function is deployed to.\n * @param regions One of more region strings.\n * @example\n * functions.region('us-east1')\n * @example\n * functions.region('us-east1', 'us-central1')\n */\nfunction region(...regions) {\n    if (assertRegionsAreValid(regions)) {\n        return new FunctionBuilder({ regions });\n    }\n}\nexports.region = region;\n/**\n * Configure runtime options for the function.\n * @param runtimeOptions Object with optional fields:\n * 1. `memory`: amount of memory to allocate to the function, possible values\n *    are: '128MB', '256MB', '512MB', '1GB', '2GB', and '4GB'.\n * 2. `timeoutSeconds`: timeout for the function in seconds, possible values are\n *    0 to 540.\n * 3. `failurePolicy`: failure policy of the function, with boolean `true` being\n *    equivalent to providing an empty retry object.\n * 4. `vpcConnector`: id of a VPC connector in same project and region.\n * 5. `vpcConnectorEgressSettings`: when a vpcConnector is set, control which\n *    egress traffic is sent through the vpcConnector.\n * 6. `serviceAccount`: Specific service account for the function.\n * 7. `ingressSettings`: ingress settings for the function, which control where a HTTPS\n *    function can be called from.\n *\n * Value must not be null.\n */\nfunction runWith(runtimeOptions) {\n    if (assertRuntimeOptionsValid(runtimeOptions)) {\n        return new FunctionBuilder(runtimeOptions);\n    }\n}\nexports.runWith = runWith;\nclass FunctionBuilder {\n    constructor(options) {\n        this.options = options;\n    }\n    /**\n     * Configure the regions that the function is deployed to.\n     * @param regions One or more region strings.\n     * @example\n     * functions.region('us-east1')\n     * @example\n     * functions.region('us-east1', 'us-central1')\n     */\n    region(...regions) {\n        if (assertRegionsAreValid(regions)) {\n            this.options.regions = regions;\n            return this;\n        }\n    }\n    /**\n     * Configure runtime options for the function.\n     * @param runtimeOptions Object with optional fields:\n     * 1. `memory`: amount of memory to allocate to the function, possible values\n     *    are: '128MB', '256MB', '512MB', '1GB', '2GB', and '4GB'.\n     * 2. `timeoutSeconds`: timeout for the function in seconds, possible values are\n     *    0 to 540.\n     * 3. `failurePolicy`: failure policy of the function, with boolean `true` being\n     *    equivalent to providing an empty retry object.\n     * 4. `vpcConnector`: id of a VPC connector in the same project and region\n     * 5. `vpcConnectorEgressSettings`: when a `vpcConnector` is set, control which\n     *    egress traffic is sent through the `vpcConnector`.\n     *\n     * Value must not be null.\n     */\n    runWith(runtimeOptions) {\n        if (assertRuntimeOptionsValid(runtimeOptions)) {\n            this.options = _.assign(this.options, runtimeOptions);\n            return this;\n        }\n    }\n    get https() {\n        if (this.options.failurePolicy !== undefined) {\n            console.warn('RuntimeOptions.failurePolicy is not supported in https functions.');\n        }\n        return {\n            /**\n             * Handle HTTP requests.\n             * @param handler A function that takes a request and response object,\n             * same signature as an Express app.\n             */\n            onRequest: (handler) => https._onRequestWithOptions(handler, this.options),\n            /**\n             * Declares a callable method for clients to call using a Firebase SDK.\n             * @param handler A method that takes a data and context and returns a value.\n             */\n            onCall: (handler) => https._onCallWithOptions(handler, this.options),\n        };\n    }\n    get database() {\n        return {\n            /**\n             * Selects a database instance that will trigger the function. If omitted,\n             * will pick the default database for your project.\n             * @param instance The Realtime Database instance to use.\n             */\n            instance: (instance) => database._instanceWithOptions(instance, this.options),\n            /**\n             * Select Firebase Realtime Database Reference to listen to.\n             *\n             * This method behaves very similarly to the method of the same name in\n             * the client and Admin Firebase SDKs. Any change to the Database that\n             * affects the data at or below the provided `path` will fire an event in\n             * Cloud Functions.\n             *\n             * There are three important differences between listening to a Realtime\n             * Database event in Cloud Functions and using the Realtime Database in\n             * the client and Admin SDKs:\n             * 1. Cloud Functions allows wildcards in the `path` name. Any `path`\n             *    component in curly brackets (`{}`) is a wildcard that matches all\n             *    strings. The value that matched a certain invocation of a Cloud\n             *    Function is returned as part of the `context.params` object. For\n             *    example, `ref(\"messages/{messageId}\")` matches changes at\n             *    `/messages/message1` or `/messages/message2`, resulting in\n             *    `context.params.messageId` being set to `\"message1\"` or\n             *    `\"message2\"`, respectively.\n             * 2. Cloud Functions do not fire an event for data that already existed\n             *    before the Cloud Function was deployed.\n             * 3. Cloud Function events have access to more information, including\n             *    information about the user who triggered the Cloud Function.\n             * @param ref Path of the database to listen to.\n             */\n            ref: (path) => database._refWithOptions(path, this.options),\n        };\n    }\n    get firestore() {\n        return {\n            /**\n             * Select the Firestore document to listen to for events.\n             * @param path Full database path to listen to. This includes the name of\n             * the collection that the document is a part of. For example, if the\n             * collection is named \"users\" and the document is named \"Ada\", then the\n             * path is \"/users/Ada\".\n             */\n            document: (path) => firestore._documentWithOptions(path, this.options),\n            /** @hidden */\n            namespace: (namespace) => firestore._namespaceWithOptions(namespace, this.options),\n            /** @hidden */\n            database: (database) => firestore._databaseWithOptions(database, this.options),\n        };\n    }\n    get analytics() {\n        return {\n            /**\n             * Select analytics events to listen to for events.\n             * @param analyticsEventType Name of the analytics event type.\n             */\n            event: (analyticsEventType) => analytics._eventWithOptions(analyticsEventType, this.options),\n        };\n    }\n    get remoteConfig() {\n        return {\n            /**\n             * Handle all updates (including rollbacks) that affect a Remote Config\n             * project.\n             * @param handler A function that takes the updated Remote Config template\n             * version metadata as an argument.\n             */\n            onUpdate: (handler) => remoteConfig._onUpdateWithOptions(handler, this.options),\n        };\n    }\n    get storage() {\n        return {\n            /**\n             * The optional bucket function allows you to choose which buckets' events\n             * to handle. This step can be bypassed by calling object() directly,\n             * which will use the default Cloud Storage for Firebase bucket.\n             * @param bucket Name of the Google Cloud Storage bucket to listen to.\n             */\n            bucket: (bucket) => storage._bucketWithOptions(this.options, bucket),\n            /**\n             * Handle events related to Cloud Storage objects.\n             */\n            object: () => storage._objectWithOptions(this.options),\n        };\n    }\n    get pubsub() {\n        return {\n            /**\n             * Select Cloud Pub/Sub topic to listen to.\n             * @param topic Name of Pub/Sub topic, must belong to the same project as\n             * the function.\n             */\n            topic: (topic) => pubsub._topicWithOptions(topic, this.options),\n            schedule: (schedule) => pubsub._scheduleWithOptions(schedule, this.options),\n        };\n    }\n    get auth() {\n        return {\n            /**\n             * Handle events related to Firebase authentication users.\n             */\n            user: () => auth._userWithOptions(this.options),\n        };\n    }\n    get testLab() {\n        return {\n            /**\n             * Handle events related to Test Lab test matrices.\n             */\n            testMatrix: () => testLab._testMatrixWithOpts(this.options),\n        };\n    }\n}\nexports.FunctionBuilder = FunctionBuilder;\n"]},"metadata":{},"sourceType":"script"}