{"ast":null,"code":"class Card {\n  constructor(card_id, card_experiment) {\n    this.y = 0;\n    this.x = 0;\n    this.w = blank_spell_img.width * 0.75;\n    this.h = blank_spell_img.height * 0.75;\n    this.oversized = false;\n    this.class = \"mage\";\n    this.type_id = 1;\n    this.card_id = card_id;\n    this.card_experiment = card_experiment;\n    this.creature_type = \"\";\n    this.mana = 5;\n    this.power = 5;\n    this.toughness = 5;\n    this.keywords = [];\n    this.effects = [];\n    this.hovered_effect = null;\n    this.mouse_over_card_effect = false;\n    this.mouse_over_mana = false;\n    this.mouse_over_power = false;\n    this.mouse_over_toughness = false;\n  }\n\n  resized() {\n    this.x = map(this.card_id + 1, 0, cards.length, w_padding, width - w_padding);\n    this.y = height / 2;\n  }\n\n  run() {\n    this.generate_effect_text();\n    this.check_mouse_hovers();\n    this.display();\n  }\n\n  generate_effect_text() {\n    for (let e of this.effects) {\n      e.effect_string = \"\";\n\n      if (e.label_name == \"Keyword\" || e.label_name == \"Creature type\") {\n        e.effect_string = e.settings.params[1];\n      } else if (e.label_name == \"Deal damage\") {\n        if (e.settings.methods[1] == \"randomly\") {\n          e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n        } else if (e.settings.methods[1] == \"targeted\") {\n          e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n        } else {\n          e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \";\n        }\n\n        e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n        if (e.settings.methods[1] == \"all\") {\n          e.effect_string += e.settings.targets[1];\n        } else {\n          e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n        }\n      } else if (e.label_name == \"Destroy\") {\n        if (e.settings.methods[1] == \"randomly\") {\n          e.effect_string = \"Randomly destroy a \";\n        } else if (e.settings.methods[1] == \"targeted\") {\n          e.effect_string = \"Destroy a target \";\n        } else {\n          e.effect_string = \"Destroy all \";\n        }\n\n        e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n        if (e.settings.methods[1] == \"all\") {\n          e.effect_string += e.settings.targets[1];\n        } else {\n          e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n        }\n      } else if (e.label_name == \"Heal\") {\n        if (e.settings.methods[1] == \"randomly\") {\n          e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n        } else if (e.settings.methods[1] == \"targeted\") {\n          e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n        } else {\n          e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n        }\n\n        e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n        if (e.settings.methods[1] == \"all\") {\n          e.effect_string += e.settings.targets[1];\n        } else {\n          e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n        }\n      } else {\n        e.effect_string = e.label_name;\n      }\n\n      let estimatedCharactersPerLine = 20;\n      let estimatedLines = e.effect_string.length / estimatedCharactersPerLine;\n      e.effect_string_height = smaller_font_size * estimatedLines + 30;\n    }\n  }\n\n  display() {\n    push();\n    fill(0);\n    textAlign(CENTER, CENTER);\n\n    if (this.effects.length > 2) {\n      this.oversized = true;\n    } else {\n      this.oversized = false;\n    }\n\n    let flav;\n    let forg;\n\n    if (card_types[this.type_id] == \"spell\") {\n      flav = masked_flavour_rect;\n      forg = blank_spell_img;\n    } else if (card_types[this.type_id] == \"minion\") {\n      flav = masked_flavour_ellipse;\n      forg = this.oversized ? full_blank_creature_img : blank_creature_img;\n    } else {\n      flav = masked_flavour_rect;\n      forg = blank_weapon_img;\n    }\n\n    if (!this.oversized) {\n      image(flav, this.x + 5, this.y - 50, 300, 300);\n    }\n\n    image(forg, this.x, this.y, this.w, this.h);\n    push();\n    textSize(60);\n    fill(255);\n    strokeWeight(3);\n    stroke(0);\n\n    if (card_types[this.type_id] == \"minion\") {\n      text(this.power, this.x - this.w / 2.99, this.y + this.h / 2.8);\n      text(this.toughness, this.x + this.w / 2.6, this.y + this.h / 2.8);\n    }\n\n    text(this.mana, this.x - this.w / 2.99, this.y - this.h / 2.3);\n    pop();\n    push();\n    fill(0);\n    textSize(smaller_font_size);\n    let translation_offset_y;\n\n    if (this.oversized) {\n      translation_offset_y = this.y - this.h / 2 + 80;\n      translate(this.x, this.y - this.h / 2 + 80);\n    } else {\n      translation_offset_y = this.y + 50;\n      translate(this.x, this.y + 50);\n    }\n\n    this.mouse_over_card_effect = false;\n    this.hovered_effect = null;\n\n    for (let e of this.effects) {\n      translation_offset_y += e.effect_string_height / 2;\n      translate(0, e.effect_string_height / 2);\n\n      if (mouseY > translation_offset_y - e.effect_string_height / 2 && mouseY < translation_offset_y + e.effect_string_height / 2 && mouseX > this.x - e.effect_string_width / 2 && mouseX < this.x + e.effect_string_width / 2) {\n        this.mouse_over_card_effect = true;\n        this.hovered_effect = e;\n        this.hovered_effect.x = this.x - e.effect_string_width / 2;\n        this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n        fill(0, 100);\n      } else {\n        fill(0, 50);\n      }\n\n      rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4);\n      fill(255, 255);\n      text(e.effect_string, 0, 0, blank_spell_img.width / 2, blank_spell_img.height / 2);\n      translation_offset_y += e.effect_string_height / 2 + 5;\n      translate(0, e.effect_string_height / 2 + 5);\n    }\n\n    pop();\n    push();\n\n    if (editing_card == this) {\n      if (editing == \"mana\") {\n        editX = this.x - this.w / 2.99;\n        editY = this.y - this.h / 2.3;\n      } else if (editing == \"power\") {\n        editX = this.x - this.w / 2.99;\n        editY = this.y + this.h / 2.8;\n      } else if (editing == \"toughness\") {\n        editX = this.x + this.w / 2.6;\n        editY = this.y + this.h / 2.8;\n      }\n    }\n\n    pop();\n  }\n\n  mouseInImg() {\n    return mouseX > this.x - this.w / 2 - mouse_padding && mouseX < this.x + this.w / 2 + mouse_padding && mouseY > this.y - this.h / 2 - mouse_padding && mouseY < this.y + this.h / 2 + mouse_padding;\n  }\n\n  check_mouse_hovers() {\n    if (card_types[this.type_id] == \"minion\") {\n      this.mouse_over_power = dist(mouseX, mouseY, this.x - this.w / 2.99, this.y + this.h / 2.8) < 50;\n      this.mouse_over_toughness = dist(mouseX, mouseY, this.x + this.w / 2.6, this.y + this.h / 2.8) < 50;\n    }\n\n    this.mouse_over_mana = dist(mouseX, mouseY, this.x - this.w / 2.99, this.y - this.h / 2.3) < 50;\n  }\n\n}","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/src/sketch_stuff/card.js"],"names":["Card","constructor","card_id","card_experiment","y","x","w","blank_spell_img","width","h","height","oversized","class","type_id","creature_type","mana","power","toughness","keywords","effects","hovered_effect","mouse_over_card_effect","mouse_over_mana","mouse_over_power","mouse_over_toughness","resized","map","cards","length","w_padding","run","generate_effect_text","check_mouse_hovers","display","e","effect_string","label_name","settings","params","methods","filters","targets","target_names_singular","target_names","indexOf","estimatedCharactersPerLine","estimatedLines","effect_string_height","smaller_font_size","push","fill","textAlign","CENTER","flav","forg","card_types","masked_flavour_rect","masked_flavour_ellipse","full_blank_creature_img","blank_creature_img","blank_weapon_img","image","textSize","strokeWeight","stroke","text","pop","translation_offset_y","translate","mouseY","mouseX","effect_string_width","rect","editing_card","editing","editX","editY","mouseInImg","mouse_padding","dist"],"mappings":"AACA,MAAMA,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,OAAD,EAAUC,eAAV,EAA2B;AAClC,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAASC,eAAe,CAACC,KAAhB,GAAwB,IAAjC;AACA,SAAKC,CAAL,GAASF,eAAe,CAACG,MAAhB,GAAyB,IAAlC;AACA,SAAKC,SAAL,GAAiB,KAAjB;AAGA,SAAKC,KAAL,GAAa,MAAb;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKX,OAAL,GAAeA,OAAf;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AAEA,SAAKW,aAAL,GAAqB,EAArB;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,OAAL,GAAe,EAAf;AAEA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,sBAAL,GAA8B,KAA9B;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,oBAAL,GAA4B,KAA5B;AAGH;;AAEDC,EAAAA,OAAO,GAAG;AACN,SAAKpB,CAAL,GAASqB,GAAG,CAAC,KAAKxB,OAAL,GAAe,CAAhB,EAAmB,CAAnB,EAAsByB,KAAK,CAACC,MAA5B,EAAoCC,SAApC,EAA+CrB,KAAK,GAAGqB,SAAvD,CAAZ;AACA,SAAKzB,CAAL,GAASM,MAAM,GAAG,CAAlB;AACH;;AAEDoB,EAAAA,GAAG,GAAG;AACF,SAAKC,oBAAL;AACA,SAAKC,kBAAL;AACA,SAAKC,OAAL;AACH;;AAEDF,EAAAA,oBAAoB,GAAE;AAClB,SAAK,IAAIG,CAAT,IAAc,KAAKf,OAAnB,EAA4B;AACxBe,MAAAA,CAAC,CAACC,aAAF,GAAkB,EAAlB;;AACA,UAAGD,CAAC,CAACE,UAAF,IAAgB,SAAhB,IAA6BF,CAAC,CAACE,UAAF,IAAgB,eAAhD,EAAgE;AAC5DF,QAAAA,CAAC,CAACC,aAAF,GAAkBD,CAAC,CAACG,QAAF,CAAWC,MAAX,CAAkB,CAAlB,CAAlB;AACH,OAFD,MAEO,IAAGJ,CAAC,CAACE,UAAF,IAAgB,aAAnB,EAAiC;AACpC,YAAGF,CAAC,CAACG,QAAF,CAAWE,OAAX,CAAmB,CAAnB,KAAyB,UAA5B,EAAuC;AACnCL,UAAAA,CAAC,CAACC,aAAF,GAAkB,mBAAmBD,CAAC,CAACG,QAAF,CAAWC,MAAX,CAAkB,CAAlB,CAAnB,GAA0C,eAA5D;AACH,SAFD,MAEO,IAAGJ,CAAC,CAACG,QAAF,CAAWE,OAAX,CAAmB,CAAnB,KAAyB,UAA5B,EAAuC;AAC1CL,UAAAA,CAAC,CAACC,aAAF,GAAkB,UAAUD,CAAC,CAACG,QAAF,CAAWC,MAAX,CAAkB,CAAlB,CAAV,GAAiC,oBAAnD;AACH,SAFM,MAEA;AACHJ,UAAAA,CAAC,CAACC,aAAF,GAAkB,UAAUD,CAAC,CAACG,QAAF,CAAWC,MAAX,CAAkB,CAAlB,CAAV,GAAiC,iBAAnD;AACH;;AAEDJ,QAAAA,CAAC,CAACC,aAAF,IAAmBD,CAAC,CAACG,QAAF,CAAWG,OAAX,CAAmB,CAAnB,KAAuB,KAAvB,GAA6B,EAA7B,GAAgCN,CAAC,CAACG,QAAF,CAAWG,OAAX,CAAmB,CAAnB,IAAwB,GAA3E,CAToC,CAS2C;;AAC/E,YAAGN,CAAC,CAACG,QAAF,CAAWE,OAAX,CAAmB,CAAnB,KAAyB,KAA5B,EAAkC;AAC9BL,UAAAA,CAAC,CAACC,aAAF,IAAmBD,CAAC,CAACG,QAAF,CAAWI,OAAX,CAAmB,CAAnB,CAAnB;AACH,SAFD,MAEO;AACHP,UAAAA,CAAC,CAACC,aAAF,IAAmBO,qBAAqB,CAACC,YAAY,CAACC,OAAb,CAAqBV,CAAC,CAACG,QAAF,CAAWI,OAAX,CAAmB,CAAnB,CAArB,CAAD,CAAxC;AACH;AACJ,OAfM,MAeA,IAAGP,CAAC,CAACE,UAAF,IAAe,SAAlB,EAA4B;AAC/B,YAAGF,CAAC,CAACG,QAAF,CAAWE,OAAX,CAAmB,CAAnB,KAAyB,UAA5B,EAAuC;AACnCL,UAAAA,CAAC,CAACC,aAAF,GAAkB,qBAAlB;AACH,SAFD,MAEO,IAAGD,CAAC,CAACG,QAAF,CAAWE,OAAX,CAAmB,CAAnB,KAAyB,UAA5B,EAAuC;AAC1CL,UAAAA,CAAC,CAACC,aAAF,GAAkB,mBAAlB;AACH,SAFM,MAEA;AACHD,UAAAA,CAAC,CAACC,aAAF,GAAkB,cAAlB;AACH;;AACDD,QAAAA,CAAC,CAACC,aAAF,IAAmBD,CAAC,CAACG,QAAF,CAAWG,OAAX,CAAmB,CAAnB,KAAuB,KAAvB,GAA6B,EAA7B,GAAgCN,CAAC,CAACG,QAAF,CAAWG,OAAX,CAAmB,CAAnB,IAAwB,GAA3E,CAR+B,CAQgD;;AAC/E,YAAGN,CAAC,CAACG,QAAF,CAAWE,OAAX,CAAmB,CAAnB,KAAyB,KAA5B,EAAkC;AAC9BL,UAAAA,CAAC,CAACC,aAAF,IAAmBD,CAAC,CAACG,QAAF,CAAWI,OAAX,CAAmB,CAAnB,CAAnB;AACH,SAFD,MAEO;AACHP,UAAAA,CAAC,CAACC,aAAF,IAAmBO,qBAAqB,CAACC,YAAY,CAACC,OAAb,CAAqBV,CAAC,CAACG,QAAF,CAAWI,OAAX,CAAmB,CAAnB,CAArB,CAAD,CAAxC;AACH;AACJ,OAdM,MAcA,IAAGP,CAAC,CAACE,UAAF,IAAe,MAAlB,EAAyB;AAC5B,YAAGF,CAAC,CAACG,QAAF,CAAWE,OAAX,CAAmB,CAAnB,KAAyB,UAA5B,EAAuC;AACnCL,UAAAA,CAAC,CAACC,aAAF,GAAkB,aAAaD,CAAC,CAACG,QAAF,CAAWC,MAAX,CAAkB,CAAlB,CAAb,GAAoC,sBAAtD;AACH,SAFD,MAEO,IAAGJ,CAAC,CAACG,QAAF,CAAWE,OAAX,CAAmB,CAAnB,KAAyB,UAA5B,EAAuC;AAC1CL,UAAAA,CAAC,CAACC,aAAF,GAAkB,aAAaD,CAAC,CAACG,QAAF,CAAWC,MAAX,CAAkB,CAAlB,CAAb,GAAoC,sBAAtD;AACH,SAFM,MAEA;AACHJ,UAAAA,CAAC,CAACC,aAAF,GAAkB,aAAaD,CAAC,CAACG,QAAF,CAAWC,MAAX,CAAkB,CAAlB,CAAb,GAAoC,iBAAtD;AACH;;AACDJ,QAAAA,CAAC,CAACC,aAAF,IAAmBD,CAAC,CAACG,QAAF,CAAWG,OAAX,CAAmB,CAAnB,KAAuB,KAAvB,GAA6B,EAA7B,GAAgCN,CAAC,CAACG,QAAF,CAAWG,OAAX,CAAmB,CAAnB,IAAwB,GAA3E,CAR4B,CAQmD;;AAC/E,YAAGN,CAAC,CAACG,QAAF,CAAWE,OAAX,CAAmB,CAAnB,KAAyB,KAA5B,EAAkC;AAC9BL,UAAAA,CAAC,CAACC,aAAF,IAAmBD,CAAC,CAACG,QAAF,CAAWI,OAAX,CAAmB,CAAnB,CAAnB;AACH,SAFD,MAEO;AACHP,UAAAA,CAAC,CAACC,aAAF,IAAmBO,qBAAqB,CAACC,YAAY,CAACC,OAAb,CAAqBV,CAAC,CAACG,QAAF,CAAWI,OAAX,CAAmB,CAAnB,CAArB,CAAD,CAAxC;AACH;AACJ,OAdM,MAcA;AACHP,QAAAA,CAAC,CAACC,aAAF,GAAkBD,CAAC,CAACE,UAApB;AACH;;AAID,UAAIS,0BAA0B,GAAG,EAAjC;AACA,UAAIC,cAAc,GAAIZ,CAAC,CAACC,aAAF,CAAgBP,MAAhB,GAAuBiB,0BAA7C;AACAX,MAAAA,CAAC,CAACa,oBAAF,GAAyBC,iBAAiB,GAAGF,cAApB,GAAqC,EAA9D;AAEH;AAEJ;;AAEDb,EAAAA,OAAO,GAAG;AACNgB,IAAAA,IAAI;AACJC,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACAC,IAAAA,SAAS,CAACC,MAAD,EAASA,MAAT,CAAT;;AACA,QAAG,KAAKjC,OAAL,CAAaS,MAAb,GAAsB,CAAzB,EAA2B;AACvB,WAAKjB,SAAL,GAAiB,IAAjB;AACH,KAFD,MAEO;AACH,WAAKA,SAAL,GAAiB,KAAjB;AACH;;AACD,QAAI0C,IAAJ;AACA,QAAIC,IAAJ;;AAEA,QAAIC,UAAU,CAAC,KAAK1C,OAAN,CAAV,IAA4B,OAAhC,EAAyC;AACrCwC,MAAAA,IAAI,GAAGG,mBAAP;AACAF,MAAAA,IAAI,GAAG/C,eAAP;AACH,KAHD,MAGO,IAAIgD,UAAU,CAAC,KAAK1C,OAAN,CAAV,IAA4B,QAAhC,EAA0C;AAC7CwC,MAAAA,IAAI,GAAGI,sBAAP;AACAH,MAAAA,IAAI,GAAG,KAAK3C,SAAL,GAAiB+C,uBAAjB,GAAyCC,kBAAhD;AACH,KAHM,MAGA;AACHN,MAAAA,IAAI,GAAGG,mBAAP;AACAF,MAAAA,IAAI,GAAGM,gBAAP;AACH;;AAED,QAAG,CAAC,KAAKjD,SAAT,EAAmB;AACfkD,MAAAA,KAAK,CAACR,IAAD,EAAO,KAAKhD,CAAL,GAAS,CAAhB,EAAmB,KAAKD,CAAL,GAAS,EAA5B,EAAgC,GAAhC,EAAqC,GAArC,CAAL;AACH;;AACDyD,IAAAA,KAAK,CAACP,IAAD,EAAO,KAAKjD,CAAZ,EAAe,KAAKD,CAApB,EAAuB,KAAKE,CAA5B,EAA+B,KAAKG,CAApC,CAAL;AAEAwC,IAAAA,IAAI;AACJa,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAZ,IAAAA,IAAI,CAAC,GAAD,CAAJ;AACAa,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,IAAAA,MAAM,CAAC,CAAD,CAAN;;AAEA,QAAIT,UAAU,CAAC,KAAK1C,OAAN,CAAV,IAA4B,QAAhC,EAA0C;AACtCoD,MAAAA,IAAI,CAAC,KAAKjD,KAAN,EAAa,KAAKX,CAAL,GAAO,KAAKC,CAAL,GAAO,IAA3B,EAAiC,KAAKF,CAAL,GAAO,KAAKK,CAAL,GAAO,GAA/C,CAAJ;AACAwD,MAAAA,IAAI,CAAC,KAAKhD,SAAN,EAAiB,KAAKZ,CAAL,GAAO,KAAKC,CAAL,GAAO,GAA/B,EAAoC,KAAKF,CAAL,GAAO,KAAKK,CAAL,GAAO,GAAlD,CAAJ;AACH;;AAGDwD,IAAAA,IAAI,CAAC,KAAKlD,IAAN,EAAY,KAAKV,CAAL,GAAO,KAAKC,CAAL,GAAO,IAA1B,EAAgC,KAAKF,CAAL,GAAO,KAAKK,CAAL,GAAO,GAA9C,CAAJ;AAEAyD,IAAAA,GAAG;AAGHjB,IAAAA,IAAI;AACJC,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACAY,IAAAA,QAAQ,CAACd,iBAAD,CAAR;AACA,QAAImB,oBAAJ;;AACA,QAAG,KAAKxD,SAAR,EAAkB;AACdwD,MAAAA,oBAAoB,GAAG,KAAK/D,CAAL,GAAS,KAAKK,CAAL,GAAO,CAAhB,GAAoB,EAA3C;AACA2D,MAAAA,SAAS,CAAC,KAAK/D,CAAN,EAAS,KAAKD,CAAL,GAAS,KAAKK,CAAL,GAAO,CAAhB,GAAoB,EAA7B,CAAT;AACH,KAHD,MAGO;AACH0D,MAAAA,oBAAoB,GAAG,KAAK/D,CAAL,GAAU,EAAjC;AACAgE,MAAAA,SAAS,CAAC,KAAK/D,CAAN,EAAS,KAAKD,CAAL,GAAS,EAAlB,CAAT;AACH;;AAED,SAAKiB,sBAAL,GAA8B,KAA9B;AACA,SAAKD,cAAL,GAAsB,IAAtB;;AACA,SAAI,IAAIc,CAAR,IAAa,KAAKf,OAAlB,EAA0B;AAEtBgD,MAAAA,oBAAoB,IAAIjC,CAAC,CAACa,oBAAF,GAAuB,CAA/C;AACAqB,MAAAA,SAAS,CAAC,CAAD,EAAIlC,CAAC,CAACa,oBAAF,GAAuB,CAA3B,CAAT;;AAEA,UAAGsB,MAAM,GAAGF,oBAAoB,GAAGjC,CAAC,CAACa,oBAAF,GAAuB,CAAvD,IACCsB,MAAM,GAAGF,oBAAoB,GAAGjC,CAAC,CAACa,oBAAF,GAAuB,CADxD,IAECuB,MAAM,GAAG,KAAKjE,CAAL,GAAS6B,CAAC,CAACqC,mBAAF,GAAsB,CAFzC,IAGCD,MAAM,GAAG,KAAKjE,CAAL,GAAS6B,CAAC,CAACqC,mBAAF,GAAsB,CAH5C,EAG8C;AAE1C,aAAKlD,sBAAL,GAA8B,IAA9B;AAEA,aAAKD,cAAL,GAAsBc,CAAtB;AACA,aAAKd,cAAL,CAAoBf,CAApB,GAAwB,KAAKA,CAAL,GAAS6B,CAAC,CAACqC,mBAAF,GAAsB,CAAvD;AACA,aAAKnD,cAAL,CAAoBhB,CAApB,GAAwB+D,oBAAoB,GAAGjC,CAAC,CAACa,oBAAjD;AACAG,QAAAA,IAAI,CAAC,CAAD,EAAI,GAAJ,CAAJ;AACH,OAXD,MAWO;AACHA,QAAAA,IAAI,CAAC,CAAD,EAAI,EAAJ,CAAJ;AACH;;AAEDsB,MAAAA,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAOtC,CAAC,CAACqC,mBAAT,EAA8BrC,CAAC,CAACa,oBAAhC,EAAsD,CAAtD,EAAyD,CAAzD,CAAJ;AACAG,MAAAA,IAAI,CAAC,GAAD,EAAM,GAAN,CAAJ;AACAe,MAAAA,IAAI,CAAC/B,CAAC,CAACC,aAAH,EAAkB,CAAlB,EAAqB,CAArB,EAAwB5B,eAAe,CAACC,KAAhB,GAAsB,CAA9C,EAAiDD,eAAe,CAACG,MAAhB,GAAuB,CAAxE,CAAJ;AACAyD,MAAAA,oBAAoB,IAAIjC,CAAC,CAACa,oBAAF,GAAuB,CAAvB,GAAyB,CAAjD;AACAqB,MAAAA,SAAS,CAAC,CAAD,EAAIlC,CAAC,CAACa,oBAAF,GAAuB,CAAvB,GAAyB,CAA7B,CAAT;AAEH;;AACDmB,IAAAA,GAAG;AAGHjB,IAAAA,IAAI;;AAEJ,QAAGwB,YAAY,IAAI,IAAnB,EAAwB;AACpB,UAAGC,OAAO,IAAI,MAAd,EAAqB;AACjBC,QAAAA,KAAK,GAAG,KAAKtE,CAAL,GAAO,KAAKC,CAAL,GAAO,IAAtB;AACAsE,QAAAA,KAAK,GAAG,KAAKxE,CAAL,GAAO,KAAKK,CAAL,GAAO,GAAtB;AACH,OAHD,MAGO,IAAGiE,OAAO,IAAI,OAAd,EAAsB;AACzBC,QAAAA,KAAK,GAAG,KAAKtE,CAAL,GAAO,KAAKC,CAAL,GAAO,IAAtB;AACAsE,QAAAA,KAAK,GAAG,KAAKxE,CAAL,GAAO,KAAKK,CAAL,GAAO,GAAtB;AACH,OAHM,MAGA,IAAGiE,OAAO,IAAI,WAAd,EAA0B;AAC7BC,QAAAA,KAAK,GAAG,KAAKtE,CAAL,GAAO,KAAKC,CAAL,GAAO,GAAtB;AACAsE,QAAAA,KAAK,GAAG,KAAKxE,CAAL,GAAO,KAAKK,CAAL,GAAO,GAAtB;AACH;AACJ;;AAEDyD,IAAAA,GAAG;AACN;;AAGDW,EAAAA,UAAU,GAAG;AACT,WAAQP,MAAM,GAAG,KAAKjE,CAAL,GAAS,KAAKC,CAAL,GAAS,CAAlB,GAAsBwE,aAA/B,IACJR,MAAM,GAAG,KAAKjE,CAAL,GAAS,KAAKC,CAAL,GAAS,CAAlB,GAAsBwE,aAD3B,IAEJT,MAAM,GAAG,KAAKjE,CAAL,GAAS,KAAKK,CAAL,GAAS,CAAlB,GAAsBqE,aAF3B,IAGJT,MAAM,GAAG,KAAKjE,CAAL,GAAS,KAAKK,CAAL,GAAS,CAAlB,GAAsBqE,aAHnC;AAKH;;AACD9C,EAAAA,kBAAkB,GAAG;AACjB,QAAIuB,UAAU,CAAC,KAAK1C,OAAN,CAAV,IAA4B,QAAhC,EAA0C;AACtC,WAAKU,gBAAL,GAAwBwD,IAAI,CAACT,MAAD,EAASD,MAAT,EAAiB,KAAKhE,CAAL,GAAO,KAAKC,CAAL,GAAO,IAA/B,EAAqC,KAAKF,CAAL,GAAO,KAAKK,CAAL,GAAO,GAAnD,CAAJ,GAA8D,EAAtF;AACA,WAAKe,oBAAL,GAA4BuD,IAAI,CAACT,MAAD,EAASD,MAAT,EAAiB,KAAKhE,CAAL,GAAO,KAAKC,CAAL,GAAO,GAA/B,EAAoC,KAAKF,CAAL,GAAO,KAAKK,CAAL,GAAO,GAAlD,CAAJ,GAA6D,EAAzF;AACH;;AACD,SAAKa,eAAL,GAAuByD,IAAI,CAACT,MAAD,EAASD,MAAT,EAAiB,KAAKhE,CAAL,GAAO,KAAKC,CAAL,GAAO,IAA/B,EAAqC,KAAKF,CAAL,GAAO,KAAKK,CAAL,GAAO,GAAnD,CAAJ,GAA8D,EAArF;AACH;;AAhOM","sourcesContent":["\nclass Card {\n    constructor(card_id, card_experiment) {\n        this.y = 0;\n        this.x = 0;\n        this.w = blank_spell_img.width * 0.75;\n        this.h = blank_spell_img.height * 0.75;\n        this.oversized = false;\n\n\n        this.class = \"mage\";\n        this.type_id = 1;\n        this.card_id = card_id;\n        this.card_experiment = card_experiment;\n\n        this.creature_type = \"\";\n        this.mana = 5;\n        this.power = 5;\n        this.toughness = 5;\n        this.keywords = [];\n        this.effects = [];\n\n        this.hovered_effect = null;\n        this.mouse_over_card_effect = false;\n        this.mouse_over_mana = false;\n        this.mouse_over_power = false;\n        this.mouse_over_toughness = false;\n\n\n    }\n\n    resized() {\n        this.x = map(this.card_id + 1, 0, cards.length, w_padding, width - w_padding)\n        this.y = height / 2;\n    }\n\n    run() {\n        this.generate_effect_text();\n        this.check_mouse_hovers();\n        this.display();\n    }\n\n    generate_effect_text(){\n        for (let e of this.effects) {\n            e.effect_string = \"\";\n            if(e.label_name == \"Keyword\" || e.label_name == \"Creature type\"){\n                e.effect_string = e.settings.params[1];\n            } else if(e.label_name == \"Deal damage\"){\n                if(e.settings.methods[1] == \"randomly\"){\n                    e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n                } else if(e.settings.methods[1] == \"targeted\"){\n                    e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n                } else {\n                    e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \"\n                }\n\n                e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n                if(e.settings.methods[1] == \"all\"){\n                    e.effect_string += e.settings.targets[1]\n                } else {\n                    e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n                }\n            } else if(e.label_name ==\"Destroy\"){\n                if(e.settings.methods[1] == \"randomly\"){\n                    e.effect_string = \"Randomly destroy a \";\n                } else if(e.settings.methods[1] == \"targeted\"){\n                    e.effect_string = \"Destroy a target \";\n                } else {\n                    e.effect_string = \"Destroy all \"\n                }\n                e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n                if(e.settings.methods[1] == \"all\"){\n                    e.effect_string += e.settings.targets[1]\n                } else {\n                    e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n                }\n            } else if(e.label_name ==\"Heal\"){\n                if(e.settings.methods[1] == \"randomly\"){\n                    e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n                } else if(e.settings.methods[1] == \"targeted\"){\n                    e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n                } else {\n                    e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n                }\n                e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n                if(e.settings.methods[1] == \"all\"){\n                    e.effect_string += e.settings.targets[1]\n                } else {\n                    e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n                }                \n            } else {\n                e.effect_string = e.label_name\n            }\n\n            \n\n            let estimatedCharactersPerLine = 20;\n            let estimatedLines =  e.effect_string.length/estimatedCharactersPerLine;\n            e.effect_string_height = smaller_font_size * estimatedLines + 30;\n            \n        }\n\n    }\n\n    display() {\n        push();\n        fill(0);\n        textAlign(CENTER, CENTER)\n        if(this.effects.length > 2){\n            this.oversized = true;\n        } else {\n            this.oversized = false;\n        }\n        let flav;\n        let forg;\n\n        if (card_types[this.type_id] == \"spell\") {\n            flav = masked_flavour_rect;\n            forg = blank_spell_img;\n        } else if (card_types[this.type_id] == \"minion\") {\n            flav = masked_flavour_ellipse;\n            forg = this.oversized ? full_blank_creature_img:blank_creature_img;\n        } else {\n            flav = masked_flavour_rect;\n            forg = blank_weapon_img;\n        }\n\n        if(!this.oversized){\n            image(flav, this.x + 5, this.y - 50, 300, 300)\n        }\n        image(forg, this.x, this.y, this.w, this.h);\n\n        push();\n        textSize(60);\n        fill(255);\n        strokeWeight(3);\n        stroke(0);\n\n        if (card_types[this.type_id] == \"minion\") {\n            text(this.power, this.x-this.w/2.99, this.y+this.h/2.8)\n            text(this.toughness, this.x+this.w/2.6, this.y+this.h/2.8)\n        }\n\n      \n        text(this.mana, this.x-this.w/2.99, this.y-this.h/2.3)\n       \n        pop();\n\n       \n        push();\n        fill(0);\n        textSize(smaller_font_size);\n        let translation_offset_y;\n        if(this.oversized){\n            translation_offset_y = this.y - this.h/2 + 80;\n            translate(this.x, this.y - this.h/2 + 80);\n        } else {\n            translation_offset_y = this.y  + 50;\n            translate(this.x, this.y + 50);\n        }\n        \n        this.mouse_over_card_effect = false;\n        this.hovered_effect = null;\n        for(let e of this.effects){\n            \n            translation_offset_y += e.effect_string_height/2;\n            translate(0, e.effect_string_height/2)\n\n            if(mouseY > translation_offset_y - e.effect_string_height/2 &&\n                mouseY < translation_offset_y + e.effect_string_height/2 &&\n                mouseX > this.x - e.effect_string_width/2 &&\n                mouseX < this.x + e.effect_string_width/2){\n\n                this.mouse_over_card_effect = true;\n\n                this.hovered_effect = e;\n                this.hovered_effect.x = this.x - e.effect_string_width/2;\n                this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n                fill(0, 100);\n            } else {\n                fill(0, 50)\n            }\n\n            rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4)\n            fill(255, 255)\n            text(e.effect_string, 0, 0, blank_spell_img.width/2, blank_spell_img.height/2)\n            translation_offset_y += e.effect_string_height/2+5;\n            translate(0, e.effect_string_height/2+5)\n\n        }\n        pop();\n\n\n        push();\n\n        if(editing_card == this){\n            if(editing == \"mana\"){\n                editX = this.x-this.w/2.99;\n                editY = this.y-this.h/2.3;\n            } else if(editing == \"power\"){\n                editX = this.x-this.w/2.99;\n                editY = this.y+this.h/2.8;\n            } else if(editing == \"toughness\"){\n                editX = this.x+this.w/2.6;\n                editY = this.y+this.h/2.8;\n            } \n        }\n\n        pop();\n    }\n\n\n    mouseInImg() {\n        return (mouseX > this.x - this.w / 2 - mouse_padding &&\n            mouseX < this.x + this.w / 2 + mouse_padding &&\n            mouseY > this.y - this.h / 2 - mouse_padding &&\n            mouseY < this.y + this.h / 2 + mouse_padding);\n\n    }\n    check_mouse_hovers() {\n        if (card_types[this.type_id] == \"minion\") {\n            this.mouse_over_power = dist(mouseX, mouseY, this.x-this.w/2.99, this.y+this.h/2.8) < 50\n            this.mouse_over_toughness = dist(mouseX, mouseY, this.x+this.w/2.6, this.y+this.h/2.8) < 50\n        }\n        this.mouse_over_mana = dist(mouseX, mouseY, this.x-this.w/2.99, this.y-this.h/2.3) < 50\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}