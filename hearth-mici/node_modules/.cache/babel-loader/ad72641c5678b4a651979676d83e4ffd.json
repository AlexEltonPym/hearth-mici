{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Message = exports.ScheduleBuilder = exports._scheduleWithOptions = exports.schedule = exports.TopicBuilder = exports._topicWithOptions = exports.topic = exports.service = exports.provider = void 0;\n\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\n\n\nexports.provider = 'google.pubsub';\n/** @hidden */\n\nexports.service = 'pubsub.googleapis.com';\n/**\n * Registers a Cloud Function triggered when a Google Cloud Pub/Sub message\n * is sent to a specified topic.\n *\n * @param topic The Pub/Sub topic to watch for message events.\n * @return Pub/Sub topic builder interface.\n */\n\nfunction topic(topic) {\n  return _topicWithOptions(topic, {});\n}\n\nexports.topic = topic;\n/** @hidden */\n\nfunction _topicWithOptions(topic, options) {\n  if (topic.indexOf('/') !== -1) {\n    throw new Error('Topic name may not have a /');\n  }\n\n  return new TopicBuilder(() => {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return `projects/${process.env.GCLOUD_PROJECT}/topics/${topic}`;\n  }, options);\n}\n\nexports._topicWithOptions = _topicWithOptions;\n/**\n * The Google Cloud Pub/Sub topic builder.\n *\n * Access via [`functions.pubsub.topic()`](providers_pubsub_.html#topic).\n */\n\nclass TopicBuilder {\n  /** @hidden */\n  constructor(triggerResource, options) {\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /**\n   * Event handler that fires every time a Cloud Pub/Sub message is\n   * published.\n   *\n   * @param handler Event handler that runs every time a Cloud Pub/Sub message\n   *   is published.\n   * @return A Cloud Function that you can export and deploy.\n   */\n\n\n  onPublish(handler) {\n    return cloud_functions_1.makeCloudFunction({\n      handler,\n      provider: exports.provider,\n      service: exports.service,\n      triggerResource: this.triggerResource,\n      eventType: 'topic.publish',\n      dataConstructor: raw => new Message(raw.data),\n      options: this.options\n    });\n  }\n\n}\n\nexports.TopicBuilder = TopicBuilder;\n/**\n * Registers a Cloud Function to run at specified times.\n *\n * @param schedule The schedule, in Unix Crontab or AppEngine syntax.\n * @return ScheduleBuilder interface.\n */\n\nfunction schedule(schedule) {\n  return _scheduleWithOptions(schedule, {});\n}\n\nexports.schedule = schedule;\n/** @hidden */\n\nfunction _scheduleWithOptions(schedule, options) {\n  const triggerResource = () => {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    } // The CLI will append the correct topic name based on region and function name\n\n\n    return `projects/${process.env.GCLOUD_PROJECT}/topics`;\n  };\n\n  return new ScheduleBuilder(triggerResource, { ...options,\n    schedule: {\n      schedule\n    }\n  });\n}\n\nexports._scheduleWithOptions = _scheduleWithOptions;\n/**\n * The builder for scheduled functions, which are powered by\n * Google Pub/Sub and Cloud Scheduler. Describes the Cloud Scheduler\n * job that is deployed to trigger a scheduled function at the provided\n * frequency. For more information, see\n * [Schedule functions](/docs/functions/schedule-functions).\n *\n * Access via [`functions.pubsub.schedule()`](providers_pubsub_.html#schedule).\n */\n\nclass ScheduleBuilder {\n  /** @hidden */\n  constructor(triggerResource, options) {\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n\n  retryConfig(config) {\n    this.options.schedule.retryConfig = config;\n    return this;\n  }\n\n  timeZone(timeZone) {\n    this.options.schedule.timeZone = timeZone;\n    return this;\n  }\n  /**\n   * Event handler for scheduled functions. Triggered whenever the associated\n   * scheduler job sends a Pub/Sub message.\n   *\n   * @param handler Handler that fires whenever the associated\n   *   scheduler job sends a Pub/Sub message.\n   * @return A Cloud Function that you can export and deploy.\n   */\n\n\n  onRun(handler) {\n    const cloudFunction = cloud_functions_1.makeCloudFunction({\n      contextOnlyHandler: handler,\n      provider: exports.provider,\n      service: exports.service,\n      triggerResource: this.triggerResource,\n      eventType: 'topic.publish',\n      options: this.options,\n      labels: {\n        'deployment-scheduled': 'true'\n      }\n    });\n    return cloudFunction;\n  }\n\n}\n\nexports.ScheduleBuilder = ScheduleBuilder;\n/**\n * Interface representing a Google Cloud Pub/Sub message.\n *\n * @param data Payload of a Pub/Sub message.\n */\n\nclass Message {\n  constructor(data) {\n    [this.data, this.attributes, this._json] = [data.data, data.attributes || {}, data.json];\n  }\n  /**\n   * The JSON data payload of this message object, if any.\n   */\n\n\n  get json() {\n    if (typeof this._json === 'undefined') {\n      this._json = JSON.parse(new Buffer(this.data, 'base64').toString('utf8'));\n    }\n\n    return this._json;\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @return A JSON-serializable representation of this object.\n   */\n\n\n  toJSON() {\n    return {\n      data: this.data,\n      attributes: this.attributes\n    };\n  }\n\n}\n\nexports.Message = Message;","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/node_modules/firebase-functions/lib/providers/pubsub.js"],"names":["Object","defineProperty","exports","value","Message","ScheduleBuilder","_scheduleWithOptions","schedule","TopicBuilder","_topicWithOptions","topic","service","provider","cloud_functions_1","require","options","indexOf","Error","process","env","GCLOUD_PROJECT","constructor","triggerResource","onPublish","handler","makeCloudFunction","eventType","dataConstructor","raw","data","retryConfig","config","timeZone","onRun","cloudFunction","contextOnlyHandler","labels","attributes","_json","json","JSON","parse","Buffer","toString","toJSON"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Message = exports.ScheduleBuilder = exports._scheduleWithOptions = exports.schedule = exports.TopicBuilder = exports._topicWithOptions = exports.topic = exports.service = exports.provider = void 0;\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\nexports.provider = 'google.pubsub';\n/** @hidden */\nexports.service = 'pubsub.googleapis.com';\n/**\n * Registers a Cloud Function triggered when a Google Cloud Pub/Sub message\n * is sent to a specified topic.\n *\n * @param topic The Pub/Sub topic to watch for message events.\n * @return Pub/Sub topic builder interface.\n */\nfunction topic(topic) {\n    return _topicWithOptions(topic, {});\n}\nexports.topic = topic;\n/** @hidden */\nfunction _topicWithOptions(topic, options) {\n    if (topic.indexOf('/') !== -1) {\n        throw new Error('Topic name may not have a /');\n    }\n    return new TopicBuilder(() => {\n        if (!process.env.GCLOUD_PROJECT) {\n            throw new Error('process.env.GCLOUD_PROJECT is not set.');\n        }\n        return `projects/${process.env.GCLOUD_PROJECT}/topics/${topic}`;\n    }, options);\n}\nexports._topicWithOptions = _topicWithOptions;\n/**\n * The Google Cloud Pub/Sub topic builder.\n *\n * Access via [`functions.pubsub.topic()`](providers_pubsub_.html#topic).\n */\nclass TopicBuilder {\n    /** @hidden */\n    constructor(triggerResource, options) {\n        this.triggerResource = triggerResource;\n        this.options = options;\n    }\n    /**\n     * Event handler that fires every time a Cloud Pub/Sub message is\n     * published.\n     *\n     * @param handler Event handler that runs every time a Cloud Pub/Sub message\n     *   is published.\n     * @return A Cloud Function that you can export and deploy.\n     */\n    onPublish(handler) {\n        return cloud_functions_1.makeCloudFunction({\n            handler,\n            provider: exports.provider,\n            service: exports.service,\n            triggerResource: this.triggerResource,\n            eventType: 'topic.publish',\n            dataConstructor: (raw) => new Message(raw.data),\n            options: this.options,\n        });\n    }\n}\nexports.TopicBuilder = TopicBuilder;\n/**\n * Registers a Cloud Function to run at specified times.\n *\n * @param schedule The schedule, in Unix Crontab or AppEngine syntax.\n * @return ScheduleBuilder interface.\n */\nfunction schedule(schedule) {\n    return _scheduleWithOptions(schedule, {});\n}\nexports.schedule = schedule;\n/** @hidden */\nfunction _scheduleWithOptions(schedule, options) {\n    const triggerResource = () => {\n        if (!process.env.GCLOUD_PROJECT) {\n            throw new Error('process.env.GCLOUD_PROJECT is not set.');\n        }\n        // The CLI will append the correct topic name based on region and function name\n        return `projects/${process.env.GCLOUD_PROJECT}/topics`;\n    };\n    return new ScheduleBuilder(triggerResource, {\n        ...options,\n        schedule: { schedule },\n    });\n}\nexports._scheduleWithOptions = _scheduleWithOptions;\n/**\n * The builder for scheduled functions, which are powered by\n * Google Pub/Sub and Cloud Scheduler. Describes the Cloud Scheduler\n * job that is deployed to trigger a scheduled function at the provided\n * frequency. For more information, see\n * [Schedule functions](/docs/functions/schedule-functions).\n *\n * Access via [`functions.pubsub.schedule()`](providers_pubsub_.html#schedule).\n */\nclass ScheduleBuilder {\n    /** @hidden */\n    constructor(triggerResource, options) {\n        this.triggerResource = triggerResource;\n        this.options = options;\n    }\n    retryConfig(config) {\n        this.options.schedule.retryConfig = config;\n        return this;\n    }\n    timeZone(timeZone) {\n        this.options.schedule.timeZone = timeZone;\n        return this;\n    }\n    /**\n     * Event handler for scheduled functions. Triggered whenever the associated\n     * scheduler job sends a Pub/Sub message.\n     *\n     * @param handler Handler that fires whenever the associated\n     *   scheduler job sends a Pub/Sub message.\n     * @return A Cloud Function that you can export and deploy.\n     */\n    onRun(handler) {\n        const cloudFunction = cloud_functions_1.makeCloudFunction({\n            contextOnlyHandler: handler,\n            provider: exports.provider,\n            service: exports.service,\n            triggerResource: this.triggerResource,\n            eventType: 'topic.publish',\n            options: this.options,\n            labels: { 'deployment-scheduled': 'true' },\n        });\n        return cloudFunction;\n    }\n}\nexports.ScheduleBuilder = ScheduleBuilder;\n/**\n * Interface representing a Google Cloud Pub/Sub message.\n *\n * @param data Payload of a Pub/Sub message.\n */\nclass Message {\n    constructor(data) {\n        [this.data, this.attributes, this._json] = [\n            data.data,\n            data.attributes || {},\n            data.json,\n        ];\n    }\n    /**\n     * The JSON data payload of this message object, if any.\n     */\n    get json() {\n        if (typeof this._json === 'undefined') {\n            this._json = JSON.parse(new Buffer(this.data, 'base64').toString('utf8'));\n        }\n        return this._json;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @return A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return {\n            data: this.data,\n            attributes: this.attributes,\n        };\n    }\n}\nexports.Message = Message;\n"]},"metadata":{},"sourceType":"script"}