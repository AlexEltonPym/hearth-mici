{"ast":null,"code":"var _jsxFileName = \"/Users/aep/phd/hearth-mici/src/App.js\";\nimport React, { Component } from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport './App.css';\n\nfunction importAll(r) {\n  return r.keys().map(r);\n}\n\nconst images = importAll(require.context('./cards', false, /\\.(png|jpe?g|svg)$/));\nconst blanks = importAll(require.context('./blankCards', false, /\\.(png|jpe?g|svg)$/));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keywords: ['Taunt', 'Lifelink', 'Charge']\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, \"Please check out the available cards:\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '0 10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, ['neutral', 'mage', 'warrior'].map(toDisplay => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: toDisplay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"h2\",\n        style: {\n          paddingTop: '100px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, toDisplay), /*#__PURE__*/React.createElement(Grid, {\n        key: toDisplay,\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, images.reduce(function (result, i) {\n        if (i.includes(toDisplay)) {\n          result.push( /*#__PURE__*/React.createElement(Grid, {\n            key: i,\n            item: true,\n            xs: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: i,\n            height: 300,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }\n          })));\n        }\n\n        return result;\n      }, [])));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"Now it is time to build your own\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      style: {\n        border: \"none\",\n        width: \"100%\",\n        height: \"50vh\",\n        position: \"absolute\",\n        top: \"0px\",\n        left: \"0px\",\n        zIndex: \"0\"\n      } //this code wraps around the script, this is the place to do sneaky variable replacements or dropbox shenanigans\n      //todo: add these script src's to storyblok\n      //todo: more security here\n      ,\n      srcDoc: `\n                  <head>\n                    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.10.2/p5.min.js\"></script>\n                   </head>\n                  <body style=\"\n                    margin: 0; \n                    padding: 0;\n                    height: 100%;\n                    overflow: hidden;\n                    width: 100%;\n                    position: fixed;\">      \n                  <script> \n                  // FROM PROCESS COMPENDIUM\n\n// These are interpretations of the behaviours and forms shown in process compendium\n// Ported to P5.js\n\nlet circleNum = 35;\nlet radiusMin = 20;\nlet radiusMAx = 50;\nlet currentAngle;\n\nlet circles = [];\n\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  background(255);\n\n  for (let i = 0; i < circleNum; i++) {\n    circles[i] = new Circle(random(width), random(height), random(radiusMin, radiusMAx));\n  }\n\tcurrentAngle = PI*2/36;\n  strokeWeight(0.5);\n  \n\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n  circles = [];\n\n  for (let i = 0; i < circleNum; i++) {\n    circles[i] = new Circle(random(width), random(height), random(radiusMin, radiusMAx));\n  }\n  \n}\n\n\nfunction draw() {\n\n \tfor (let i = 0; i < circles.length; i++) {\n    circles[i].update();\n  }\n  \n}\n\nclass Circle {\n  \n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.heading = random(PI*2);\n    this.speed = 1;\n  }\n\n  update() {\n    this.behaviour1();\n    // this.behaviour2();\n    this.behaviour3();\n    // this.behaviour4();\n\t\tthis.behaviour5();\n\t\t// this.behaviour6();\n\t\t// this.behaviour7();\n\n\t\t// this.debug();\n\t\t// this.form1();\n\t\tthis.form2();\n  }\n\n\tdebug() {\n    stroke(0);\n\t\tellipseMode(RADIUS);\n\n    push();\n    translate(this.x, this.y);\n    rotate(this.heading);\n\t\tnoFill();\n\n    ellipse(0, 0, this.radius, this.radius);\n\n\t\ttext(this.emoji, 0, 0);\n\n    line(0, 0, this.radius, 0);\n    pop();\n\n    stroke(192, 0, 0, 255);\n\n    for (let i = 0; i < circles.length; i++) {\n      if (this.touching(circles[i])) {\n        line(this.x, this.y, circles[i].x, circles[i].y);\n      }\n    }\n  }\n\n  behaviour1() {\n    // Constant linear motion\n  \tlet dx = this.speed * cos(this.heading);\n    let dy = this.speed * sin(this.heading);\n    this.x += dx;\n    this.y += dy;\n  }\n\n  behaviour2() {\n    // Constrain to surface\n    if (this.x < this.radius) this.x = this.radius;\n    if (this.y < this.radius) this.y = this.radius;\n    if (this.x > width - this.radius) this.x = width - this.radius;\n    if (this.y > height - this.radius) this.y = height - this.radius;\n  }\n\n  behaviour3() {\n    // While touching another, change direction\n    for (let i = 0; i < circles.length; i++) {\n      if (circles[i] != this) {\n        if (this.touching(circles[i])) {\n          this.heading += random(-currentAngle, currentAngle);\n        }\n      }\n    }\n  }\n\n  behaviour4() {\n    // While touching another, move away from its centre\n    for (let i = 0; i < circles; i++) {\n      if (circles[i] != this) {\n        if (touching(circles[i])) {\n\n          let d = distance(circles[i]);\n          let dx = (circles[i].x - this.x)/d;\n          let dy = (circles[i].y - this.y)/d;\n          this.x -= this.speed * dx;\n          this.y -= this.speed * dy;\n        }\n      }\n    }\n  }\n\n\tbehaviour5() {\n\t\t// Enter from the opposite edge after moving off the surface\n\t\tif (this.x > width + this.radius) this.x = -this.radius; //super simple if statements dont need a new block {  }\n\t\tif (this.x < -this.radius) this.x = width + this.radius;\n\t\tif (this.y > height + this.radius) this.y = -this.radius;\n\t\tif (this.y < -this.radius) this.y = height + this.radius;\n\t}\n\n\tbehaviour6() {\n\t// Orient toward the direction of an Element that is touching\n\t\tfor (let i = 0; i < circles.length; i++) {\n\t\t\t// If a circle is not this one (not itself)\n\t\t\tif (circles[i] != this) {\n\t\t\t\t// If the two circles are touching\n\t\t\t\tif (this.touching(circles[i])) {\n\t\t\t\t\tlet other = circles[i];\n\t\t\t\t\t// Calculate the direction towards the other circle using the atan2() function\n\t\t\t\t\tlet direction = atan2(other.y - y, other.x - x);\n\t\t\t\t\t// Calculate the difference between the current heading and the direction towards the other element\n\t\t\t\t\tlet delta = direction - this.heading;\n\t\t\t\t\t// Check to see which way would be shorter to turn\n\t\t\t\t\tif (delta > PI) delta -= TWO_PI;\n\t\t\t\t\tif (delta < -PI) delta += TWO_PI;\n\t\t\t\t\t// Update the heading by moving 1% of the way towards the other element\n\t\t\t\t\tthis.heading += delta * 0.01;\n\t\t\t\t}\n\t\t\t}\n\t  }\n\t}\n\n\tbehaviour7() {\n\t// Deviate from the current direction\n\t\tif(random(1) < 0.5) {\n            this.heading += random(-currentAngle, currentAngle);\n        }\n      }\n    \n\tform1() {\n\n\t\tfor (let i = 0; i < circles.length; i++) {\n\n      if (this.touching(circles[i])) {\n\t\t\t\t// Make sure that cirlces are not being draw on top of eachother\n\t\t\t\tif(this.distance(circles[i]) > 0) {\n            // Calculate the grey value using the map function based on the distance between the circles\n            stroke(map(this.distance(circles[i]), 0, this.radius + circles[i].radius, 0, 255));\n          // Draw a line between the centres of the circles\n          line(this.x, this.y, circles[i].x, circles[i].y);\n          }\n        }\n      }\n    }\n  \n\tform2() {\n\n            noFill();\n\t\tfor(let i = 0; i < circles.length; i++) {\n\t\t\tif(this.touching(circles[i])) {\n\t\t\t\tif(this.distance(circles[i]) > 0) {\n\n            // Calculate the grey value using the map function based on the distance between the circles\n            stroke(map(this.distance(circles[i]), 0, this.radius + circles[i].radius, 0, 255), 50);\n\n        // find the midpoint between the circle objects that interect\n        let x = lerp(this.x, circles[i].x, 0.5);\n        let y = lerp(this.y, circles[i].y, 0.5);\n          // Draw an ellipse with the radius of the distance between circles\n        ellipse(x, y, this.distance(circles[i]), this.distance(circles[i]));\n      }\n    }\n  }\n}\n\n  touching(other) {\n\t\t// \tDetect if circles are touching\n    return (this.distance(other) < this.radius + other.radius);\n        }\n      \n  distance(other) {\n\t\t// \tcalculate the distance between circles\n    return dist(this.x, this.y, other.x, other.y);\n        }\n      }\n      \n            </script>\n                  </body>`,\n      width: \"100%\",\n      sandbox: \"allow-scripts\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/src/App.js"],"names":["React","Component","Typography","Grid","importAll","r","keys","map","images","require","context","blanks","App","constructor","props","state","keywords","render","padding","toDisplay","paddingTop","reduce","result","i","includes","push","border","width","height","position","top","left","zIndex"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { Typography, Grid } from '@material-ui/core'\n\n\nimport './App.css';\n\n\n\nfunction importAll(r) {\n  return r.keys().map(r);\n}\n\nconst images = importAll(require.context('./cards', false, /\\.(png|jpe?g|svg)$/));\nconst blanks = importAll(require.context('./blankCards', false, /\\.(png|jpe?g|svg)$/));\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      keywords: ['Taunt', 'Lifelink', 'Charge'],\n    };\n  }\n\n\n  render() {\n\n  \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Please check out the available cards:\n        </p>\n        </header>\n\n        <div style={{ padding: '0 10%' }}>\n          {['neutral', 'mage', 'warrior'].map((toDisplay) => {\n            return (\n              <div key={toDisplay}>\n                <Typography variant=\"h2\" style={{ paddingTop: '100px' }} >{toDisplay}</Typography>\n                <Grid key={toDisplay} container>\n                  {\n\n                    images.reduce(function (result, i) {\n                      if (i.includes(toDisplay)) {\n                        result.push((\n                          <Grid key={i} item xs>\n                            <img src={i} height={300} />\n                          </Grid>\n                        ));\n                      }\n                      return result;\n                    }, [])\n\n                  }\n\n                </Grid>\n              </div>\n            )\n          })}\n        </div>\n\n        <div className=\"App-header\">\n          <p>\n            Now it is time to build your own\n        </p>\n        </div>\n\n        {/* <div style={{ padding: '0 10%' }}>\n          <Grid style={{ paddingTop: '100px' }} container>\n            {blanks.map((b) => {\n              return (\n                <Grid key={b} item xs={12} sm={12} md={6} xl={12}>\n                  {b.includes('creature') && <img src={b} style={{ height: 400 }} />}\n                </Grid>\n              );\n            })}\n          </Grid>\n        </div> */}\n\n        <div>\n        <iframe\n            style={{\n              border: \"none\",\n              width: \"100%\",\n              height: \"50vh\",\n              position: \"absolute\",\n              top: \"0px\",\n              left: \"0px\",\n              zIndex: \"0\"\n            }}\n            //this code wraps around the script, this is the place to do sneaky variable replacements or dropbox shenanigans\n            //todo: add these script src's to storyblok\n            //todo: more security here\n            srcDoc={`\n                  <head>\n                    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.10.2/p5.min.js\"></script>\n                   </head>\n                  <body style=\"\n                    margin: 0; \n                    padding: 0;\n                    height: 100%;\n                    overflow: hidden;\n                    width: 100%;\n                    position: fixed;\">      \n                  <script> \n                  // FROM PROCESS COMPENDIUM\n\n// These are interpretations of the behaviours and forms shown in process compendium\n// Ported to P5.js\n\nlet circleNum = 35;\nlet radiusMin = 20;\nlet radiusMAx = 50;\nlet currentAngle;\n\nlet circles = [];\n\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  background(255);\n\n  for (let i = 0; i < circleNum; i++) {\n    circles[i] = new Circle(random(width), random(height), random(radiusMin, radiusMAx));\n  }\n\tcurrentAngle = PI*2/36;\n  strokeWeight(0.5);\n  \n\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n  circles = [];\n\n  for (let i = 0; i < circleNum; i++) {\n    circles[i] = new Circle(random(width), random(height), random(radiusMin, radiusMAx));\n  }\n  \n}\n\n\nfunction draw() {\n\n \tfor (let i = 0; i < circles.length; i++) {\n    circles[i].update();\n  }\n  \n}\n\nclass Circle {\n  \n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.heading = random(PI*2);\n    this.speed = 1;\n  }\n\n  update() {\n    this.behaviour1();\n    // this.behaviour2();\n    this.behaviour3();\n    // this.behaviour4();\n\t\tthis.behaviour5();\n\t\t// this.behaviour6();\n\t\t// this.behaviour7();\n\n\t\t// this.debug();\n\t\t// this.form1();\n\t\tthis.form2();\n  }\n\n\tdebug() {\n    stroke(0);\n\t\tellipseMode(RADIUS);\n\n    push();\n    translate(this.x, this.y);\n    rotate(this.heading);\n\t\tnoFill();\n\n    ellipse(0, 0, this.radius, this.radius);\n\n\t\ttext(this.emoji, 0, 0);\n\n    line(0, 0, this.radius, 0);\n    pop();\n\n    stroke(192, 0, 0, 255);\n\n    for (let i = 0; i < circles.length; i++) {\n      if (this.touching(circles[i])) {\n        line(this.x, this.y, circles[i].x, circles[i].y);\n      }\n    }\n  }\n\n  behaviour1() {\n    // Constant linear motion\n  \tlet dx = this.speed * cos(this.heading);\n    let dy = this.speed * sin(this.heading);\n    this.x += dx;\n    this.y += dy;\n  }\n\n  behaviour2() {\n    // Constrain to surface\n    if (this.x < this.radius) this.x = this.radius;\n    if (this.y < this.radius) this.y = this.radius;\n    if (this.x > width - this.radius) this.x = width - this.radius;\n    if (this.y > height - this.radius) this.y = height - this.radius;\n  }\n\n  behaviour3() {\n    // While touching another, change direction\n    for (let i = 0; i < circles.length; i++) {\n      if (circles[i] != this) {\n        if (this.touching(circles[i])) {\n          this.heading += random(-currentAngle, currentAngle);\n        }\n      }\n    }\n  }\n\n  behaviour4() {\n    // While touching another, move away from its centre\n    for (let i = 0; i < circles; i++) {\n      if (circles[i] != this) {\n        if (touching(circles[i])) {\n\n          let d = distance(circles[i]);\n          let dx = (circles[i].x - this.x)/d;\n          let dy = (circles[i].y - this.y)/d;\n          this.x -= this.speed * dx;\n          this.y -= this.speed * dy;\n        }\n      }\n    }\n  }\n\n\tbehaviour5() {\n\t\t// Enter from the opposite edge after moving off the surface\n\t\tif (this.x > width + this.radius) this.x = -this.radius; //super simple if statements dont need a new block {  }\n\t\tif (this.x < -this.radius) this.x = width + this.radius;\n\t\tif (this.y > height + this.radius) this.y = -this.radius;\n\t\tif (this.y < -this.radius) this.y = height + this.radius;\n\t}\n\n\tbehaviour6() {\n\t// Orient toward the direction of an Element that is touching\n\t\tfor (let i = 0; i < circles.length; i++) {\n\t\t\t// If a circle is not this one (not itself)\n\t\t\tif (circles[i] != this) {\n\t\t\t\t// If the two circles are touching\n\t\t\t\tif (this.touching(circles[i])) {\n\t\t\t\t\tlet other = circles[i];\n\t\t\t\t\t// Calculate the direction towards the other circle using the atan2() function\n\t\t\t\t\tlet direction = atan2(other.y - y, other.x - x);\n\t\t\t\t\t// Calculate the difference between the current heading and the direction towards the other element\n\t\t\t\t\tlet delta = direction - this.heading;\n\t\t\t\t\t// Check to see which way would be shorter to turn\n\t\t\t\t\tif (delta > PI) delta -= TWO_PI;\n\t\t\t\t\tif (delta < -PI) delta += TWO_PI;\n\t\t\t\t\t// Update the heading by moving 1% of the way towards the other element\n\t\t\t\t\tthis.heading += delta * 0.01;\n\t\t\t\t}\n\t\t\t}\n\t  }\n\t}\n\n\tbehaviour7() {\n\t// Deviate from the current direction\n\t\tif(random(1) < 0.5) {\n            this.heading += random(-currentAngle, currentAngle);\n        }\n      }\n    \n\tform1() {\n\n\t\tfor (let i = 0; i < circles.length; i++) {\n\n      if (this.touching(circles[i])) {\n\t\t\t\t// Make sure that cirlces are not being draw on top of eachother\n\t\t\t\tif(this.distance(circles[i]) > 0) {\n            // Calculate the grey value using the map function based on the distance between the circles\n            stroke(map(this.distance(circles[i]), 0, this.radius + circles[i].radius, 0, 255));\n          // Draw a line between the centres of the circles\n          line(this.x, this.y, circles[i].x, circles[i].y);\n          }\n        }\n      }\n    }\n  \n\tform2() {\n\n            noFill();\n\t\tfor(let i = 0; i < circles.length; i++) {\n\t\t\tif(this.touching(circles[i])) {\n\t\t\t\tif(this.distance(circles[i]) > 0) {\n\n            // Calculate the grey value using the map function based on the distance between the circles\n            stroke(map(this.distance(circles[i]), 0, this.radius + circles[i].radius, 0, 255), 50);\n\n        // find the midpoint between the circle objects that interect\n        let x = lerp(this.x, circles[i].x, 0.5);\n        let y = lerp(this.y, circles[i].y, 0.5);\n          // Draw an ellipse with the radius of the distance between circles\n        ellipse(x, y, this.distance(circles[i]), this.distance(circles[i]));\n      }\n    }\n  }\n}\n\n  touching(other) {\n\t\t// \tDetect if circles are touching\n    return (this.distance(other) < this.radius + other.radius);\n        }\n      \n  distance(other) {\n\t\t// \tcalculate the distance between circles\n    return dist(this.x, this.y, other.x, other.y);\n        }\n      }\n      \n            </script>\n                  </body>`}\n            width={\"100%\"}\n            sandbox=\"allow-scripts\"\n          />\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}