{"ast":null,"code":"class Button {\n  constructor(button_name, button_id, p) {\n    this.button_name = button_name;\n    this.button_id = button_id;\n    this.x = 0;\n    this.y = 0;\n    this.w = textWidth(button_name) + 14;\n    this.h = font_pixels + 10;\n    this.fillAlpha = 100;\n    this.text_x = 0;\n    this.text_y = 0;\n    this.p = p;\n  }\n\n  mouseInRegion() {\n    return this.p.mouseX > this.x - this.w / 2 - mouse_padding && this.p.mouseX < this.x + this.w / 2 + mouse_padding && this.p.mouseY > this.y - this.h / 2 - mouse_padding && this.p.mouseY < this.y + this.h / 2 + mouse_padding;\n  }\n\n  resized() {\n    this.x = w_padding - 150 + this.w / 2 - 7;\n    this.y = this.p.map(this.button_id, 0, buttons.length, h_padding, this.p.height - h_padding);\n    this.text_x = this.x - this.w / 2 + 7;\n    this.text_y = this.y - 6;\n  }\n\n  run() {\n    this.update();\n    this.display();\n  }\n\n  update() {\n    if (this.mouseInRegion() && current_survey_topic == 0) {\n      this.fillAlpha = 255;\n    } else {\n      this.fillAlpha = 100;\n    }\n  }\n\n  display() {\n    textSize(font_pixels);\n    textAlign(LEFT, CENTER);\n    fill(255, this.fillAlpha);\n    rect(this.x, this.y, this.w, this.h, 4, 4);\n    fill(0, 255);\n    text(this.button_name, this.text_x, this.text_y);\n  }\n\n}\n\nclass FancyMouse {\n  constuctor(p) {\n    this.busy = false;\n    this.xOffset = 0;\n    this.yOffset = 0;\n    this.effect = null;\n    this.p = p;\n  }\n\n  setOffset(buttonX, buttonY) {\n    this.xOffset = this.p.mouseX - buttonX;\n    this.yOffset = this.p.mouseY - buttonY;\n  }\n\n}\n\nclass Effect {\n  constructor(label_name, effect_short, methods, param_format, targets, filters, duration) {\n    this.x = 0;\n    this.y = 0;\n    this.effect_string = \"\";\n    this.effect_string_height = 0;\n    this.effect_string_width = blank_spell_img.width * 0.5;\n    this.label_name = label_name;\n    this.effect_short = effect_short;\n    this.settings = {\n      methods: [methods, \"\"],\n      params: [param_format, \"\"],\n      targets: [targets, \"\"],\n      filters: [filters, \"\"],\n      duration: [duration, \"\"]\n    };\n  }\n\n}\n\nexport default function sketch(p) {\n  let blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\n  let bg;\n  let GAN_imgs = [];\n  let flavour_img, masked_flavour_ellipse, masked_flavour_rect;\n  const buttons = [];\n  let button_id = 0;\n  const effects = [];\n  let experiments = [\"mvw\", \"2mur\", \"longer_game\"];\n  let user = \"\";\n  const cards = [];\n  const card_num = 3;\n  const card_types = [\"spell\", \"minion\", \"weapon\"];\n  const method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\n  const target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\n  const target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"];\n  const filter_names = [\"enemy\", \"friendly\", \"all\"];\n  const duration_names = [\"turn\", \"permanently\"];\n  const param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\n  const effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"];\n  const keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"];\n  const all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"];\n  const creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"];\n  const survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\n  let current_survey_topic = 0;\n  let survey_drop_target = null;\n  const font_pixels = 24;\n  const smaller_font_size = 20;\n  let hearthstone_font;\n  const mouse_padding = 1;\n  let w_padding, h_padding;\n  let grid_w_padding, grid_h_padding;\n  let theMouse;\n  let hoveredOption = -1;\n  let editing = \"none\";\n  let editing_card = null;\n  let effect_to_remove = null;\n  let editX = 0;\n  let editY = 0;\n  let simCount = 3;\n  let simulating = false;\n  let simDuration = 2000;\n  let simTime = -simDuration;\n  let mouse_over_queuer;\n  let simResults = null;\n  let simTurns = null;\n  let props;\n\n  p.myCustomRedrawAccordingToNewPropsHandler = _props => {\n    props = _props; // GAN_imgs.push(p.loadImage(\"../images/gan_samples/sample_\"+p.floor(p.random(1000))+\".jpg\"));\n    // flavour_img = p.random(GAN_imgs);\n  };\n\n  p.preload = () => {\n    bg = p.loadImage(props.bg_img);\n    blank_spell_img = p.loadImage(props.spell_img);\n    blank_weapon_img = p.loadImage(props.weapon_img);\n    blank_creature_img = p.loadImage(props.creature_img);\n    full_blank_creature_img = p.loadImage(props.full_blank_creature_img);\n    flavour_img = p.loadImage(props.gan_img); //bg = p.loadImage(bg_img);\n    // blank_spell_img = p.loadImage(\"../images/blank_cards/spell.png\");\n    // blank_weapon_img = p.loadImage(\"../images/blank_cards/weapon.png\")\n    // blank_creature_img = p.loadImage(\"../images/blank_cards/creature.png\")\n    // full_blank_creature_img = p.loadImage(\"../images/blank_cards/fullBlankCreature.png\");\n    // GAN_imgs.push(p.loadImage(\"../images/gan_samples/sample_\"+p.floor(p.random(1000))+\".jpg\"));\n    // flavour_img = p.random(GAN_imgs);\n    //hearthstone_font = p.loadFont(\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\");\n  };\n\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    user = p.getURLParams().user;\n    h_padding = p.height * 0.1;\n    w_padding = p.width * 0.2;\n    grid_h_padding = p.height * 0.2;\n    grid_w_padding = p.width * 0.1;\n    p.imageMode(p.CENTER);\n    p.rectMode(p.CENTER); //`p.textFont(hearthstone_font);\n\n    p.textSize(font_pixels);\n    p.fill(255);\n    p.noStroke();\n    theMouse = new FancyMouse(p);\n    p.register_all();\n\n    for (let i = 0; i < card_num; i++) {\n      cards.push(new p.Card(i, \"mvw\"));\n    }\n\n    p.resize_all();\n    let ellipse_mask = p.createGraphics(p.width, p.height);\n    p.ellipse_mask.ellipse(p.width / 2, p.height / 2 + 50, 900, 840);\n    let rect_mask = p.createGraphics(p.width, p.height);\n    p.rect_mask.rect(p.width / 2 - 450, p.height / 2 - 300, 900, 800);\n    masked_flavour_ellipse = flavour_img.get();\n    masked_flavour_ellipse.mask(ellipse_mask);\n    masked_flavour_rect = flavour_img.get();\n    masked_flavour_rect.mask(rect_mask);\n  };\n\n  p.draw = () => {\n    p.background(255);\n    p.textAlign(p.LEFT, p.CENTER);\n    p.image(bg, p.width / 2, p.height / 2, p.width, p.height);\n\n    for (let c of cards) {\n      c.run();\n    }\n\n    for (let b of buttons) {\n      b.run();\n    }\n\n    if (theMouse.busy && current_survey_topic == 0) {\n      p.push();\n      p.translate(p.mouseX - theMouse.xOffset, p.mouseY - theMouse.yOffset);\n      p.textSize(28);\n      p.text(theMouse.effect.label_name, 0, 0);\n      p.pop();\n    }\n\n    p.draw_edit_overlay();\n    p.sim_overlay();\n\n    if (survey_topics[current_survey_topic] != \"none\") {\n      p.draw_survey();\n    }\n  };\n\n  p.draw_survey = () => {\n    p.push();\n    p.textAlign(p.CENTER, p.CENTER);\n    p.textSize(font_pixels);\n    p.rectMode(p.CENTER);\n    p.background(0, 100);\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (setting[0][0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (setting[0][0] == \"k\") {\n      options = keywords;\n    } else if (setting[0][0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      for (let attack = 1; attack < 11; attack++) {\n        for (let defense = 1; defense < 11; defense++) {\n          let xPos = p.map(attack, 1, 10, grid_w_padding, p.width - grid_w_padding);\n          let yPos = p.map(defense, 1, 10, grid_h_padding, p.height - grid_h_padding);\n          let boxWidth = (p.width - grid_w_padding * 2) / 10;\n          let boxHeight = (p.height - grid_h_padding * 2) / 10;\n\n          if (p.mouseX > xPos - boxWidth / 2 && p.mouseX < xPos + boxWidth / 2 && p.mouseY > yPos - boxHeight / 2 && p.mouseY < yPos + boxHeight / 2) {\n            p.fill(255, 100);\n          } else {\n            p.fill(255, 0);\n          }\n\n          p.rect(xPos, yPos, boxWidth, boxHeight);\n          p.fill(255);\n          p.text(attack + \"/\" + defense, xPos, yPos - 10);\n        }\n      }\n    } else {\n      p.textSize(40);\n      p.fill(255);\n      p.text(theMouse.effect.label_name + \"...\", p.width / 2, p.height * 0.1);\n      p.textSize(font_pixels);\n      p.rectMode(p.CENTER);\n      let optionButtonWidth = p.width / options.length * 0.5;\n      let optionButtonHeight = p.height * 0.10;\n      let optionButtonsPadding = p.width * 0.25;\n\n      for (let [index, option] of options.entries()) {\n        let xPos = p.map(index, 0, options.length - 1, optionButtonsPadding, p.width - optionButtonsPadding);\n\n        if (p.mouseX > xPos - optionButtonWidth / 2 && p.mouseX < xPos + optionButtonWidth / 2) {\n          p.fill(255, 100);\n          hoveredOption = index;\n        } else {\n          p.fill(255, 50);\n        }\n\n        p.rect(xPos, p.height * 0.5, optionButtonWidth, optionButtonHeight, 16);\n        p.fill(255);\n        let optionString = option.toString();\n        optionString = optionString[0].toUpperCase() + optionString.substring(1);\n        optionString = optionString.split(\" \").join(\"\\n\");\n        p.text(optionString, xPos, p.height / 2);\n      }\n    }\n\n    p.pop();\n  };\n\n  p.mousePressedWhileSurveying = () => {\n    if (p.progressSurveyThroughIssues()) {\n      return;\n    }\n\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (options[0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (options[0] == \"k\") {\n      options = keywords;\n    } else if (options[0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      setting[1] = {\n        x: p.floor(p.map(p.mouseX, 0, p.width, 1, 11)),\n        y: p.floor(p.map(p.mouseY, 0, p.height, 1, 11))\n      };\n    } else {\n      setting[1] = options[hoveredOption];\n    }\n\n    current_survey_topic++;\n\n    if (p.progressSurveyThroughIssues()) {\n      return;\n    }\n  };\n\n  p.mousePressedWhileNotSurveying = () => {\n    let clickedCard = null;\n\n    for (let c of cards) {\n      if (c.mouseInImg()) {\n        clickedCard = c;\n      }\n    }\n\n    if (clickedCard) {\n      if (theMouse.busy) {\n        //dropping effect onto a card\n        p.dropEffectOnCard(clickedCard);\n      } else {\n        //clicking on a card generally\n        p.clickToEditCard(clickedCard);\n      }\n    } else {\n      if (theMouse.busy) {\n        //clicked away to drop label\n        theMouse.busy = false;\n        theMouse.setOffset(0, 0);\n        theMouse.effect = null;\n      } else {\n        //other clicks\n        if (mouse_over_queuer) {\n          p.add_to_queue();\n        }\n\n        p.mouse_click_while_editing();\n\n        for (let b of buttons) {\n          //clicking on a button with an empty hand\n          if (b.mouseInRegion()) {\n            theMouse.busy = true;\n            theMouse.setOffset(b.text_x, b.text_y);\n            theMouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n            break;\n          }\n        }\n      }\n    }\n  }; //returns true if you need to return out of mouse\n\n\n  p.progressSurveyThroughIssues = () => {\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    for (let i = 0; i < survey_topics.length; i++) {\n      if (theMouse.effect.settings[survey_topics[current_survey_topic]][0] == null || !param_format_names.includes(theMouse.effect.settings[survey_topics[current_survey_topic]][0][0]) && theMouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1) {\n        current_survey_topic++;\n\n        if (current_survey_topic == survey_topics.length) {\n          p.finished_survey();\n          return true;\n        }\n      }\n    }\n\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    return false;\n  };\n\n  p.dropEffectOnCard = c => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if (p.progressSurveyThroughIssues()) {\n      return;\n    }\n  };\n\n  p.clickToEditCard = c => {\n    if (c.mouse_over_mana) {\n      editing = \"mana\";\n      editing_card = c;\n    } else if (c.mouse_over_power) {\n      editing = \"power\";\n      editing_card = c;\n    } else if (c.mouse_over_toughness && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"toughness\";\n      editing_card = c;\n    } else if (c.mouse_over_card_effect && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"effect\";\n      editX = c.hovered_effect.x + blank_spell_img.width / 2;\n      editY = c.hovered_effect.y + c.hovered_effect.effect_string_height / 2;\n      editing_card = c;\n      effect_to_remove = c.hovered_effect;\n    } else if (editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10) {\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n      editing = \"none\";\n    }\n  };\n\n  p.mouse_click_while_editing = () => {\n    if (editing == \"mana\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY - 50) < 40) {\n        editing_card.mana--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY - 50) < 40) {\n        editing_card.mana++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.mana = p.constrain(editing_card.mana, 0, 10);\n    } else if (editing == \"power\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.power--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.power++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.power = p.constrain(editing_card.power, 0, 10);\n    } else if (editing == \"toughness\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.toughness--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.toughness++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.toughness = p.constrain(editing_card.toughness, 1, 10);\n    } else if (editing = \"effect\") {\n      editing = \"none\";\n    }\n  };\n\n  p.draw_edit_overlay = () => {\n    p.push();\n\n    if (editing != \"none\") {\n      p.translate(editX, editY);\n      p.noStroke();\n\n      if (editing == \"effect\") {\n        p.rotate(p.QUARTER_PI);\n        p.fill(0);\n        p.rect(0, 0, 22, 6);\n        p.rect(0, 0, 6, 22);\n        p.fill(255);\n        p.rect(0, 0, 20, 4);\n        p.rect(0, 0, 4, 20);\n      } else {\n        p.fill(0);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 8, 32);\n        p.fill(255);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 6, 30);\n      }\n    }\n\n    p.pop();\n  };\n\n  p.mousePressed = () => {\n    if (survey_topics[current_survey_topic] != \"none\") {\n      p.mousePressedWhileSurveying();\n    } else {\n      p.mousePressedWhileNotSurveying();\n    }\n  };\n\n  p.finished_survey = () => {\n    survey_drop_target.effects.push(JSON.parse(JSON.stringify(theMouse.effect)));\n    current_survey_topic = 0;\n    theMouse.effect = null;\n    theMouse.busy = false;\n  };\n\n  p.keyPressed = () => {\n    if (p.key == ' ' && !simulating) {\n      simResults = null;\n      simTurns = null;\n      simulating = true;\n      simTime = simCount;\n      p.submit();\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    p.resize_all();\n  };\n\n  p.add_to_queue = () => {\n    if (!simulating) {\n      simulating = true;\n      simTime = p.millis();\n      p.submit();\n    }\n  };\n\n  p.sim_overlay = () => {\n    p.push();\n    let queur_x = p.map(2, 0, 3, w_padding, p.width - w_padding);\n    let queur_y = p.height * 0.85;\n    mouse_over_queuer = p.mouseX > queur_x - 100 && p.mouseX < queur_x + 100 && p.mouseY > queur_y - 30 && p.mouseY < queur_y + 30;\n    p.translate(queur_x, queur_y);\n\n    if (mouse_over_queuer && !simulating) {\n      p.fill(255, 255);\n    } else {\n      p.fill(p.map(p.millis(), simTime, simTime + simDuration, 100, 255, true), 100);\n    }\n\n    p.rect(0, 0, 200, 60, 4);\n    p.fill(0, 255);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.text(simulating ? \"Adding...\" : \"Add to queue\", 0, -4);\n    p.rectMode(p.CORNER); // if(simulating)\n    // p.fill(0)\n    // p.rect(-100, -30, map(millis(), simTime, simTime+simDuration, 0, 200, true), 60, 4)\n\n    p.pop();\n\n    if (simulating) {\n      if (p.millis() > simTime + simDuration) {\n        simulating = false;\n      }\n    } // if (simulating) {\n    //   simTime = constrain(simTime - random(0.001, 0.002), 0, simCount);\n    //   let lw = map(simTime, 0, simCount, 0, 200);\n    //   noStroke();\n    //   p.fill(200);\n    //   p.rect(width * 0.5 - 100, height * 0.85 - 16, 200, 40)\n    //   p.fill(0)\n    //   p.rect(width * 0.5 - 100, height * 0.85 - 16, lw, 40)\n    //   p.fill(255);\n    //   text(\"Simulating...\", width * 0.5, height * 0.85)\n    // } else {\n    //   text(\"Press Spacebar to simulate\", width / 2, height * 0.9);\n    // }\n    // if (simResults != null) {\n    //   text(\"The win rate with your card is: \" + simResults +\n    //     \"%\\n\" + \"The average game lasted \" + simTurns +\n    //     \" turns.\", width * 0.5, height * 0.10);\n    // }\n\n  };\n\n  p.submit = () => {\n    let submissions = [];\n\n    for (let c of cards) {\n      let card_submission = {\n        id: c.card_id,\n        exp: c.card_experiment,\n        user: user,\n        p: c.power,\n        t: c.toughness,\n        m: c.mana\n      };\n      let repeat_checker = {};\n\n      for (let e of c.effects) {\n        if (repeat_checker[e.effect_short] == undefined) {\n          repeat_checker[e.effect_short] = 0;\n        } else {\n          repeat_checker[e.effect_short]++;\n        }\n\n        if (e.settings.methods[0] != null) card_submission[e.effect_short + \"-method-\" + repeat_checker[e.effect_short]] = e.settings.methods[1];\n        if (e.settings.params[0] != null) card_submission[e.effect_short + \"-param-\" + repeat_checker[e.effect_short]] = e.settings.params[1];\n        if (e.settings.targets[0] != null) card_submission[e.effect_short + \"-target-\" + repeat_checker[e.effect_short]] = e.settings.targets[1];\n        if (e.settings.filters[0] != null) card_submission[e.effect_short + \"-filter-\" + repeat_checker[e.effect_short]] = e.settings.filters[1];\n        if (e.settings.duration[0] != null) card_submission[e.effect_short + \"-duration-\" + repeat_checker[e.effect_short]] = e.settings.duration[1];\n      }\n\n      submissions[c.card_experiment + \"-\" + c.card_id] = card_submission;\n    }\n\n    p.send_to_google_sheets(submissions);\n  };\n\n  p.send_to_google_sheets = submissions => {\n    for (let submission of submissions) {} // gapi.load('client', ()=>{\n    //   gapi.client.init({ 'apiKey':  config.sheets_api_key}).then(()=>{\n    //     gapi.client.sheets.spreadsheets.values.get({\n    //       spreadsheetId: config.sheet_id,\n    //       range: \"queue!A1:D5\"\n    //     }).then((response) => {\n    //       var result = response.result;\n    //       var numRows = result.values ? result.values.length : 0;\n    //       console.log(`${numRows} rows retrieved.`);\n    //     });\n    //   }); \n    // });\n    // httpPost('https://hearth-mici-backend.loca.lt/get_winrates', submission, (response) => {\n    //   simulating = false;\n    //   simResults = round(JSON.parse(response).win_rate, 2);\n    //   simTurns = round(JSON.parse(response).num_turns, 2);\n    //   console.log(simResults, simTurns)\n    // });\n    // httpPost('https://sheets.googleapis.com/v4/spreadsheets/1TlgFYV4zwkyfwGq1DNU39Sq1kOsOaL3jfppokpmgX0w/values/queue!A1:E1:append?key='+config.sheets_api_key, {\n    //   range: \"queue!A1:E1\",\n    //   key: config.sheets_api_key,\n    //   majorDimension: \"ROWS\",\n    //   values: [\n    //     [\"Door\", \"$15\", \"2\", \"3/15/2016\"],\n    //     [\"Engine\", \"$100\", \"1\", \"3/20/2016\"],\n    //   ],\n    // }, (response) => {\n    //   console.log(response)\n    // });\n\n  };\n\n  p.resize_all = () => {\n    for (let b of buttons) {\n      b.resized();\n    }\n\n    for (let c of cards) {\n      c.resized();\n    }\n  };\n\n  p.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n    effects[effect_text] = new Effect(effect_text, effect_short, method, param, targets, filters, duration);\n    buttons.push(new Button(effect_text, button_id++));\n  };\n\n  p.register_all = () => {\n    p.register_effect(\"Deal damage\", \"dam\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Destroy\", \"des\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Heal\", \"hea\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Gain armour\", \"arm\", null, [\"x\"], null, null, null);\n    p.register_effect(\"Change stats\", \"cha\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Set stats\", \"set\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Give keyword\", \"giv\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"k\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Return to hand\", \"ret\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Draw\", \"dra\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Gain mana\", \"gai\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Summon\", \"sum\", null, [\"x/x\"], null, null, null);\n    p.register_effect(\"Keyword\", \"key\", null, [\"k\"], null, null, null);\n    p.register_effect(\"Creature type\", \"cre\", null, [\"c\"], null, null, null);\n  }; // p.FancyMouse = (fm) => {\n  //     this.busy = false;\n  //     this.xOffset = 0;\n  //     this.yOffset = 0;\n  //     this.effect = null;\n  //   fm.setOffset = (buttonX, buttonY) => {\n  //     this.xOffset = p.mouseX - buttonX;\n  //     this.yOffset = p.mouseY - buttonY;\n  //   }\n  // }\n  // p.Effect = (ef) => {\n  //   ef.constructor = (label_name,effect_short,methods, param_format, targets, filters, duration) => {\n  //     this.x = 0;\n  //     this.y = 0;\n  //     this.effect_string = \"\";\n  //     this.effect_string_height = 0;\n  //     this.effect_string_width = blank_spell_img.width * 0.5;\n  //     this.label_name = label_name;\n  //     this.effect_short = effect_short;\n  //     this.settings = {\n  //       methods: [methods, \"\"],\n  //       params: [param_format, \"\"],\n  //       targets: [targets, \"\"],\n  //       filters: [filters, \"\"],\n  //       duration: [duration, \"\"]\n  //     };\n  //   }\n  // }\n  // p.Card = (cd) => {\n  //   cd.constructor = (card_id, card_experiment) => {\n  //       this.y = 0;\n  //       this.x = 0;\n  //       this.w = blank_spell_img.width * 0.75;\n  //       this.h = blank_spell_img.height * 0.75;\n  //       this.oversized = false;\n  //       this.class = \"mage\";\n  //       this.type_id = 1;\n  //       this.card_id = card_id;\n  //       this.card_experiment = card_experiment;\n  //       this.creature_type = \"\";\n  //       this.mana = 5;\n  //       this.power = 5;\n  //       this.toughness = 5;\n  //       this.keywords = [];\n  //       this.effects = [];\n  //       this.hovered_effect = null;\n  //       this.mouse_over_card_effect = false;\n  //       this.mouse_over_mana = false;\n  //       this.mouse_over_power = false;\n  //       this.mouse_over_toughness = false;\n  //   }\n  //   cd.resized = () => {\n  //       this.x = p.map(this.card_id + 1, 0, cards.length, w_padding, p.width - w_padding)\n  //       this.y = p.height / 2;\n  //   }\n  //   cd.run = () => {\n  //       this.generate_effect_text();\n  //       this.check_mouse_hovers();\n  //       this.display();\n  //   }\n  //   cd.generate_effect_text = () => {\n  //       for (let e of this.effects) {\n  //           e.effect_string = \"\";\n  //           if(e.label_name == \"Keyword\" || e.label_name == \"Creature type\"){\n  //               e.effect_string = e.settings.params[1];\n  //           } else if(e.label_name == \"Deal damage\"){\n  //               if(e.settings.methods[1] == \"randomly\"){\n  //                   e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n  //               } else if(e.settings.methods[1] == \"targeted\"){\n  //                   e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n  //               } else {\n  //                   e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \"\n  //               }\n  //               e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n  //               if(e.settings.methods[1] == \"all\"){\n  //                   e.effect_string += e.settings.targets[1]\n  //               } else {\n  //                   e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n  //               }\n  //           } else if(e.label_name ==\"Destroy\"){\n  //               if(e.settings.methods[1] == \"randomly\"){\n  //                   e.effect_string = \"Randomly destroy a \";\n  //               } else if(e.settings.methods[1] == \"targeted\"){\n  //                   e.effect_string = \"Destroy a target \";\n  //               } else {\n  //                   e.effect_string = \"Destroy all \"\n  //               }\n  //               e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n  //               if(e.settings.methods[1] == \"all\"){\n  //                   e.effect_string += e.settings.targets[1]\n  //               } else {\n  //                   e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n  //               }\n  //           } else if(e.label_name ==\"Heal\"){\n  //               if(e.settings.methods[1] == \"randomly\"){\n  //                   e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n  //               } else if(e.settings.methods[1] == \"targeted\"){\n  //                   e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n  //               } else {\n  //                   e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n  //               }\n  //               e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n  //               if(e.settings.methods[1] == \"all\"){\n  //                   e.effect_string += e.settings.targets[1]\n  //               } else {\n  //                   e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n  //               }                \n  //           } else {\n  //               e.effect_string = e.label_name\n  //           }\n  //           let estimatedCharactersPerLine = 20;\n  //           let estimatedLines =  e.effect_string.length/estimatedCharactersPerLine;\n  //           e.effect_string_height = smaller_font_size * estimatedLines + 30;\n  //       }\n  //   }\n  //   cd.display = () => {\n  //     p.push();\n  //     p.fill(0);\n  //     p.textAlign(p.CENTER, p.CENTER)\n  //       if(this.effects.length > 2){\n  //           this.oversized = true;\n  //       } else {\n  //           this.oversized = false;\n  //       }\n  //       let flav;\n  //       let forg;\n  //       if (card_types[this.type_id] == \"spell\") {\n  //           flav = masked_flavour_rect;\n  //           forg = blank_spell_img;\n  //       } else if (card_types[this.type_id] == \"minion\") {\n  //           flav = masked_flavour_ellipse;\n  //           forg = this.oversized ? full_blank_creature_img:blank_creature_img;\n  //       } else {\n  //           flav = masked_flavour_rect;\n  //           forg = blank_weapon_img;\n  //       }\n  //       if(!this.oversized){\n  //         p.image(flav, this.x + 5, this.y - 50, 300, 300)\n  //       }\n  //       p.image(forg, this.x, this.y, this.w, this.h);\n  //       p.push();\n  //       p.textSize(60);\n  //       p.fill(255);\n  //       p.strokeWeight(3);\n  //       p.stroke(0);\n  //       if (card_types[this.type_id] == \"minion\") {\n  //         p.text(this.power, this.x-this.w/2.99, this.y+this.h/2.8)\n  //         p.text(this.toughness, this.x+this.w/2.6, this.y+this.h/2.8)\n  //       }\n  //       p.text(this.mana, this.x-this.w/2.99, this.y-this.h/2.3)\n  //       p.pop();\n  //       p.push();\n  //       p.fill(0);\n  //       p.textSize(smaller_font_size);\n  //       let translation_offset_y;\n  //       if(this.oversized){\n  //           translation_offset_y = this.y - this.h/2 + 80;\n  //           p.translate(this.x, this.y - this.h/2 + 80);\n  //       } else {\n  //           translation_offset_y = this.y  + 50;\n  //           p.translate(this.x, this.y + 50);\n  //       }\n  //       this.mouse_over_card_effect = false;\n  //       this.hovered_effect = null;\n  //       for(let e of this.effects){\n  //           translation_offset_y += e.effect_string_height/2;\n  //           p.translate(0, e.effect_string_height/2)\n  //           if(p.mouseY > translation_offset_y - e.effect_string_height/2 &&\n  //             p.mouseY < translation_offset_y + e.effect_string_height/2 &&\n  //             p.mouseX > this.x - e.effect_string_width/2 &&\n  //             p.mouseX < this.x + e.effect_string_width/2){\n  //               this.mouse_over_card_effect = true;\n  //               this.hovered_effect = e;\n  //               this.hovered_effect.x = this.x - e.effect_string_width/2;\n  //               this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n  //               p.fill(0, 100);\n  //           } else {\n  //               p.fill(0, 50)\n  //           }\n  //           p.rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4)\n  //           p.fill(255, 255)\n  //           p.text(e.effect_string, 0, 0, blank_spell_img.width/2, blank_spell_img.height/2)\n  //           translation_offset_y += e.effect_string_height/2+5;\n  //           p.translate(0, e.effect_string_height/2+5)\n  //       }\n  //       p.pop();\n  //       p.push();\n  //       if(editing_card == this){\n  //           if(editing == \"mana\"){\n  //               editX = this.x-this.w/2.99;\n  //               editY = this.y-this.h/2.3;\n  //           } else if(editing == \"power\"){\n  //               editX = this.x-this.w/2.99;\n  //               editY = this.y+this.h/2.8;\n  //           } else if(editing == \"toughness\"){\n  //               editX = this.x+this.w/2.6;\n  //               editY = this.y+this.h/2.8;\n  //           } \n  //       }\n  //       p.pop();\n  //   }\n  //   cd.mouseInImg = () => {\n  //       return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n  //         p.mouseX < this.x + this.w / 2 + mouse_padding &&\n  //         p.mouseY > this.y - this.h / 2 - mouse_padding &&\n  //         p.mouseY < this.y + this.h / 2 + mouse_padding);\n  //   }\n  //   cd.check_mouse_hovers = () => {\n  //       if (card_types[this.type_id] == \"minion\") {\n  //           this.mouse_over_power = p.dist(p.mouseX, p.mouseY, this.x-this.w/2.99, this.y+this.h/2.8) < 50\n  //           this.mouse_over_toughness = p.dist(p.mouseX, p.mouseY, this.x+this.w/2.6, this.y+this.h/2.8) < 50\n  //       }\n  //       this.mouse_over_mana = p.dist(p.mouseX, p.mouseY, this.x-this.w/2.99, this.y-this.h/2.3) < 50\n  //   }\n  // }\n  // p.Button = (btn) =>{\n  //   btn.constructor = (button_name, button_id) => {\n  //     this.button_name = button_name;\n  //     this.button_id = button_id;\n  //     this.x = 0;\n  //     this.y = 0;\n  //     this.w = p.textWidth(button_name) + 14;\n  //     this.h = font_pixels + 10;\n  //     this.fillAlpha = 100;\n  //     this.text_x = 0;\n  //     this.text_y = 0;\n  //   }\n  //   btn.mouseInRegion = () => {\n  //     return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n  //       p.mouseX < this.x + this.w / 2 + mouse_padding &&\n  //       p.mouseY > this.y - this.h / 2 - mouse_padding &&\n  //       p.mouseY < this.y + this.h / 2 + mouse_padding);\n  //   }\n  //   btn.resized = () => {\n  //     this.x = w_padding - 150 + this.w / 2 - 7;\n  //     this.y = p.map(this.button_id, 0, buttons.length, h_padding, p.height - h_padding);\n  //     this.text_x = this.x - this.w / 2 + 7;\n  //     this.text_y = this.y - 6;\n  //   }\n  //   btn.run = () => {\n  //     this.update();\n  //     this.display();\n  //   }\n  //   btn.update = () => {\n  //     if (this.mouseInRegion() && current_survey_topic == 0) {\n  //       this.fillAlpha = 255;\n  //     } else {\n  //       this.fillAlpha = 100;\n  //     }\n  //   }\n  //   btn.display = () => {\n  //     p.textSize(font_pixels)\n  //     p.textAlign(p.LEFT, p.CENTER)\n  //     p.fill(255, this.fillAlpha);\n  //     p.rect(this.x, this.y, this.w, this.h, 4, 4);\n  //     p.fill(0, 255);\n  //     p.text(this.button_name, this.text_x, this.text_y);\n  //   }\n  // }\n\n\n  document.oncontextmenu = function () {\n    return false;\n  };\n}","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/src/sketch_stuff/sketch.js"],"names":["Button","constructor","button_name","button_id","p","x","y","w","textWidth","h","font_pixels","fillAlpha","text_x","text_y","mouseInRegion","mouseX","mouse_padding","mouseY","resized","w_padding","map","buttons","length","h_padding","height","run","update","display","current_survey_topic","textSize","textAlign","LEFT","CENTER","fill","rect","text","FancyMouse","constuctor","busy","xOffset","yOffset","effect","setOffset","buttonX","buttonY","Effect","label_name","effect_short","methods","param_format","targets","filters","duration","effect_string","effect_string_height","effect_string_width","blank_spell_img","width","settings","params","sketch","blank_creature_img","blank_weapon_img","full_blank_creature_img","bg","GAN_imgs","flavour_img","masked_flavour_ellipse","masked_flavour_rect","effects","experiments","user","cards","card_num","card_types","method_names","target_names","target_names_singular","filter_names","duration_names","param_format_names","effect_names","keywords","all_creature_types","creature_types","survey_topics","survey_drop_target","smaller_font_size","hearthstone_font","grid_w_padding","grid_h_padding","theMouse","hoveredOption","editing","editing_card","effect_to_remove","editX","editY","simCount","simulating","simDuration","simTime","mouse_over_queuer","simResults","simTurns","props","myCustomRedrawAccordingToNewPropsHandler","_props","preload","loadImage","bg_img","spell_img","weapon_img","creature_img","gan_img","setup","createCanvas","windowWidth","windowHeight","getURLParams","imageMode","rectMode","noStroke","register_all","i","push","Card","resize_all","ellipse_mask","createGraphics","ellipse","rect_mask","get","mask","draw","background","image","c","b","translate","pop","draw_edit_overlay","sim_overlay","draw_survey","setting","options","attack","defense","xPos","yPos","boxWidth","boxHeight","optionButtonWidth","optionButtonHeight","optionButtonsPadding","index","option","entries","optionString","toString","toUpperCase","substring","split","join","mousePressedWhileSurveying","progressSurveyThroughIssues","floor","mousePressedWhileNotSurveying","clickedCard","mouseInImg","dropEffectOnCard","clickToEditCard","add_to_queue","mouse_click_while_editing","JSON","parse","stringify","finished_survey","includes","mouse_over_mana","mouse_over_power","mouse_over_toughness","dist","mouse_over_card_effect","hovered_effect","splice","indexOf","mana","constrain","power","toughness","rotate","QUARTER_PI","mousePressed","keyPressed","key","submit","windowResized","resizeCanvas","millis","queur_x","queur_y","CORNER","submissions","card_submission","id","card_id","exp","card_experiment","t","m","repeat_checker","e","undefined","send_to_google_sheets","submission","register_effect","effect_text","method","param","document","oncontextmenu"],"mappings":"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","sourcesContent":["\n\nclass Button {\n\n  constructor(button_name, button_id, p) {\n    this.button_name = button_name;\n    this.button_id = button_id;\n\n    this.x = 0;\n    this.y = 0;\n    this.w = textWidth(button_name) + 14;\n    this.h = font_pixels + 10;\n    this.fillAlpha = 100;\n\n    this.text_x = 0;\n    this.text_y = 0;\n    this.p = p;\n  }\n  mouseInRegion() {\n    return (this.p.mouseX > this.x - this.w / 2 - mouse_padding &&\n      this.p.mouseX < this.x + this.w / 2 + mouse_padding &&\n      this.p.mouseY > this.y - this.h / 2 - mouse_padding &&\n      this.p.mouseY < this.y + this.h / 2 + mouse_padding);\n  }\n\n  resized() {\n    this.x = w_padding - 150 + this.w / 2 - 7;\n    this.y = this.p.map(this.button_id, 0, buttons.length, h_padding, this.p.height - h_padding);\n    this.text_x = this.x - this.w / 2 + 7;\n    this.text_y = this.y - 6;\n  }\n\n  run() {\n    this.update();\n    this.display();\n  }\n\n  update() {\n\n    if (this.mouseInRegion() && current_survey_topic == 0) {\n      this.fillAlpha = 255;\n    } else {\n      this.fillAlpha = 100;\n    }\n\n  }\n\n  display() {\n\n\n    textSize(font_pixels)\n    textAlign(LEFT, CENTER)\n    fill(255, this.fillAlpha);\n    rect(this.x, this.y, this.w, this.h, 4, 4);\n    fill(0, 255);\n    text(this.button_name, this.text_x, this.text_y);\n  }\n\n  \n}\n\n\nclass FancyMouse{\n  constuctor(p){\n    this.busy = false;\n    this.xOffset = 0;\n    this.yOffset = 0;\n    this.effect = null;\n    this.p = p;\n  }\n  setOffset(buttonX, buttonY) {\n    this.xOffset = this.p.mouseX - buttonX;\n    this.yOffset = this.p.mouseY - buttonY;\n  }\n}\n\n\n\nclass Effect {\n  constructor(label_name,effect_short,methods, param_format, targets, filters, duration) {\n    this.x = 0;\n    this.y = 0;\n\n    this.effect_string = \"\";\n    this.effect_string_height = 0;\n    this.effect_string_width = blank_spell_img.width * 0.5;\n    this.label_name = label_name;\n    this.effect_short = effect_short;\n\n    this.settings = {\n      methods: [methods, \"\"],\n      params: [param_format, \"\"],\n      targets: [targets, \"\"],\n      filters: [filters, \"\"],\n      duration: [duration, \"\"]\n    };\n}\n}\n\n\nexport default function sketch(p){\n\nlet blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\nlet bg;\nlet GAN_imgs = [];\nlet flavour_img, masked_flavour_ellipse, masked_flavour_rect;\n\n\nconst buttons = [];\nlet button_id = 0;\n\nconst effects = [];\n\nlet experiments = [\"mvw\", \"2mur\", \"longer_game\"];\nlet user = \"\"\n\nconst cards = [];\nconst card_num = 3;\nconst card_types = [\"spell\", \"minion\", \"weapon\"]\n\nconst method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\nconst target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\nconst target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"]\nconst filter_names = [\"enemy\", \"friendly\", \"all\"];\nconst duration_names = [\"turn\", \"permanently\"];\nconst param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\nconst effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"]\nconst keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"]\nconst all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"]\nconst creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"]\n\nconst survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\nlet current_survey_topic = 0;\n\nlet survey_drop_target = null;\n\n\nconst font_pixels = 24;\nconst smaller_font_size = 20;\nlet hearthstone_font;\nconst mouse_padding = 1;\nlet w_padding, h_padding;\nlet grid_w_padding, grid_h_padding;\n\nlet theMouse;\nlet hoveredOption = -1;\n\nlet editing = \"none\";\nlet editing_card = null;\nlet effect_to_remove = null;\nlet editX = 0;\nlet editY = 0;\n\nlet simCount = 3;\nlet simulating = false;\nlet simDuration = 2000;\nlet simTime = -simDuration;\n\nlet mouse_over_queuer;\n\nlet simResults = null;\nlet simTurns = null;\n\nlet props;\n\n\np.myCustomRedrawAccordingToNewPropsHandler = (_props) => {\n  props = _props;\n \n\n\n  // GAN_imgs.push(p.loadImage(\"../images/gan_samples/sample_\"+p.floor(p.random(1000))+\".jpg\"));\n  // flavour_img = p.random(GAN_imgs);\n\n}\n\np.preload = () => {\n\n  bg = p.loadImage(props.bg_img)\n  blank_spell_img = p.loadImage(props.spell_img);\n  blank_weapon_img = p.loadImage(props.weapon_img)\n  blank_creature_img = p.loadImage(props.creature_img)\n  full_blank_creature_img = p.loadImage(props.full_blank_creature_img);\n  flavour_img = p.loadImage(props.gan_img)\n  //bg = p.loadImage(bg_img);\n\n  // blank_spell_img = p.loadImage(\"../images/blank_cards/spell.png\");\n  // blank_weapon_img = p.loadImage(\"../images/blank_cards/weapon.png\")\n  // blank_creature_img = p.loadImage(\"../images/blank_cards/creature.png\")\n  // full_blank_creature_img = p.loadImage(\"../images/blank_cards/fullBlankCreature.png\");\n  \n  // GAN_imgs.push(p.loadImage(\"../images/gan_samples/sample_\"+p.floor(p.random(1000))+\".jpg\"));\n  // flavour_img = p.random(GAN_imgs);\n\n  //hearthstone_font = p.loadFont(\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\");\n}\n\n\np.setup = () => {\n  p.createCanvas(p.windowWidth, p.windowHeight);\n  user = p.getURLParams().user;\n\n  h_padding = p.height * 0.1;\n  w_padding = p.width * 0.2;\n  grid_h_padding = p.height * 0.2;\n  grid_w_padding = p.width * 0.1;\n  p.imageMode(p.CENTER)\n  p.rectMode(p.CENTER);\n  //`p.textFont(hearthstone_font);\n  p.textSize(font_pixels);\n  p.fill(255);\n  p.noStroke();\n\n\n\n\n  theMouse = new FancyMouse(p);\n\n\n  p.register_all();\n\n\n  for (let i = 0; i < card_num; i++) {\n    cards.push(new p.Card(i, \"mvw\"));\n  }\n\n  p.resize_all();\n\n\n  let ellipse_mask = p.createGraphics(p.width, p.height);\n  p.ellipse_mask.ellipse(p.width / 2, p.height / 2+50, 900, 840)\n\n  let rect_mask = p.createGraphics(p.width, p.height);\n  p.rect_mask.rect(p.width / 2-450, p.height / 2 - 300, 900, 800)\n\n  masked_flavour_ellipse = flavour_img.get();\n  masked_flavour_ellipse.mask(ellipse_mask)\n  masked_flavour_rect = flavour_img.get();\n  masked_flavour_rect.mask(rect_mask)\n\n\n\n}\n\n\np.draw = () => {\n  p.background(255)\n  p.textAlign(p.LEFT, p.CENTER);\n  p.image(bg, p.width / 2, p.height / 2, p.width, p.height);\n\n  for (let c of cards) {\n    c.run();\n  }\n\n  for (let b of buttons) {\n    b.run();\n  }\n\n  if(theMouse.busy && current_survey_topic == 0){\n    p.push();\n    p.translate(p.mouseX-theMouse.xOffset, p.mouseY-theMouse.yOffset)\n    p.textSize(28)\n    p.text(theMouse.effect.label_name, 0, 0)\n    p.pop();\n  }\n\n  p.draw_edit_overlay();\n\n  p.sim_overlay();\n\n\n  if(survey_topics[current_survey_topic] != \"none\"){\n    p.draw_survey(); \n  }\n    \n}\n\n\n\np.draw_survey = () => {\n  p.push();\n  p.textAlign(p.CENTER, p.CENTER)\n  p.textSize(font_pixels)\n\n  p.rectMode(p.CENTER)\n  p.background(0, 100)\n\n  let setting = theMouse.effect.settings[survey_topics[current_survey_topic]]\n  let options = setting[0]\n\n    \n  if(setting[0][0] == \"x\"){\n    options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  } else if(setting[0][0] == \"k\"){\n    options = keywords\n  } else if(setting[0][0] == \"c\"){\n    options = creature_types;\n  }\n  \n\n  if(options[0] == \"x/x\"){\n    for(let attack = 1; attack < 11; attack++){\n      for(let defense = 1; defense < 11; defense++){\n        let xPos = p.map(attack, 1, 10, grid_w_padding, p.width-grid_w_padding);\n        let yPos = p.map(defense, 1, 10, grid_h_padding, p.height-grid_h_padding);\n        let boxWidth = (p.width-grid_w_padding*2)/10;\n        let boxHeight = (p.height-grid_h_padding*2)/10;\n\n        if(p.mouseX > xPos - boxWidth/2 && p.mouseX < xPos + boxWidth/2 &&\n          p.mouseY > yPos - boxHeight/2 && p.mouseY < yPos+boxHeight/2){\n              p.fill(255, 100);\n          } else {\n            p.fill(255, 0);\n          }\n          p.rect(xPos, yPos, boxWidth, boxHeight);\n          p.fill(255);\n          p.text(attack + \"/\" + defense, xPos, yPos-10)\n      }\n    }\n  } else {\n\n\n  p.textSize(40);\n  p.fill(255)\n  p.text(theMouse.effect.label_name + \"...\", p.width/2, p.height*0.1);\n\n  p.textSize(font_pixels)\n  p.rectMode(p.CENTER)\n\n  let optionButtonWidth = (p.width/options.length)*0.5;\n  let optionButtonHeight = p.height*0.10;\n  let optionButtonsPadding = p.width*0.25;\n\n  for(let [index, option] of options.entries()){\n    let xPos = p.map(index, 0, options.length-1, optionButtonsPadding, p.width-optionButtonsPadding);\n    if(p.mouseX > xPos-optionButtonWidth/2 && p.mouseX < xPos + optionButtonWidth/2){\n      p.fill(255, 100)\n      hoveredOption = index;\n    } else {\n      p.fill(255, 50)\n    }\n    p.rect(xPos, p.height*0.5, optionButtonWidth, optionButtonHeight, 16);\n    p.fill(255);\n\n    let optionString = option.toString();\n    optionString = optionString[0].toUpperCase() + optionString.substring(1)\n    optionString = optionString.split(\" \").join(\"\\n\");\n\n    p.text(optionString, xPos, p.height/2)\n  }\n}\n  \np.pop();\n}\n\n\np.mousePressedWhileSurveying = () => {\n  if(p.progressSurveyThroughIssues()){\n    return\n  }\n\n\n  let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n  let options = setting[0]\n  if(options[0] == \"x\"){\n    options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  } else if (options[0] == \"k\"){\n    options = keywords;\n  } else if (options[0] == \"c\"){\n    options = creature_types;\n  }\n  \n  if(options[0] == \"x/x\"){\n    setting[1] = {x: p.floor(p.map(p.mouseX, 0, p.width, 1, 11)),\n                  y: p.floor(p.map(p.mouseY, 0, p.height, 1, 11))}\n  } else {\n    setting[1] = options[hoveredOption];\n  }\n  \n  current_survey_topic++;\n\n  if(p.progressSurveyThroughIssues()){\n    return\n  }\n\n}\n\n\np.mousePressedWhileNotSurveying = () => {\n  let clickedCard = null;\n\n  for (let c of cards) {\n    if (c.mouseInImg()) {\n      clickedCard = c;\n    }\n  }\n\n\n  if(clickedCard){\n    if(theMouse.busy){ //dropping effect onto a card\n      p.dropEffectOnCard(clickedCard)\n    } else { //clicking on a card generally\n      p.clickToEditCard(clickedCard)\n    }\n  } else {\n    if(theMouse.busy){ //clicked away to drop label\n      theMouse.busy = false;\n      theMouse.setOffset(0, 0);\n      theMouse.effect = null;\n    } else { //other clicks\n\n      if(mouse_over_queuer){\n        p.add_to_queue();\n      }\n\n      p.mouse_click_while_editing();\n      \n\n      for (let b of buttons) { //clicking on a button with an empty hand\n        if (b.mouseInRegion()) {\n          theMouse.busy = true;\n          theMouse.setOffset(b.text_x, b.text_y);\n          theMouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n\n          break;\n        }\n      }\n    }\n  }\n\n}\n\n\n\n//returns true if you need to return out of mouse\np.progressSurveyThroughIssues = () => {\n  if(current_survey_topic == survey_topics.length){\n    p.finished_survey();\n    return true;\n  }\n\n  for(let i = 0; i < survey_topics.length; i++){\n    if(theMouse.effect.settings[survey_topics[current_survey_topic]][0] == null ||\n      (!param_format_names.includes(theMouse.effect.settings[survey_topics[current_survey_topic]][0][0]) &&\n       theMouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1)){\n      current_survey_topic++;\n      if(current_survey_topic == survey_topics.length){\n        p.finished_survey();\n        return true;\n      }\n    }\n  }\n\n\n  if(current_survey_topic == survey_topics.length){\n    p.finished_survey();\n    return true;\n  }\n\n\n  return false;\n}\n\np.dropEffectOnCard = (c) => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if(p.progressSurveyThroughIssues()){\n\n      return\n    }\n}\n\n\np.clickToEditCard = (c) => {\n\n  if(c.mouse_over_mana){\n    editing = \"mana\";\n    editing_card = c;\n  } else if(c.mouse_over_power){\n    editing = \"power\";\n    editing_card = c;\n  } else if(c.mouse_over_toughness && !(editing ==\"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)){\n    editing = \"toughness\";\n    editing_card = c;\n  } else if(c.mouse_over_card_effect && !(editing ==\"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10 )){\n    editing = \"effect\";\n    editX = c.hovered_effect.x + blank_spell_img.width/2;\n    editY = c.hovered_effect.y + c.hovered_effect.effect_string_height/2;\n    editing_card = c;\n    effect_to_remove = c.hovered_effect;\n   } else if(editing==\"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10){\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n    editing = \"none\";\n  }\n}\n\n\np.mouse_click_while_editing = () => {\n  if(editing == \"mana\"){\n    if(p.dist(p.mouseX, p.mouseY, editX-60, editY-50)<40){\n      editing_card.mana--;\n    } else if(p.dist(p.mouseX, p.mouseY, editX+60, editY-50)<40){\n      editing_card.mana++;\n    } else {\n      editing = \"none\"\n    }\n    editing_card.mana = p.constrain(editing_card.mana, 0, 10)\n  } else if(editing == \"power\"){\n\n    if(p.dist(p.mouseX, p.mouseY, editX-60, editY+50)<40){\n      editing_card.power--;\n    } else if(p.dist(p.mouseX, p.mouseY, editX+60, editY+50)<40){\n      editing_card.power++;\n    } else {\n      editing = \"none\"\n    }\n    editing_card.power = p.constrain(editing_card.power, 0, 10)\n  } else if(editing == \"toughness\"){\n\n    if(p.dist(p.mouseX, p.mouseY, editX-60, editY+50)<40){\n      editing_card.toughness--;\n    } else if(p.dist(p.mouseX, p.mouseY, editX+60, editY+50)<40){\n      editing_card.toughness++;\n    } else {\n      editing = \"none\"\n    }\n    editing_card.toughness = p.constrain(editing_card.toughness, 1, 10)\n  } else if(editing = \"effect\"){\n    editing = \"none\";\n  }\n} \n\n\np.draw_edit_overlay = () => {\n  p.push();\n  if(editing != \"none\"){\n    p.translate(editX, editY)\n    p.noStroke();\n    if(editing==\"effect\"){\n      p.rotate(p.QUARTER_PI);\n      p.fill(0);\n      p.rect(0, 0, 22, 6);\n      p.rect(0, 0, 6, 22);\n      p.fill(255);\n      p.rect(0, 0, 20, 4);\n      p.rect(0, 0, 4, 20);\n \n    } else {\n      p.fill(0);\n      p.rect(-60, editing==\"mana\"?-50:75, 32, 8);\n      p.rect(60, editing==\"mana\"?-50:75, 32, 8);\n      p.rect(60, editing==\"mana\"?-50:75, 8, 32);\n      p.fill(255);\n      p.rect(-60, editing==\"mana\"?-50:75, 30, 6);\n      p.rect(60, editing==\"mana\"?-50:75, 30, 6);\n      p.rect(60, editing==\"mana\"?-50:75, 6, 30);\n    }\n  }\n  p.pop();\n}\n\np.mousePressed = () => {\n\n  if(survey_topics[current_survey_topic] != \"none\"){\n    p.mousePressedWhileSurveying();\n  } else {\n    p.mousePressedWhileNotSurveying();\n  }\n}\n\np.finished_survey = () => {\n\n  survey_drop_target.effects.push(JSON.parse(JSON.stringify(theMouse.effect)))\n  current_survey_topic = 0;\n  theMouse.effect = null;\n  theMouse.busy = false;\n}\n\np.keyPressed = () => {\n  if (p.key == ' ' && !simulating) {\n    simResults = null;\n    simTurns = null;\n    simulating = true;\n    simTime = simCount;\n    p.submit();\n  }\n\n}\n\np.windowResized = () => {\n  p.resizeCanvas(p.windowWidth, p.windowHeight);\n  p.resize_all();\n}\n\np.add_to_queue = () => {\n  if(!simulating){\n    simulating = true;\n    simTime = p.millis();\n    p.submit();\n  }\n}\n\np.sim_overlay = () => {\n  p.push();\n  let queur_x = p.map(2, 0, 3, w_padding, p.width-w_padding);\n  let queur_y = p.height*0.85\n  mouse_over_queuer = (p.mouseX > queur_x - 100 && p.mouseX < queur_x + 100 && p.mouseY > queur_y-30 && p.mouseY < queur_y+30)\n\n  p.translate(queur_x, queur_y);\n\n  if(mouse_over_queuer && !simulating){\n    p.fill(255, 255);\n  } else {\n    p.fill(p.map(p.millis(), simTime, simTime+simDuration, 100, 255, true), 100)\n  } \n  p.rect(0, 0, 200, 60, 4)\n\n\n  p.fill(0, 255);\n  p.textAlign(p.CENTER, p.CENTER)\n  p.text(simulating?\"Adding...\":\"Add to queue\", 0, -4)\n\n  p.rectMode(p.CORNER)\n\n  // if(simulating)\n  // p.fill(0)\n  // p.rect(-100, -30, map(millis(), simTime, simTime+simDuration, 0, 200, true), 60, 4)\n\n\n  p.pop();\n\n  if(simulating){\n    if(p.millis() > simTime+simDuration){\n      simulating = false;\n    }\n  }\n  // if (simulating) {\n  //   simTime = constrain(simTime - random(0.001, 0.002), 0, simCount);\n\n  //   let lw = map(simTime, 0, simCount, 0, 200);\n  //   noStroke();\n  //   p.fill(200);\n  //   p.rect(width * 0.5 - 100, height * 0.85 - 16, 200, 40)\n  //   p.fill(0)\n  //   p.rect(width * 0.5 - 100, height * 0.85 - 16, lw, 40)\n  //   p.fill(255);\n  //   text(\"Simulating...\", width * 0.5, height * 0.85)\n  // } else {\n  //   text(\"Press Spacebar to simulate\", width / 2, height * 0.9);\n  // }\n\n  // if (simResults != null) {\n\n  //   text(\"The win rate with your card is: \" + simResults +\n  //     \"%\\n\" + \"The average game lasted \" + simTurns +\n  //     \" turns.\", width * 0.5, height * 0.10);\n  // }\n}\n\np.submit = () => {\n  let submissions = [];\n  for(let c of cards){\n\n    let card_submission = {\n      id: c.card_id,\n      exp: c.card_experiment,\n      user: user,\n      p: c.power,\n      t: c.toughness,\n      m: c.mana,\n\n    }\n\n    \n    let repeat_checker = {};\n\n    for (let e of c.effects) {\n      if(repeat_checker[e.effect_short] == undefined){\n        repeat_checker[e.effect_short] = 0;\n      } else {\n        repeat_checker[e.effect_short]++;\n      }\n\n      if(e.settings.methods[0] != null) card_submission[e.effect_short+\"-method-\"+repeat_checker[e.effect_short]] = e.settings.methods[1];\n      if(e.settings.params[0] != null) card_submission[e.effect_short+\"-param-\"+repeat_checker[e.effect_short]] = e.settings.params[1];\n      if(e.settings.targets[0] != null) card_submission[e.effect_short+\"-target-\"+repeat_checker[e.effect_short]] = e.settings.targets[1];\n      if(e.settings.filters[0] != null) card_submission[e.effect_short+\"-filter-\"+repeat_checker[e.effect_short]] = e.settings.filters[1];\n      if(e.settings.duration[0] != null) card_submission[e.effect_short+\"-duration-\"+repeat_checker[e.effect_short]] = e.settings.duration[1];\n\n    }\n    submissions[c.card_experiment+\"-\"+c.card_id] = card_submission;\n }\n\n\n p.send_to_google_sheets(submissions);\n\n}\n\n\np.send_to_google_sheets = (submissions) => {\n\n  for(let submission of submissions){\n\n    \n  }\n\n  // gapi.load('client', ()=>{\n  //   gapi.client.init({ 'apiKey':  config.sheets_api_key}).then(()=>{\n  //     gapi.client.sheets.spreadsheets.values.get({\n  //       spreadsheetId: config.sheet_id,\n  //       range: \"queue!A1:D5\"\n  //     }).then((response) => {\n  //       var result = response.result;\n  //       var numRows = result.values ? result.values.length : 0;\n  //       console.log(`${numRows} rows retrieved.`);\n  //     });\n  //   }); \n  // });\n\n\n\n\n\n\n\n  // httpPost('https://hearth-mici-backend.loca.lt/get_winrates', submission, (response) => {\n  //   simulating = false;\n  //   simResults = round(JSON.parse(response).win_rate, 2);\n  //   simTurns = round(JSON.parse(response).num_turns, 2);\n  //   console.log(simResults, simTurns)\n  // });\n\n\n  // httpPost('https://sheets.googleapis.com/v4/spreadsheets/1TlgFYV4zwkyfwGq1DNU39Sq1kOsOaL3jfppokpmgX0w/values/queue!A1:E1:append?key='+config.sheets_api_key, {\n  //   range: \"queue!A1:E1\",\n  //   key: config.sheets_api_key,\n  //   majorDimension: \"ROWS\",\n  //   values: [\n  //     [\"Door\", \"$15\", \"2\", \"3/15/2016\"],\n  //     [\"Engine\", \"$100\", \"1\", \"3/20/2016\"],\n  //   ],\n  // }, (response) => {\n  //   console.log(response)\n  // });\n\n}\n\np.resize_all = () => {\n  for (let b of buttons) {\n    b.resized();\n  }\n\n  for (let c of cards) {\n    c.resized();\n  }\n\n}\n\np.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n\n  effects[effect_text] = new Effect(effect_text, effect_short, method, param, targets, filters, duration);\n  buttons.push(new Button(effect_text, button_id++));\n}\n\np.register_all = () => {\n\n  p.register_effect(\"Deal damage\", \"dam\",\n    [\"randomly\", \"targeted\", \"all\"],\n    [\"x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  p.register_effect(\"Destroy\", \"des\",\n    [\"randomly\", \"targeted\", \"all\"],\n    null,\n    [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  p.register_effect(\"Heal\", \"hea\",\n    [\"randomly\", \"targeted\", \"all\"],\n    [\"x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  p.register_effect(\"Gain armour\", \"arm\",\n    null,\n    [\"x\"],\n    null,\n    null,\n    null);\n\n  p.register_effect(\"Change stats\", \"cha\",\n    [\"randomly\", \"targeted\", \"all\", \"aura\"],\n    [\"x/x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    [\"turn\", \"permanently\"]);\n\n  p.register_effect(\"Set stats\", \"set\",\n    [\"randomly\", \"targeted\", \"all\", \"aura\"],\n    [\"x/x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    [\"turn\", \"permanently\"]);\n\n\n  p.register_effect(\"Give keyword\", \"giv\",\n    [\"randomly\", \"targeted\", \"all\", \"aura\"],\n    [\"k\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    [\"turn\", \"permanently\"]);\n\n  p.register_effect(\"Return to hand\", \"ret\",\n    [\"randomly\", \"targeted\", \"all\"],\n    null,\n    [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n\n  p.register_effect(\"Draw\", \"dra\",\n    null,\n    [\"x\"],\n    null,\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n\n  p.register_effect(\"Gain mana\", \"gai\",\n    null,\n    [\"x\"],\n    null,\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  p.register_effect(\"Summon\", \"sum\",\n    null,\n    [\"x/x\"],\n    null,\n    null,\n    null);\n\n    p.register_effect(\"Keyword\", \"key\",\n    null,\n    [\"k\"],\n    null,\n    null,\n    null);\n\n    p.register_effect(\"Creature type\", \"cre\",\n    null,\n    [\"c\"],\n    null,\n    null,\n    null);\n\n\n\n}\n\n\n// p.FancyMouse = (fm) => {\n \n//     this.busy = false;\n//     this.xOffset = 0;\n//     this.yOffset = 0;\n//     this.effect = null;\n  \n//   fm.setOffset = (buttonX, buttonY) => {\n//     this.xOffset = p.mouseX - buttonX;\n//     this.yOffset = p.mouseY - buttonY;\n//   }\n// }\n\n\n\n\n\n// p.Effect = (ef) => {\n//   ef.constructor = (label_name,effect_short,methods, param_format, targets, filters, duration) => {\n//     this.x = 0;\n//     this.y = 0;\n\n//     this.effect_string = \"\";\n//     this.effect_string_height = 0;\n//     this.effect_string_width = blank_spell_img.width * 0.5;\n//     this.label_name = label_name;\n//     this.effect_short = effect_short;\n\n//     this.settings = {\n//       methods: [methods, \"\"],\n//       params: [param_format, \"\"],\n//       targets: [targets, \"\"],\n//       filters: [filters, \"\"],\n//       duration: [duration, \"\"]\n//     };\n//   }\n// }\n\n\n// p.Card = (cd) => {\n//   cd.constructor = (card_id, card_experiment) => {\n//       this.y = 0;\n//       this.x = 0;\n//       this.w = blank_spell_img.width * 0.75;\n//       this.h = blank_spell_img.height * 0.75;\n//       this.oversized = false;\n\n\n//       this.class = \"mage\";\n//       this.type_id = 1;\n//       this.card_id = card_id;\n//       this.card_experiment = card_experiment;\n\n//       this.creature_type = \"\";\n//       this.mana = 5;\n//       this.power = 5;\n//       this.toughness = 5;\n//       this.keywords = [];\n//       this.effects = [];\n\n//       this.hovered_effect = null;\n//       this.mouse_over_card_effect = false;\n//       this.mouse_over_mana = false;\n//       this.mouse_over_power = false;\n//       this.mouse_over_toughness = false;\n\n\n//   }\n\n//   cd.resized = () => {\n//       this.x = p.map(this.card_id + 1, 0, cards.length, w_padding, p.width - w_padding)\n//       this.y = p.height / 2;\n//   }\n\n//   cd.run = () => {\n//       this.generate_effect_text();\n//       this.check_mouse_hovers();\n//       this.display();\n//   }\n\n//   cd.generate_effect_text = () => {\n//       for (let e of this.effects) {\n//           e.effect_string = \"\";\n//           if(e.label_name == \"Keyword\" || e.label_name == \"Creature type\"){\n//               e.effect_string = e.settings.params[1];\n//           } else if(e.label_name == \"Deal damage\"){\n//               if(e.settings.methods[1] == \"randomly\"){\n//                   e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n//               } else if(e.settings.methods[1] == \"targeted\"){\n//                   e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n//               } else {\n//                   e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \"\n//               }\n\n//               e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n//               if(e.settings.methods[1] == \"all\"){\n//                   e.effect_string += e.settings.targets[1]\n//               } else {\n//                   e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n//               }\n//           } else if(e.label_name ==\"Destroy\"){\n//               if(e.settings.methods[1] == \"randomly\"){\n//                   e.effect_string = \"Randomly destroy a \";\n//               } else if(e.settings.methods[1] == \"targeted\"){\n//                   e.effect_string = \"Destroy a target \";\n//               } else {\n//                   e.effect_string = \"Destroy all \"\n//               }\n//               e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n//               if(e.settings.methods[1] == \"all\"){\n//                   e.effect_string += e.settings.targets[1]\n//               } else {\n//                   e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n//               }\n//           } else if(e.label_name ==\"Heal\"){\n//               if(e.settings.methods[1] == \"randomly\"){\n//                   e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n//               } else if(e.settings.methods[1] == \"targeted\"){\n//                   e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n//               } else {\n//                   e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n//               }\n//               e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n//               if(e.settings.methods[1] == \"all\"){\n//                   e.effect_string += e.settings.targets[1]\n//               } else {\n//                   e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n//               }                \n//           } else {\n//               e.effect_string = e.label_name\n//           }\n\n          \n\n//           let estimatedCharactersPerLine = 20;\n//           let estimatedLines =  e.effect_string.length/estimatedCharactersPerLine;\n//           e.effect_string_height = smaller_font_size * estimatedLines + 30;\n          \n//       }\n\n//   }\n\n//   cd.display = () => {\n//     p.push();\n//     p.fill(0);\n//     p.textAlign(p.CENTER, p.CENTER)\n//       if(this.effects.length > 2){\n//           this.oversized = true;\n//       } else {\n//           this.oversized = false;\n//       }\n//       let flav;\n//       let forg;\n\n//       if (card_types[this.type_id] == \"spell\") {\n//           flav = masked_flavour_rect;\n//           forg = blank_spell_img;\n//       } else if (card_types[this.type_id] == \"minion\") {\n//           flav = masked_flavour_ellipse;\n//           forg = this.oversized ? full_blank_creature_img:blank_creature_img;\n//       } else {\n//           flav = masked_flavour_rect;\n//           forg = blank_weapon_img;\n//       }\n\n//       if(!this.oversized){\n//         p.image(flav, this.x + 5, this.y - 50, 300, 300)\n//       }\n//       p.image(forg, this.x, this.y, this.w, this.h);\n\n//       p.push();\n//       p.textSize(60);\n//       p.fill(255);\n//       p.strokeWeight(3);\n//       p.stroke(0);\n\n//       if (card_types[this.type_id] == \"minion\") {\n//         p.text(this.power, this.x-this.w/2.99, this.y+this.h/2.8)\n//         p.text(this.toughness, this.x+this.w/2.6, this.y+this.h/2.8)\n//       }\n\n    \n//       p.text(this.mana, this.x-this.w/2.99, this.y-this.h/2.3)\n     \n//       p.pop();\n\n     \n//       p.push();\n//       p.fill(0);\n//       p.textSize(smaller_font_size);\n//       let translation_offset_y;\n//       if(this.oversized){\n//           translation_offset_y = this.y - this.h/2 + 80;\n//           p.translate(this.x, this.y - this.h/2 + 80);\n//       } else {\n//           translation_offset_y = this.y  + 50;\n//           p.translate(this.x, this.y + 50);\n//       }\n      \n//       this.mouse_over_card_effect = false;\n//       this.hovered_effect = null;\n//       for(let e of this.effects){\n          \n//           translation_offset_y += e.effect_string_height/2;\n//           p.translate(0, e.effect_string_height/2)\n\n//           if(p.mouseY > translation_offset_y - e.effect_string_height/2 &&\n//             p.mouseY < translation_offset_y + e.effect_string_height/2 &&\n//             p.mouseX > this.x - e.effect_string_width/2 &&\n//             p.mouseX < this.x + e.effect_string_width/2){\n\n//               this.mouse_over_card_effect = true;\n\n//               this.hovered_effect = e;\n//               this.hovered_effect.x = this.x - e.effect_string_width/2;\n//               this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n//               p.fill(0, 100);\n//           } else {\n//               p.fill(0, 50)\n//           }\n\n//           p.rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4)\n//           p.fill(255, 255)\n//           p.text(e.effect_string, 0, 0, blank_spell_img.width/2, blank_spell_img.height/2)\n//           translation_offset_y += e.effect_string_height/2+5;\n//           p.translate(0, e.effect_string_height/2+5)\n\n//       }\n//       p.pop();\n\n\n//       p.push();\n\n//       if(editing_card == this){\n//           if(editing == \"mana\"){\n//               editX = this.x-this.w/2.99;\n//               editY = this.y-this.h/2.3;\n//           } else if(editing == \"power\"){\n//               editX = this.x-this.w/2.99;\n//               editY = this.y+this.h/2.8;\n//           } else if(editing == \"toughness\"){\n//               editX = this.x+this.w/2.6;\n//               editY = this.y+this.h/2.8;\n//           } \n//       }\n\n//       p.pop();\n//   }\n\n\n//   cd.mouseInImg = () => {\n//       return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n//         p.mouseX < this.x + this.w / 2 + mouse_padding &&\n//         p.mouseY > this.y - this.h / 2 - mouse_padding &&\n//         p.mouseY < this.y + this.h / 2 + mouse_padding);\n\n//   }\n//   cd.check_mouse_hovers = () => {\n//       if (card_types[this.type_id] == \"minion\") {\n//           this.mouse_over_power = p.dist(p.mouseX, p.mouseY, this.x-this.w/2.99, this.y+this.h/2.8) < 50\n//           this.mouse_over_toughness = p.dist(p.mouseX, p.mouseY, this.x+this.w/2.6, this.y+this.h/2.8) < 50\n//       }\n//       this.mouse_over_mana = p.dist(p.mouseX, p.mouseY, this.x-this.w/2.99, this.y-this.h/2.3) < 50\n//   }\n// }\n\n\n\n\n\n// p.Button = (btn) =>{\n\n//   btn.constructor = (button_name, button_id) => {\n//     this.button_name = button_name;\n//     this.button_id = button_id;\n\n//     this.x = 0;\n//     this.y = 0;\n//     this.w = p.textWidth(button_name) + 14;\n//     this.h = font_pixels + 10;\n//     this.fillAlpha = 100;\n\n//     this.text_x = 0;\n//     this.text_y = 0;\n//   }\n//   btn.mouseInRegion = () => {\n//     return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n//       p.mouseX < this.x + this.w / 2 + mouse_padding &&\n//       p.mouseY > this.y - this.h / 2 - mouse_padding &&\n//       p.mouseY < this.y + this.h / 2 + mouse_padding);\n//   }\n\n//   btn.resized = () => {\n//     this.x = w_padding - 150 + this.w / 2 - 7;\n//     this.y = p.map(this.button_id, 0, buttons.length, h_padding, p.height - h_padding);\n//     this.text_x = this.x - this.w / 2 + 7;\n//     this.text_y = this.y - 6;\n//   }\n\n//   btn.run = () => {\n//     this.update();\n//     this.display();\n//   }\n\n//   btn.update = () => {\n\n//     if (this.mouseInRegion() && current_survey_topic == 0) {\n//       this.fillAlpha = 255;\n//     } else {\n//       this.fillAlpha = 100;\n//     }\n\n//   }\n\n//   btn.display = () => {\n\n\n//     p.textSize(font_pixels)\n//     p.textAlign(p.LEFT, p.CENTER)\n//     p.fill(255, this.fillAlpha);\n//     p.rect(this.x, this.y, this.w, this.h, 4, 4);\n//     p.fill(0, 255);\n//     p.text(this.button_name, this.text_x, this.text_y);\n//   }\n\n  \n// }\n\n\ndocument.oncontextmenu = function() {\n  return false;\n}\n\n\n}"]},"metadata":{},"sourceType":"module"}