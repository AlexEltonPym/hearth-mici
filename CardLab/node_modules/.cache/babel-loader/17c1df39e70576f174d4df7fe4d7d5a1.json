{"ast":null,"code":"var _jsxFileName = \"/Users/aep/phd/hearth-mici/src/App.js\";\nimport React, { Component } from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport './App.css';\n\nfunction importAll(r) {\n  return r.keys().map(r);\n}\n\nconst images = importAll(require.context('./cards', false, /\\.(png|jpe?g|svg)$/));\nconst blanks = importAll(require.context('./blankCards', false, /\\.(png|jpe?g|svg)$/));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keywords: ['Taunt', 'Lifelink', 'Charge']\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, \"Please check out the available cards:\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '0 10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, ['neutral', 'mage', 'warrior'].map(toDisplay => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: toDisplay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"h2\",\n        style: {\n          paddingTop: '100px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, toDisplay), /*#__PURE__*/React.createElement(Grid, {\n        key: toDisplay,\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, images.reduce(function (result, i) {\n        if (i.includes(toDisplay)) {\n          result.push( /*#__PURE__*/React.createElement(Grid, {\n            key: i,\n            item: true,\n            xs: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: i,\n            height: 300,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }\n          })));\n        }\n\n        return result;\n      }, [])));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"Now it is time to build your own\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      style: {\n        border: \"none\",\n        width: \"100%\",\n        height: \"100vh\"\n      },\n      srcDoc: `\n            <head>\n              <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.10.2/p5.min.js\"></script>\n            </head>\n            <body style=\"margin: 0; padding: 0; height: 100%; overflow: hidden; width: 100%; position: fixed;\">      \n              <script> \n                let blank;\n                let imgBG;\n                let belwe;\n                \n                const imgScale = 0.8\n                const keywords = [];\n                const textpix = 32;\n                const mousePadding = 10;\n                \n                let theMouse;\n                \n                let mana = 1;\n                let power = 1;\n                let toughness = 1;\n                \n                let ganImages = [];\n                function preload() {\n                  blank = loadImage(\"https://i.imgur.com/qKiD2ED.png\");\n                  imgBG = loadImage(\"https://i.imgur.com/4TplRj1.jpg\");\n                  belwe = loadFont(\"https://fontsforyou.com/downloads/17017-belweboldbt\");\n                  \n                  // for(let i = 0; i < 100; i++){\n                  // ganImages.push(loadImage(\"images/sample_\"+i+\".jpg\"));\n                  // }\n                }\n                \n                let chosenImage;\n                \n                function setup() {\n                  createCanvas(windowWidth, windowHeight);\n                  imageMode(CENTER)\n                  textAlign(CENTER, CENTER);\n                  rectMode(CENTER);\n                  textFont(belwe);\n                  textSize(textpix);\n                \n                  fill(255);\n                  noStroke();\n                  theMouse = new FancyMouse();\n                  let offset = -60;\n                \n                \n                  [\"Taunt\", \"Lifesteal\", \"Charge\"].map((k) => {\n                    keywords.push(\n                      new Keyword(k, width * 0.75, height / 2 + offset));\n                    offset += 60;\n                  });\n                \n                \n                  chosenImage = random(ganImages);\n                \n                }\n                \n                function draw() {\n                  background(204, 231, 232);\n                  noStroke();\n                \n                  image(chosenImage, width * 0.3, height * 0.38, 220, 220);\n                  image(blank, width * 0.3, height / 2,\n                    blank.width * imgScale,\n                    blank.height * imgScale);\n                \n                  textSize(textpix);\n                \n                  for (let label of keywords) {\n                    label.display();\n                  }\n                  textSize(72);\n                  fill(255);\n                  stroke(0);\n                  text(mana, 71, 62);\n                  text(toughness, 293, 400);\n                  text(power, 73, 400);\n                \n                }\n                \n                \n                function mousePressed() {\n                  submit();\n                  console.log(mouseX + \" \" + mouseY);\n                \n                  if (dist(mouseX, mouseY, 71, 62) < 40) {\n                    mana += keyIsPressed ? -1 : 1;\n                  }\n                \n                  if (dist(mouseX, mouseY, 293, 400) < 40) {\n                    toughness += keyIsPressed ? -1 : 1;\n                  }\n                \n                  if (dist(mouseX, mouseY, 73, 400) < 40) {\n                    power += keyIsPressed ? -1 : 1;\n                  }\n                  mana = constrain(mana, 0, 10);\n                  power = constrain(power, 0, 10);\n                \n                  toughness = constrain(toughness, 0, 10);\n                \n                  if (theMouse.busy) {\n                    theMouse.busy = false;\n                    theMouse.setOffset(0, 0);\n                \n                    theMouse.selectedLabel.stuckOnMouse = false;\n                    theMouse.selectedLabel.inCard = mouseX < width / 2;\n                    theMouse.selectedLabel = null;\n                \n                  } else {\n                    for (let label of keywords) {\n                      if (label.mouseInRegion()) {\n                \n                        theMouse.setOffset(label.x, label.y);\n                        theMouse.busy = true;\n                        theMouse.selectedLabel = label;\n                        label.stuckOnMouse = true;\n                        break;\n                      }\n                \n                    }\n                \n                  }\n                \n                }\n                \n                \n                class Keyword {\n                \n                  constructor(title, x, y) {\n                    this.title = title;\n                    this.name = title.toLowerCase();\n                    this.initialX = x;\n                    this.initialY = y;\n                    this.x = x;\n                    this.y = y;\n                    this.w = textWidth(title) + 10;\n                    this.h = textpix + 10;\n                    this.stuckOnMouse = false;\n                    this.inCard = false;\n                \n                  }\n                  mouseInRegion() {\n                    return ((mouseX > this.x - this.w / 2 - mousePadding &&\n                        mouseX < this.x + this.w / 2 + mousePadding) &&\n                      (mouseY > this.y - this.h / 2 - mousePadding &&\n                        mouseY < this.y + this.h / 2 + mousePadding));\n                  }\n                \n                  display() {\n                    if (this.stuckOnMouse) {\n                      this.x = mouseX - theMouse.xOffset;\n                      this.y = mouseY - theMouse.yOffset;\n                    } else {\n                      if (this.inCard) {\n                        this.x = width * 0.3;\n                        this.y = this.initialY * 0.6 + 215;\n                      } else {\n                        this.x = this.initialX;\n                        this.y = this.initialY;\n                      }\n                    }\n                \n                    push();\n                    translate(this.x, this.y);\n                    let fillAlpha = this.stuckOnMouse ? 255 : (this.mouseInRegion() ? 200 : 150);\n                \n                    fill(255, this.inCard ? 0 : fillAlpha);\n                \n                    rect(0, 0, this.w, this.h, 4, 4);\n                    fill(0, this.inCard ? 255 : fillAlpha);\n                    text(this.title, 0, -8);\n                \n                    pop();\n                  }\n                }\n                \n                class FancyMouse {\n                  constuctor() {\n                    this.busy = false;\n                    this.xOffset = 0;\n                    this.yOffset = 0;\n                    this.selectedLabel = null;\n                  }\n                  setOffset(xOff, yOff) {\n                    this.xOffset = mouseX - xOff;\n                    this.yOffset = mouseY - yOff;\n                  }\n                \n                \n                }\n                \n                function submit() {\n                  let j = {};\n                  for (let k of keywords) {\n                    if (k.inCard) {\n                      j[k.name] = true;\n                    }\n                  }\n                \n                  j.power = power\n                  j.toughness = toughness\n                  j.mana = mana\n                  console.log(j);\n                }\n\n                function windowResized() {\n                  resizeCanvas(windowWidth, windowHeight);\n                }\n              </script>\n            </body>\n                  `,\n      width: \"100%\",\n      sandbox: \"allow-scripts\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/src/App.js"],"names":["React","Component","Typography","Grid","importAll","r","keys","map","images","require","context","blanks","App","constructor","props","state","keywords","render","padding","toDisplay","paddingTop","reduce","result","i","includes","push","border","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { Typography, Grid } from '@material-ui/core'\n\n\nimport './App.css';\n\n\n\nfunction importAll(r) {\n  return r.keys().map(r);\n}\n\nconst images = importAll(require.context('./cards', false, /\\.(png|jpe?g|svg)$/));\nconst blanks = importAll(require.context('./blankCards', false, /\\.(png|jpe?g|svg)$/));\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      keywords: ['Taunt', 'Lifelink', 'Charge'],\n    };\n  }\n\n\n  render() {\n\n  \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Please check out the available cards:\n        </p>\n        </header>\n\n        <div style={{ padding: '0 10%' }}>\n          {['neutral', 'mage', 'warrior'].map((toDisplay) => {\n            return (\n              <div key={toDisplay}>\n                <Typography variant=\"h2\" style={{ paddingTop: '100px' }} >{toDisplay}</Typography>\n                <Grid key={toDisplay} container>\n                  {\n\n                    images.reduce(function (result, i) {\n                      if (i.includes(toDisplay)) {\n                        result.push((\n                          <Grid key={i} item xs>\n                            <img src={i} height={300} />\n                          </Grid>\n                        ));\n                      }\n                      return result;\n                    }, [])\n\n                  }\n\n                </Grid>\n              </div>\n            )\n          })}\n        </div>\n\n        <div className=\"App-header\">\n          <p>\n            Now it is time to build your own\n        </p>\n        </div>\n\n        {/* <div style={{ padding: '0 10%' }}>\n          <Grid style={{ paddingTop: '100px' }} container>\n            {blanks.map((b) => {\n              return (\n                <Grid key={b} item xs={12} sm={12} md={6} xl={12}>\n                  {b.includes('creature') && <img src={b} style={{ height: 400 }} />}\n                </Grid>\n              );\n            })}\n          </Grid>\n        </div> */}\n\n        <div>\n        <iframe\n            style={{\n              border: \"none\",\n              width: \"100%\",\n              height: \"100vh\",\n             \n            }}\n\n            srcDoc={`\n            <head>\n              <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.10.2/p5.min.js\"></script>\n            </head>\n            <body style=\"margin: 0; padding: 0; height: 100%; overflow: hidden; width: 100%; position: fixed;\">      \n              <script> \n                let blank;\n                let imgBG;\n                let belwe;\n                \n                const imgScale = 0.8\n                const keywords = [];\n                const textpix = 32;\n                const mousePadding = 10;\n                \n                let theMouse;\n                \n                let mana = 1;\n                let power = 1;\n                let toughness = 1;\n                \n                let ganImages = [];\n                function preload() {\n                  blank = loadImage(\"https://i.imgur.com/qKiD2ED.png\");\n                  imgBG = loadImage(\"https://i.imgur.com/4TplRj1.jpg\");\n                  belwe = loadFont(\"https://fontsforyou.com/downloads/17017-belweboldbt\");\n                  \n                  // for(let i = 0; i < 100; i++){\n                  // ganImages.push(loadImage(\"images/sample_\"+i+\".jpg\"));\n                  // }\n                }\n                \n                let chosenImage;\n                \n                function setup() {\n                  createCanvas(windowWidth, windowHeight);\n                  imageMode(CENTER)\n                  textAlign(CENTER, CENTER);\n                  rectMode(CENTER);\n                  textFont(belwe);\n                  textSize(textpix);\n                \n                  fill(255);\n                  noStroke();\n                  theMouse = new FancyMouse();\n                  let offset = -60;\n                \n                \n                  [\"Taunt\", \"Lifesteal\", \"Charge\"].map((k) => {\n                    keywords.push(\n                      new Keyword(k, width * 0.75, height / 2 + offset));\n                    offset += 60;\n                  });\n                \n                \n                  chosenImage = random(ganImages);\n                \n                }\n                \n                function draw() {\n                  background(204, 231, 232);\n                  noStroke();\n                \n                  image(chosenImage, width * 0.3, height * 0.38, 220, 220);\n                  image(blank, width * 0.3, height / 2,\n                    blank.width * imgScale,\n                    blank.height * imgScale);\n                \n                  textSize(textpix);\n                \n                  for (let label of keywords) {\n                    label.display();\n                  }\n                  textSize(72);\n                  fill(255);\n                  stroke(0);\n                  text(mana, 71, 62);\n                  text(toughness, 293, 400);\n                  text(power, 73, 400);\n                \n                }\n                \n                \n                function mousePressed() {\n                  submit();\n                  console.log(mouseX + \" \" + mouseY);\n                \n                  if (dist(mouseX, mouseY, 71, 62) < 40) {\n                    mana += keyIsPressed ? -1 : 1;\n                  }\n                \n                  if (dist(mouseX, mouseY, 293, 400) < 40) {\n                    toughness += keyIsPressed ? -1 : 1;\n                  }\n                \n                  if (dist(mouseX, mouseY, 73, 400) < 40) {\n                    power += keyIsPressed ? -1 : 1;\n                  }\n                  mana = constrain(mana, 0, 10);\n                  power = constrain(power, 0, 10);\n                \n                  toughness = constrain(toughness, 0, 10);\n                \n                  if (theMouse.busy) {\n                    theMouse.busy = false;\n                    theMouse.setOffset(0, 0);\n                \n                    theMouse.selectedLabel.stuckOnMouse = false;\n                    theMouse.selectedLabel.inCard = mouseX < width / 2;\n                    theMouse.selectedLabel = null;\n                \n                  } else {\n                    for (let label of keywords) {\n                      if (label.mouseInRegion()) {\n                \n                        theMouse.setOffset(label.x, label.y);\n                        theMouse.busy = true;\n                        theMouse.selectedLabel = label;\n                        label.stuckOnMouse = true;\n                        break;\n                      }\n                \n                    }\n                \n                  }\n                \n                }\n                \n                \n                class Keyword {\n                \n                  constructor(title, x, y) {\n                    this.title = title;\n                    this.name = title.toLowerCase();\n                    this.initialX = x;\n                    this.initialY = y;\n                    this.x = x;\n                    this.y = y;\n                    this.w = textWidth(title) + 10;\n                    this.h = textpix + 10;\n                    this.stuckOnMouse = false;\n                    this.inCard = false;\n                \n                  }\n                  mouseInRegion() {\n                    return ((mouseX > this.x - this.w / 2 - mousePadding &&\n                        mouseX < this.x + this.w / 2 + mousePadding) &&\n                      (mouseY > this.y - this.h / 2 - mousePadding &&\n                        mouseY < this.y + this.h / 2 + mousePadding));\n                  }\n                \n                  display() {\n                    if (this.stuckOnMouse) {\n                      this.x = mouseX - theMouse.xOffset;\n                      this.y = mouseY - theMouse.yOffset;\n                    } else {\n                      if (this.inCard) {\n                        this.x = width * 0.3;\n                        this.y = this.initialY * 0.6 + 215;\n                      } else {\n                        this.x = this.initialX;\n                        this.y = this.initialY;\n                      }\n                    }\n                \n                    push();\n                    translate(this.x, this.y);\n                    let fillAlpha = this.stuckOnMouse ? 255 : (this.mouseInRegion() ? 200 : 150);\n                \n                    fill(255, this.inCard ? 0 : fillAlpha);\n                \n                    rect(0, 0, this.w, this.h, 4, 4);\n                    fill(0, this.inCard ? 255 : fillAlpha);\n                    text(this.title, 0, -8);\n                \n                    pop();\n                  }\n                }\n                \n                class FancyMouse {\n                  constuctor() {\n                    this.busy = false;\n                    this.xOffset = 0;\n                    this.yOffset = 0;\n                    this.selectedLabel = null;\n                  }\n                  setOffset(xOff, yOff) {\n                    this.xOffset = mouseX - xOff;\n                    this.yOffset = mouseY - yOff;\n                  }\n                \n                \n                }\n                \n                function submit() {\n                  let j = {};\n                  for (let k of keywords) {\n                    if (k.inCard) {\n                      j[k.name] = true;\n                    }\n                  }\n                \n                  j.power = power\n                  j.toughness = toughness\n                  j.mana = mana\n                  console.log(j);\n                }\n\n                function windowResized() {\n                  resizeCanvas(windowWidth, windowHeight);\n                }\n              </script>\n            </body>\n                  `}\n            width={\"100%\"}\n            sandbox=\"allow-scripts\"\n          />\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}