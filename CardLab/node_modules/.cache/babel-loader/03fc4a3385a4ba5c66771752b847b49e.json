{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handler = exports.HandlerBuilder = void 0;\n\nconst apps_1 = require(\"./apps\");\n\nconst analytics = require(\"./providers/analytics\");\n\nconst auth = require(\"./providers/auth\");\n\nconst database = require(\"./providers/database\");\n\nconst firestore = require(\"./providers/firestore\");\n\nconst https = require(\"./providers/https\");\n\nconst pubsub = require(\"./providers/pubsub\");\n\nconst remoteConfig = require(\"./providers/remoteConfig\");\n\nconst storage = require(\"./providers/storage\");\n\nconst testLab = require(\"./providers/testLab\");\n/**\n * The `HandlerBuilder` class facilitates the writing of functions by developers\n * building Firebase Extensions as well as developers who want to use the gcloud CLI or\n * Google Cloud Console to deploy their functions.\n *\n * **Do not use `HandlerBuilder` when writing normal functions for deployment via\n * the Firebase CLI.** For normal purposes, use\n * [`FunctionBuilder`](/docs/reference/functions/function_builder_.functionbuilder).\n */\n\n\nclass HandlerBuilder {\n  constructor() {}\n  /**\n   * Create a handler for HTTPS events.\n  \n   * `onRequest` handles an HTTPS request and has the same signature as an Express app.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.https.onRequest((req, res) => { ... })\n   * ```\n   *\n   * `onCall` declares a callable function for clients to call using a Firebase SDK.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.https.onCall((data, context) => { ... })\n   * ```\n   */\n\n\n  get https() {\n    return {\n      onRequest: handler => {\n        const func = https._onRequestWithOptions(handler, {});\n\n        func.__trigger = {};\n        return func;\n      },\n      onCall: handler => {\n        const func = https._onCallWithOptions(handler, {});\n\n        func.__trigger = {};\n        return func;\n      }\n    };\n  }\n  /**\n   * Create a handler for Firebase Realtime Database events.\n   *\n   * `ref.onCreate` handles the creation of new data.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.database.ref.onCreate((snap, context) => { ... })\n   * ```\n   *\n   * `ref.onUpdate` handles updates to existing data.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.database.ref.onUpdate((change, context) => { ... })\n   * ```\n  \n   * `ref.onDelete` handles the deletion of existing data.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.database.ref.onDelete((snap, context) => { ... })\n   * ```\n      * `ref.onWrite` handles the creation, update, or deletion of data.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.database.ref.onWrite((change, context) => { ... })\n   * ```\n   */\n\n\n  get database() {\n    return {\n      /** @hidden */\n      get instance() {\n        return {\n          get ref() {\n            return new database.RefBuilder(apps_1.apps(), () => null, {});\n          }\n\n        };\n      },\n\n      get ref() {\n        return new database.RefBuilder(apps_1.apps(), () => null, {});\n      }\n\n    };\n  }\n  /**\n   * Create a handler for Cloud Firestore events.\n   *\n   * `document.onCreate` handles the creation of new documents.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.firestore.document.onCreate((snap, context) => { ... })\n   * ```\n   \n   * `document.onUpdate` handles updates to existing documents.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.firestore.document.onUpdate((change, context) => { ... })\n   * ```\n   \n   * `document.onDelete` handles the deletion of existing documents.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.firestore.document.onDelete((snap, context) =>\n   * { ... })\n   * ```\n   \n   * `document.onWrite` handles the creation, update, or deletion of documents.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.firestore.document.onWrite((change, context) =>\n   * { ... })\n   * ```\n   */\n\n\n  get firestore() {\n    return {\n      get document() {\n        return new firestore.DocumentBuilder(() => null, {});\n      },\n\n      /** @hidden */\n      get namespace() {\n        return new firestore.DocumentBuilder(() => null, {});\n      },\n\n      /** @hidden */\n      get database() {\n        return new firestore.DocumentBuilder(() => null, {});\n      }\n\n    };\n  }\n  /**\n   * Create a handler for Firebase Remote Config events.\n      * `remoteConfig.onUpdate` handles events that update a Remote Config template.\n       * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.remoteConfig.onUpdate() => { ... })\n   * ```\n   */\n\n\n  get remoteConfig() {\n    return {\n      onUpdate: handler => {\n        return new remoteConfig.UpdateBuilder(() => null, {}).onUpdate(handler);\n      }\n    };\n  }\n  /**\n   * Create a handler for Google Analytics events.\n   \n   * `event.onLog` handles the logging of Analytics conversion events.\n       * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.analytics.event.onLog((event) => { ... })\n   * ```\n   */\n\n\n  get analytics() {\n    return {\n      get event() {\n        return new analytics.AnalyticsEventBuilder(() => null, {});\n      }\n\n    };\n  }\n  /**\n   * Create a handler for Cloud Storage for Firebase events.\n   *\n   * `object.onArchive` handles the archiving of Storage objects.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.storage.object.onArchive((object) => { ... })\n   * ```\n   \n   * `object.onDelete` handles the deletion of Storage objects.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.storage.object.onDelete((object) => { ... })\n   * ```\n   \n   * `object.onFinalize` handles the creation of Storage objects.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.storage.object.onFinalize((object) =>\n   * { ... })\n   * ```\n   \n   * `object.onMetadataUpdate` handles changes to the metadata of existing Storage objects.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.storage.object.onMetadataUpdate((object) =>\n   * { ... })\n   * ```\n   */\n\n\n  get storage() {\n    return {\n      get bucket() {\n        return new storage.BucketBuilder(() => null, {}).object();\n      },\n\n      get object() {\n        return new storage.ObjectBuilder(() => null, {});\n      }\n\n    };\n  }\n  /**\n   * Create a handler for Cloud Pub/Sub events.\n   *\n   * `topic.onPublish` handles messages published to a Pub/Sub topic from SDKs, Cloud Console, or gcloud CLI.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.pubsub.topic.onPublish((message) => { ... })\n   * ```\n   \n   * `schedule.onPublish` handles messages published to a Pub/Sub topic on a schedule.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.pubsub.schedule.onPublish((message) => { ... })\n   * ```\n   */\n\n\n  get pubsub() {\n    return {\n      get topic() {\n        return new pubsub.TopicBuilder(() => null, {});\n      },\n\n      get schedule() {\n        return new pubsub.ScheduleBuilder(() => null, {});\n      }\n\n    };\n  }\n  /**\n   * Create a handler for Firebase Authentication events.\n   *\n   * `user.onCreate` handles the creation of users.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.auth.user.onCreate((user) => { ... })\n   * ```\n   \n   * `user.onDelete` handles the deletion of users.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.auth.user.onDelete((user => { ... })\n   * ```\n   \n   */\n\n\n  get auth() {\n    return {\n      get user() {\n        return new auth.UserBuilder(() => null, {});\n      }\n\n    };\n  }\n  /**\n   * Create a handler for Firebase Test Lab events.\n      * `testMatrix.onComplete` handles the completion of a test matrix.\n       * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.testLab.testMatrix.onComplete((testMatrix) => { ... })\n   * ```\n   */\n\n\n  get testLab() {\n    return {\n      get testMatrix() {\n        return new testLab.TestMatrixBuilder(() => null, {});\n      }\n\n    };\n  }\n\n}\n\nexports.HandlerBuilder = HandlerBuilder;\nexports.handler = new HandlerBuilder();","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/node_modules/firebase-functions/lib/handler-builder.js"],"names":["Object","defineProperty","exports","value","handler","HandlerBuilder","apps_1","require","analytics","auth","database","firestore","https","pubsub","remoteConfig","storage","testLab","constructor","onRequest","func","_onRequestWithOptions","__trigger","onCall","_onCallWithOptions","instance","ref","RefBuilder","apps","document","DocumentBuilder","namespace","onUpdate","UpdateBuilder","event","AnalyticsEventBuilder","bucket","BucketBuilder","object","ObjectBuilder","topic","TopicBuilder","schedule","ScheduleBuilder","user","UserBuilder","testMatrix","TestMatrixBuilder"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handler = exports.HandlerBuilder = void 0;\nconst apps_1 = require(\"./apps\");\nconst analytics = require(\"./providers/analytics\");\nconst auth = require(\"./providers/auth\");\nconst database = require(\"./providers/database\");\nconst firestore = require(\"./providers/firestore\");\nconst https = require(\"./providers/https\");\nconst pubsub = require(\"./providers/pubsub\");\nconst remoteConfig = require(\"./providers/remoteConfig\");\nconst storage = require(\"./providers/storage\");\nconst testLab = require(\"./providers/testLab\");\n/**\n * The `HandlerBuilder` class facilitates the writing of functions by developers\n * building Firebase Extensions as well as developers who want to use the gcloud CLI or\n * Google Cloud Console to deploy their functions.\n *\n * **Do not use `HandlerBuilder` when writing normal functions for deployment via\n * the Firebase CLI.** For normal purposes, use\n * [`FunctionBuilder`](/docs/reference/functions/function_builder_.functionbuilder).\n */\nclass HandlerBuilder {\n    constructor() { }\n    /**\n     * Create a handler for HTTPS events.\n    \n     * `onRequest` handles an HTTPS request and has the same signature as an Express app.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.https.onRequest((req, res) => { ... })\n     * ```\n     *\n     * `onCall` declares a callable function for clients to call using a Firebase SDK.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.https.onCall((data, context) => { ... })\n     * ```\n     */\n    get https() {\n        return {\n            onRequest: (handler) => {\n                const func = https._onRequestWithOptions(handler, {});\n                func.__trigger = {};\n                return func;\n            },\n            onCall: (handler) => {\n                const func = https._onCallWithOptions(handler, {});\n                func.__trigger = {};\n                return func;\n            },\n        };\n    }\n    /**\n     * Create a handler for Firebase Realtime Database events.\n     *\n     * `ref.onCreate` handles the creation of new data.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.database.ref.onCreate((snap, context) => { ... })\n     * ```\n     *\n     * `ref.onUpdate` handles updates to existing data.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.database.ref.onUpdate((change, context) => { ... })\n     * ```\n    \n     * `ref.onDelete` handles the deletion of existing data.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.database.ref.onDelete((snap, context) => { ... })\n     * ```\n  \n     * `ref.onWrite` handles the creation, update, or deletion of data.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.database.ref.onWrite((change, context) => { ... })\n     * ```\n     */\n    get database() {\n        return {\n            /** @hidden */\n            get instance() {\n                return {\n                    get ref() {\n                        return new database.RefBuilder(apps_1.apps(), () => null, {});\n                    },\n                };\n            },\n            get ref() {\n                return new database.RefBuilder(apps_1.apps(), () => null, {});\n            },\n        };\n    }\n    /**\n     * Create a handler for Cloud Firestore events.\n     *\n     * `document.onCreate` handles the creation of new documents.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.firestore.document.onCreate((snap, context) => { ... })\n     * ```\n     \n     * `document.onUpdate` handles updates to existing documents.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.firestore.document.onUpdate((change, context) => { ... })\n     * ```\n     \n     * `document.onDelete` handles the deletion of existing documents.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.firestore.document.onDelete((snap, context) =>\n     * { ... })\n     * ```\n     \n     * `document.onWrite` handles the creation, update, or deletion of documents.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.firestore.document.onWrite((change, context) =>\n     * { ... })\n     * ```\n     */\n    get firestore() {\n        return {\n            get document() {\n                return new firestore.DocumentBuilder(() => null, {});\n            },\n            /** @hidden */\n            get namespace() {\n                return new firestore.DocumentBuilder(() => null, {});\n            },\n            /** @hidden */\n            get database() {\n                return new firestore.DocumentBuilder(() => null, {});\n            },\n        };\n    }\n    /**\n     * Create a handler for Firebase Remote Config events.\n  \n     * `remoteConfig.onUpdate` handles events that update a Remote Config template.\n   \n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.remoteConfig.onUpdate() => { ... })\n     * ```\n     */\n    get remoteConfig() {\n        return {\n            onUpdate: (handler) => {\n                return new remoteConfig.UpdateBuilder(() => null, {}).onUpdate(handler);\n            },\n        };\n    }\n    /**\n     * Create a handler for Google Analytics events.\n     \n     * `event.onLog` handles the logging of Analytics conversion events.\n   \n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.analytics.event.onLog((event) => { ... })\n     * ```\n     */\n    get analytics() {\n        return {\n            get event() {\n                return new analytics.AnalyticsEventBuilder(() => null, {});\n            },\n        };\n    }\n    /**\n     * Create a handler for Cloud Storage for Firebase events.\n     *\n     * `object.onArchive` handles the archiving of Storage objects.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.storage.object.onArchive((object) => { ... })\n     * ```\n     \n     * `object.onDelete` handles the deletion of Storage objects.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.storage.object.onDelete((object) => { ... })\n     * ```\n     \n     * `object.onFinalize` handles the creation of Storage objects.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.storage.object.onFinalize((object) =>\n     * { ... })\n     * ```\n     \n     * `object.onMetadataUpdate` handles changes to the metadata of existing Storage objects.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.storage.object.onMetadataUpdate((object) =>\n     * { ... })\n     * ```\n     */\n    get storage() {\n        return {\n            get bucket() {\n                return new storage.BucketBuilder(() => null, {}).object();\n            },\n            get object() {\n                return new storage.ObjectBuilder(() => null, {});\n            },\n        };\n    }\n    /**\n     * Create a handler for Cloud Pub/Sub events.\n     *\n     * `topic.onPublish` handles messages published to a Pub/Sub topic from SDKs, Cloud Console, or gcloud CLI.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.pubsub.topic.onPublish((message) => { ... })\n     * ```\n     \n     * `schedule.onPublish` handles messages published to a Pub/Sub topic on a schedule.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.pubsub.schedule.onPublish((message) => { ... })\n     * ```\n     */\n    get pubsub() {\n        return {\n            get topic() {\n                return new pubsub.TopicBuilder(() => null, {});\n            },\n            get schedule() {\n                return new pubsub.ScheduleBuilder(() => null, {});\n            },\n        };\n    }\n    /**\n     * Create a handler for Firebase Authentication events.\n     *\n     * `user.onCreate` handles the creation of users.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.auth.user.onCreate((user) => { ... })\n     * ```\n     \n     * `user.onDelete` handles the deletion of users.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.auth.user.onDelete((user => { ... })\n     * ```\n     \n     */\n    get auth() {\n        return {\n            get user() {\n                return new auth.UserBuilder(() => null, {});\n            },\n        };\n    }\n    /**\n     * Create a handler for Firebase Test Lab events.\n  \n     * `testMatrix.onComplete` handles the completion of a test matrix.\n   \n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.testLab.testMatrix.onComplete((testMatrix) => { ... })\n     * ```\n     */\n    get testLab() {\n        return {\n            get testMatrix() {\n                return new testLab.TestMatrixBuilder(() => null, {});\n            },\n        };\n    }\n}\nexports.HandlerBuilder = HandlerBuilder;\nexports.handler = new HandlerBuilder();\n"]},"metadata":{},"sourceType":"script"}