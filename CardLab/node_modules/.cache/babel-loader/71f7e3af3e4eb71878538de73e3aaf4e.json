{"ast":null,"code":"export default function sketch(p) {\n  let blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\n  let bg;\n  let GAN_imgs = [];\n  let flavour_img, masked_flavour_ellipse, masked_flavour_rect;\n  const buttons = [];\n  let button_id = 0;\n  const effects = [];\n  let experiments = [\"mvw\", \"2mur\", \"longer_game\"];\n  let user = \"\";\n  const cards = [];\n  const card_num = 3;\n  const card_types = [\"spell\", \"minion\", \"weapon\"];\n  const method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\n  const target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\n  const target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"];\n  const filter_names = [\"enemy\", \"friendly\", \"all\"];\n  const duration_names = [\"turn\", \"permanently\"];\n  const param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\n  const effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"];\n  const keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"];\n  const all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"];\n  const creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"];\n  const survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\n  let current_survey_topic = 0;\n  let survey_drop_target = null;\n  const font_pixels = 24;\n  const smaller_font_size = 20;\n  let hearthstone_font;\n  const mouse_padding = 1;\n  let w_padding, h_padding;\n  let grid_w_padding, grid_h_padding;\n  let theMouse;\n  let hoveredOption = -1;\n  let editing = \"none\";\n  let editing_card = null;\n  let effect_to_remove = null;\n  let editX = 0;\n  let editY = 0;\n  let simCount = 3;\n  let simulating = false;\n  let simDuration = 2000;\n  let simTime = -simDuration;\n  let mouse_over_queuer;\n  let simResults = null;\n  let simTurns = null;\n\n  p.preload = () => {\n    blank_spell_img = p.loadImage(\"blank_cards/spell.png\");\n    blank_weapon_img = p.loadImage(\"blank_cards/weapon.png\");\n    blank_creature_img = p.loadImage(\"blank_cards/creature.png\");\n    full_blank_creature_img = p.loadImage(\"blank_cards/fullBlankCreature.png\");\n    GAN_imgs.push(p.loadImage(\"gan_samples/sample_\" + p.floor(random(1000)) + \".jpg\"));\n    flavour_img = random(GAN_imgs);\n    hearthstone_font = loadFont(\"BelweBoldBT.ttf\");\n    bg = loadImage(\"bigger_paper.jpg\");\n  };\n\n  p.setup = () => {\n    createCanvas(windowWidth, windowHeight);\n    user = getURLParams().user;\n    h_padding = height * 0.1;\n    w_padding = width * 0.2;\n    grid_h_padding = height * 0.2;\n    grid_w_padding = width * 0.1;\n    imageMode(CENTER);\n    rectMode(CENTER);\n    textFont(hearthstone_font);\n    textSize(font_pixels);\n    fill(255);\n    noStroke();\n    theMouse = new FancyMouse();\n    register_all();\n\n    for (let i = 0; i < card_num; i++) {\n      cards.push(new Card(i, \"mvw\"));\n    }\n\n    resize_all();\n    let ellipse_mask = createGraphics(width, height);\n    ellipse_mask.ellipse(width / 2, height / 2 + 50, 900, 840);\n    let rect_mask = createGraphics(width, height);\n    rect_mask.rect(width / 2 - 450, height / 2 - 300, 900, 800);\n    masked_flavour_ellipse = flavour_img.get();\n    masked_flavour_ellipse.mask(ellipse_mask);\n    masked_flavour_rect = flavour_img.get();\n    masked_flavour_rect.mask(rect_mask);\n  };\n\n  p.draw = () => {\n    background(255);\n    textAlign(LEFT, CENTER);\n    image(bg, width / 2, height / 2, width, height);\n\n    for (let c of cards) {\n      c.run();\n    }\n\n    for (let b of buttons) {\n      b.run();\n    }\n\n    if (theMouse.busy && current_survey_topic == 0) {\n      push();\n      translate(mouseX - theMouse.xOffset, mouseY - theMouse.yOffset);\n      textSize(28);\n      text(theMouse.effect.label_name, 0, 0);\n      pop();\n    }\n\n    draw_edit_overlay();\n    sim_overlay();\n\n    if (survey_topics[current_survey_topic] != \"none\") {\n      draw_survey();\n    }\n  };\n\n  p.draw_survey = () => {\n    push();\n    textAlign(CENTER, CENTER);\n    textSize(font_pixels);\n    rectMode(CENTER);\n    background(0, 100);\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (setting[0][0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (setting[0][0] == \"k\") {\n      options = keywords;\n    } else if (setting[0][0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      for (let attack = 1; attack < 11; attack++) {\n        for (let defense = 1; defense < 11; defense++) {\n          let xPos = map(attack, 1, 10, grid_w_padding, width - grid_w_padding);\n          let yPos = map(defense, 1, 10, grid_h_padding, height - grid_h_padding);\n          let boxWidth = (width - grid_w_padding * 2) / 10;\n          let boxHeight = (height - grid_h_padding * 2) / 10;\n\n          if (mouseX > xPos - boxWidth / 2 && mouseX < xPos + boxWidth / 2 && mouseY > yPos - boxHeight / 2 && mouseY < yPos + boxHeight / 2) {\n            fill(255, 100);\n          } else {\n            fill(255, 0);\n          }\n\n          rect(xPos, yPos, boxWidth, boxHeight);\n          fill(255);\n          text(attack + \"/\" + defense, xPos, yPos - 10);\n        }\n      }\n    } else {\n      textSize(40);\n      fill(255);\n      text(theMouse.effect.label_name + \"...\", width / 2, height * 0.1);\n      textSize(font_pixels);\n      rectMode(CENTER);\n      let optionButtonWidth = width / options.length * 0.5;\n      let optionButtonHeight = height * 0.10;\n      let optionButtonsPadding = width * 0.25;\n\n      for (let [index, option] of options.entries()) {\n        let xPos = map(index, 0, options.length - 1, optionButtonsPadding, width - optionButtonsPadding);\n\n        if (mouseX > xPos - optionButtonWidth / 2 && mouseX < xPos + optionButtonWidth / 2) {\n          fill(255, 100);\n          hoveredOption = index;\n        } else {\n          fill(255, 50);\n        }\n\n        rect(xPos, height * 0.5, optionButtonWidth, optionButtonHeight, 16);\n        fill(255);\n        let optionString = option.toString();\n        optionString = optionString[0].toUpperCase() + optionString.substring(1);\n        optionString = optionString.split(\" \").join(\"\\n\");\n        text(optionString, xPos, height / 2);\n      }\n    }\n\n    pop();\n  };\n\n  p.mousePressedWhileSurveying = () => {\n    if (progressSurveyThroughIssues()) {\n      return;\n    }\n\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (options[0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (options[0] == \"k\") {\n      options = keywords;\n    } else if (options[0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      setting[1] = {\n        x: floor(map(mouseX, 0, width, 1, 11)),\n        y: floor(map(mouseY, 0, height, 1, 11))\n      };\n    } else {\n      setting[1] = options[hoveredOption];\n    }\n\n    current_survey_topic++;\n\n    if (progressSurveyThroughIssues()) {\n      return;\n    }\n  };\n\n  p.mousePressedWhileNotSurveying = () => {\n    let clickedCard = null;\n\n    for (let c of cards) {\n      if (c.mouseInImg()) {\n        clickedCard = c;\n      }\n    }\n\n    if (clickedCard) {\n      if (theMouse.busy) {\n        //dropping effect onto a card\n        dropEffectOnCard(clickedCard);\n      } else {\n        //clicking on a card generally\n        clickToEditCard(clickedCard);\n      }\n    } else {\n      if (theMouse.busy) {\n        //clicked away to drop label\n        theMouse.busy = false;\n        theMouse.setOffset(0, 0);\n        theMouse.effect = null;\n      } else {\n        //other clicks\n        if (mouse_over_queuer) {\n          add_to_queue();\n        }\n\n        mouse_click_while_editing();\n\n        for (let b of buttons) {\n          //clicking on a button with an empty hand\n          if (b.mouseInRegion()) {\n            theMouse.busy = true;\n            theMouse.setOffset(b.text_x, b.text_y);\n            theMouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n            break;\n          }\n        }\n      }\n    }\n  }; //returns true if you need to return out of mouse\n\n\n  p.progressSurveyThroughIssues = () => {\n    if (current_survey_topic == survey_topics.length) {\n      finished_survey();\n      return true;\n    }\n\n    for (let i = 0; i < survey_topics.length; i++) {\n      if (theMouse.effect.settings[survey_topics[current_survey_topic]][0] == null || !param_format_names.includes(theMouse.effect.settings[survey_topics[current_survey_topic]][0][0]) && theMouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1) {\n        current_survey_topic++;\n\n        if (current_survey_topic == survey_topics.length) {\n          finished_survey();\n          return true;\n        }\n      }\n    }\n\n    if (current_survey_topic == survey_topics.length) {\n      finished_survey();\n      return true;\n    }\n\n    return false;\n  };\n\n  p.dropEffectOnCard = c => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if (progressSurveyThroughIssues()) {\n      return;\n    }\n  };\n\n  p.clickToEditCard = c => {\n    if (c.mouse_over_mana) {\n      editing = \"mana\";\n      editing_card = c;\n    } else if (c.mouse_over_power) {\n      editing = \"power\";\n      editing_card = c;\n    } else if (c.mouse_over_toughness && !(editing == \"effect\" && dist(mouseX, mouseY, editX, editY) < 10)) {\n      editing = \"toughness\";\n      editing_card = c;\n    } else if (c.mouse_over_card_effect && !(editing == \"effect\" && dist(mouseX, mouseY, editX, editY) < 10)) {\n      editing = \"effect\";\n      editX = c.hovered_effect.x + blank_spell_img.width / 2;\n      editY = c.hovered_effect.y + c.hovered_effect.effect_string_height / 2;\n      editing_card = c;\n      effect_to_remove = c.hovered_effect;\n    } else if (editing == \"effect\" && dist(mouseX, mouseY, editX, editY) < 10) {\n      console.log(dist(mouseX, mouseY, editX, editY));\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n      editing = \"none\";\n    }\n  };\n\n  p.mouse_click_while_editing = () => {\n    if (editing == \"mana\") {\n      if (dist(mouseX, mouseY, editX - 60, editY - 50) < 40) {\n        editing_card.mana--;\n      } else if (dist(mouseX, mouseY, editX + 60, editY - 50) < 40) {\n        editing_card.mana++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.mana = constrain(editing_card.mana, 0, 10);\n    } else if (editing == \"power\") {\n      if (dist(mouseX, mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.power--;\n      } else if (dist(mouseX, mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.power++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.power = constrain(editing_card.power, 0, 10);\n    } else if (editing == \"toughness\") {\n      if (dist(mouseX, mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.toughness--;\n      } else if (dist(mouseX, mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.toughness++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.toughness = constrain(editing_card.toughness, 1, 10);\n    } else if (editing = \"effect\") {\n      editing = \"none\";\n    }\n  };\n\n  p.draw_edit_overlay = () => {\n    push();\n\n    if (editing != \"none\") {\n      translate(editX, editY);\n      noStroke();\n\n      if (editing == \"effect\") {\n        rotate(QUARTER_PI);\n        fill(0);\n        rect(0, 0, 22, 6);\n        rect(0, 0, 6, 22);\n        fill(255);\n        rect(0, 0, 20, 4);\n        rect(0, 0, 4, 20);\n      } else {\n        fill(0);\n        rect(-60, editing == \"mana\" ? -50 : 75, 32, 8);\n        rect(60, editing == \"mana\" ? -50 : 75, 32, 8);\n        rect(60, editing == \"mana\" ? -50 : 75, 8, 32);\n        fill(255);\n        rect(-60, editing == \"mana\" ? -50 : 75, 30, 6);\n        rect(60, editing == \"mana\" ? -50 : 75, 30, 6);\n        rect(60, editing == \"mana\" ? -50 : 75, 6, 30);\n      }\n    }\n\n    pop();\n  };\n\n  p.mousePressed = () => {\n    if (survey_topics[current_survey_topic] != \"none\") {\n      mousePressedWhileSurveying();\n    } else {\n      mousePressedWhileNotSurveying();\n    }\n  };\n\n  p.finished_survey = () => {\n    survey_drop_target.effects.push(JSON.parse(JSON.stringify(theMouse.effect)));\n    current_survey_topic = 0;\n    theMouse.effect = null;\n    theMouse.busy = false;\n  };\n\n  p.keyPressed = () => {\n    if (key == ' ' && !simulating) {\n      simResults = null;\n      simTurns = null;\n      simulating = true;\n      simTime = simCount;\n      submit();\n    }\n  };\n\n  p.windowResized = () => {\n    resizeCanvas(windowWidth, windowHeight);\n    resize_all();\n  };\n\n  p.add_to_queue = () => {\n    if (!simulating) {\n      simulating = true;\n      simTime = millis();\n      submit();\n    }\n  };\n\n  p.sim_overlay = () => {\n    push();\n    let queur_x = map(2, 0, 3, w_padding, width - w_padding);\n    let queur_y = height * 0.85;\n    mouse_over_queuer = mouseX > queur_x - 100 && mouseX < queur_x + 100 && mouseY > queur_y - 30 && mouseY < queur_y + 30;\n    translate(queur_x, queur_y);\n\n    if (mouse_over_queuer && !simulating) {\n      fill(255, 255);\n    } else {\n      fill(map(millis(), simTime, simTime + simDuration, 100, 255, true), 100);\n    }\n\n    rect(0, 0, 200, 60, 4);\n    fill(0, 255);\n    textAlign(CENTER, CENTER);\n    text(simulating ? \"Adding...\" : \"Add to queue\", 0, -4);\n    rectMode(CORNER); // if(simulating)\n    // fill(0)\n    // rect(-100, -30, map(millis(), simTime, simTime+simDuration, 0, 200, true), 60, 4)\n\n    pop();\n\n    if (simulating) {\n      if (millis() > simTime + simDuration) {\n        simulating = false;\n      }\n    } // if (simulating) {\n    //   simTime = constrain(simTime - random(0.001, 0.002), 0, simCount);\n    //   let lw = map(simTime, 0, simCount, 0, 200);\n    //   noStroke();\n    //   fill(200);\n    //   rect(width * 0.5 - 100, height * 0.85 - 16, 200, 40)\n    //   fill(0)\n    //   rect(width * 0.5 - 100, height * 0.85 - 16, lw, 40)\n    //   fill(255);\n    //   text(\"Simulating...\", width * 0.5, height * 0.85)\n    // } else {\n    //   text(\"Press Spacebar to simulate\", width / 2, height * 0.9);\n    // }\n    // if (simResults != null) {\n    //   text(\"The win rate with your card is: \" + simResults +\n    //     \"%\\n\" + \"The average game lasted \" + simTurns +\n    //     \" turns.\", width * 0.5, height * 0.10);\n    // }\n\n  };\n\n  p.submit = () => {\n    let submissions = [];\n\n    for (let c of cards) {\n      let card_submission = {\n        id: c.card_id,\n        exp: c.card_experiment,\n        user: user,\n        p: c.power,\n        t: c.toughness,\n        m: c.mana\n      };\n      let repeat_checker = {};\n\n      for (let e of c.effects) {\n        if (repeat_checker[e.effect_short] == undefined) {\n          repeat_checker[e.effect_short] = 0;\n        } else {\n          repeat_checker[e.effect_short]++;\n        }\n\n        if (e.settings.methods[0] != null) card_submission[e.effect_short + \"-method-\" + repeat_checker[e.effect_short]] = e.settings.methods[1];\n        if (e.settings.params[0] != null) card_submission[e.effect_short + \"-param-\" + repeat_checker[e.effect_short]] = e.settings.params[1];\n        if (e.settings.targets[0] != null) card_submission[e.effect_short + \"-target-\" + repeat_checker[e.effect_short]] = e.settings.targets[1];\n        if (e.settings.filters[0] != null) card_submission[e.effect_short + \"-filter-\" + repeat_checker[e.effect_short]] = e.settings.filters[1];\n        if (e.settings.duration[0] != null) card_submission[e.effect_short + \"-duration-\" + repeat_checker[e.effect_short]] = e.settings.duration[1];\n      }\n\n      submissions[c.card_experiment + \"-\" + c.card_id] = card_submission;\n    }\n\n    console.log(submissions);\n    send_to_google_sheets(submissions);\n  };\n\n  p.send_to_google_sheets = submissions => {\n    for (let submission of submissions) {}\n\n    gapi.load('client', () => {\n      gapi.client.init({\n        'apiKey': config.sheets_api_key\n      }).then(() => {\n        gapi.client.sheets.spreadsheets.values.get({\n          spreadsheetId: config.sheet_id,\n          range: \"queue!A1:D5\"\n        }).then(response => {\n          var result = response.result;\n          var numRows = result.values ? result.values.length : 0;\n          console.log(`${numRows} rows retrieved.`);\n        });\n      });\n    }); // httpPost('https://hearth-mici-backend.loca.lt/get_winrates', submission, (response) => {\n    //   simulating = false;\n    //   simResults = round(JSON.parse(response).win_rate, 2);\n    //   simTurns = round(JSON.parse(response).num_turns, 2);\n    //   console.log(simResults, simTurns)\n    // });\n    // httpPost('https://sheets.googleapis.com/v4/spreadsheets/1TlgFYV4zwkyfwGq1DNU39Sq1kOsOaL3jfppokpmgX0w/values/queue!A1:E1:append?key='+config.sheets_api_key, {\n    //   range: \"queue!A1:E1\",\n    //   key: config.sheets_api_key,\n    //   majorDimension: \"ROWS\",\n    //   values: [\n    //     [\"Door\", \"$15\", \"2\", \"3/15/2016\"],\n    //     [\"Engine\", \"$100\", \"1\", \"3/20/2016\"],\n    //   ],\n    // }, (response) => {\n    //   console.log(response)\n    // });\n  };\n\n  p.resize_all = () => {\n    for (let b of buttons) {\n      b.resized();\n    }\n\n    for (let c of cards) {\n      c.resized();\n    }\n  };\n\n  p.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n    effects[effect_text] = new Effect(effect_text, effect_short, method, param, targets, filters, duration);\n    buttons.push(new Button(effect_text, button_id++));\n  };\n\n  p.register_all = () => {\n    register_effect(\"Deal damage\", \"dam\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    register_effect(\"Destroy\", \"des\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], null);\n    register_effect(\"Heal\", \"hea\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    register_effect(\"Gain armour\", \"arm\", null, [\"x\"], null, null, null);\n    register_effect(\"Change stats\", \"cha\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    register_effect(\"Set stats\", \"set\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    register_effect(\"Give keyword\", \"giv\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"k\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    register_effect(\"Return to hand\", \"ret\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    register_effect(\"Draw\", \"dra\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    register_effect(\"Gain mana\", \"gai\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    register_effect(\"Summon\", \"sum\", null, [\"x/x\"], null, null, null);\n    register_effect(\"Keyword\", \"key\", null, [\"k\"], null, null, null);\n    register_effect(\"Creature type\", \"cre\", null, [\"c\"], null, null, null);\n  };\n\n  document.oncontextmenu = function () {\n    return false;\n  };\n}","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/src/sketch_stuff/sketch.js"],"names":["sketch","p","blank_spell_img","blank_creature_img","blank_weapon_img","full_blank_creature_img","bg","GAN_imgs","flavour_img","masked_flavour_ellipse","masked_flavour_rect","buttons","button_id","effects","experiments","user","cards","card_num","card_types","method_names","target_names","target_names_singular","filter_names","duration_names","param_format_names","effect_names","keywords","all_creature_types","creature_types","survey_topics","current_survey_topic","survey_drop_target","font_pixels","smaller_font_size","hearthstone_font","mouse_padding","w_padding","h_padding","grid_w_padding","grid_h_padding","theMouse","hoveredOption","editing","editing_card","effect_to_remove","editX","editY","simCount","simulating","simDuration","simTime","mouse_over_queuer","simResults","simTurns","preload","loadImage","push","floor","random","loadFont","setup","createCanvas","windowWidth","windowHeight","getURLParams","height","width","imageMode","CENTER","rectMode","textFont","textSize","fill","noStroke","FancyMouse","register_all","i","Card","resize_all","ellipse_mask","createGraphics","ellipse","rect_mask","rect","get","mask","draw","background","textAlign","LEFT","image","c","run","b","busy","translate","mouseX","xOffset","mouseY","yOffset","text","effect","label_name","pop","draw_edit_overlay","sim_overlay","draw_survey","setting","settings","options","attack","defense","xPos","map","yPos","boxWidth","boxHeight","optionButtonWidth","length","optionButtonHeight","optionButtonsPadding","index","option","entries","optionString","toString","toUpperCase","substring","split","join","mousePressedWhileSurveying","progressSurveyThroughIssues","x","y","mousePressedWhileNotSurveying","clickedCard","mouseInImg","dropEffectOnCard","clickToEditCard","setOffset","add_to_queue","mouse_click_while_editing","mouseInRegion","text_x","text_y","JSON","parse","stringify","button_name","finished_survey","includes","mouse_over_mana","mouse_over_power","mouse_over_toughness","dist","mouse_over_card_effect","hovered_effect","effect_string_height","console","log","splice","indexOf","mana","constrain","power","toughness","rotate","QUARTER_PI","mousePressed","keyPressed","key","submit","windowResized","resizeCanvas","millis","queur_x","queur_y","CORNER","submissions","card_submission","id","card_id","exp","card_experiment","t","m","repeat_checker","e","effect_short","undefined","methods","params","targets","filters","duration","send_to_google_sheets","submission","gapi","load","client","init","config","sheets_api_key","then","sheets","spreadsheets","values","spreadsheetId","sheet_id","range","response","result","numRows","resized","register_effect","effect_text","method","param","Effect","Button","document","oncontextmenu"],"mappings":"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","sourcesContent":["\nexport default function sketch(p){\n\nlet blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\nlet bg;\nlet GAN_imgs = [];\nlet flavour_img, masked_flavour_ellipse, masked_flavour_rect;\n\n\nconst buttons = [];\nlet button_id = 0;\n\nconst effects = [];\n\nlet experiments = [\"mvw\", \"2mur\", \"longer_game\"];\nlet user = \"\"\n\nconst cards = [];\nconst card_num = 3;\nconst card_types = [\"spell\", \"minion\", \"weapon\"]\n\nconst method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\nconst target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\nconst target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"]\nconst filter_names = [\"enemy\", \"friendly\", \"all\"];\nconst duration_names = [\"turn\", \"permanently\"];\nconst param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\nconst effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"]\nconst keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"]\nconst all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"]\nconst creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"]\n\nconst survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\nlet current_survey_topic = 0;\n\nlet survey_drop_target = null;\n\n\nconst font_pixels = 24;\nconst smaller_font_size = 20;\nlet hearthstone_font;\nconst mouse_padding = 1;\nlet w_padding, h_padding;\nlet grid_w_padding, grid_h_padding;\n\nlet theMouse;\nlet hoveredOption = -1;\n\nlet editing = \"none\";\nlet editing_card = null;\nlet effect_to_remove = null;\nlet editX = 0;\nlet editY = 0;\n\nlet simCount = 3;\nlet simulating = false;\nlet simDuration = 2000;\nlet simTime = -simDuration;\n\nlet mouse_over_queuer;\n\nlet simResults = null;\nlet simTurns = null;\n\n\n\np.preload = () => {\n  blank_spell_img = p.loadImage(\"blank_cards/spell.png\");\n  blank_weapon_img = p.loadImage(\"blank_cards/weapon.png\")\n  blank_creature_img = p.loadImage(\"blank_cards/creature.png\")\n  full_blank_creature_img = p.loadImage(\"blank_cards/fullBlankCreature.png\");\n  \n  GAN_imgs.push(p.loadImage(\"gan_samples/sample_\"+p.floor(random(1000))+\".jpg\"));\n  flavour_img = random(GAN_imgs);\n\n  hearthstone_font = loadFont(\"BelweBoldBT.ttf\");\n  bg = loadImage(\"bigger_paper.jpg\");\n}\n\n\np.setup = () => {\n  createCanvas(windowWidth, windowHeight);\n  user = getURLParams().user;\n\n  h_padding = height * 0.1;\n  w_padding = width * 0.2;\n  grid_h_padding = height * 0.2;\n  grid_w_padding = width * 0.1;\n  imageMode(CENTER)\n  rectMode(CENTER);\n  textFont(hearthstone_font);\n  textSize(font_pixels);\n  fill(255);\n  noStroke();\n\n\n\n\n  theMouse = new FancyMouse();\n\n\n  register_all();\n\n\n  for (let i = 0; i < card_num; i++) {\n    cards.push(new Card(i, \"mvw\"));\n  }\n\n  resize_all();\n\n\n  let ellipse_mask = createGraphics(width, height);\n  ellipse_mask.ellipse(width / 2, height / 2+50, 900, 840)\n\n  let rect_mask = createGraphics(width, height);\n  rect_mask.rect(width / 2-450, height / 2 - 300, 900, 800)\n\n  masked_flavour_ellipse = flavour_img.get();\n  masked_flavour_ellipse.mask(ellipse_mask)\n  masked_flavour_rect = flavour_img.get();\n  masked_flavour_rect.mask(rect_mask)\n\n\n\n}\n\n\np.draw = () => {\n  background(255)\n  textAlign(LEFT, CENTER);\n  image(bg, width / 2, height / 2, width, height);\n\n  for (let c of cards) {\n    c.run();\n  }\n\n  for (let b of buttons) {\n    b.run();\n  }\n\n  if(theMouse.busy && current_survey_topic == 0){\n    push();\n    translate(mouseX-theMouse.xOffset, mouseY-theMouse.yOffset)\n    textSize(28)\n    text(theMouse.effect.label_name, 0, 0)\n    pop();\n  }\n\n  draw_edit_overlay();\n\n  sim_overlay();\n\n\n  if(survey_topics[current_survey_topic] != \"none\"){\n    draw_survey(); \n  }\n    \n}\n\n\n\np.draw_survey = () => {\n  push();\n  textAlign(CENTER, CENTER)\n  textSize(font_pixels)\n\n  rectMode(CENTER)\n  background(0, 100)\n\n  let setting = theMouse.effect.settings[survey_topics[current_survey_topic]]\n  let options = setting[0]\n\n    \n  if(setting[0][0] == \"x\"){\n    options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  } else if(setting[0][0] == \"k\"){\n    options = keywords\n  } else if(setting[0][0] == \"c\"){\n    options = creature_types;\n  }\n  \n\n  if(options[0] == \"x/x\"){\n    for(let attack = 1; attack < 11; attack++){\n      for(let defense = 1; defense < 11; defense++){\n        let xPos = map(attack, 1, 10, grid_w_padding, width-grid_w_padding);\n        let yPos = map(defense, 1, 10, grid_h_padding, height-grid_h_padding);\n        let boxWidth = (width-grid_w_padding*2)/10;\n        let boxHeight = (height-grid_h_padding*2)/10;\n\n        if(mouseX > xPos - boxWidth/2 && mouseX < xPos + boxWidth/2 &&\n            mouseY > yPos - boxHeight/2 && mouseY < yPos+boxHeight/2){\n            fill(255, 100);\n          } else {\n            fill(255, 0);\n          }\n          rect(xPos, yPos, boxWidth, boxHeight);\n          fill(255);\n          text(attack + \"/\" + defense, xPos, yPos-10)\n      }\n    }\n  } else {\n\n\n  textSize(40);\n  fill(255)\n  text(theMouse.effect.label_name + \"...\", width/2, height*0.1);\n\n  textSize(font_pixels)\n  rectMode(CENTER)\n\n  let optionButtonWidth = (width/options.length)*0.5;\n  let optionButtonHeight = height*0.10;\n  let optionButtonsPadding = width*0.25;\n\n  for(let [index, option] of options.entries()){\n    let xPos = map(index, 0, options.length-1, optionButtonsPadding, width-optionButtonsPadding);\n    if(mouseX > xPos-optionButtonWidth/2 && mouseX < xPos + optionButtonWidth/2){\n      fill(255, 100)\n      hoveredOption = index;\n    } else {\n      fill(255, 50)\n    }\n    rect(xPos, height*0.5, optionButtonWidth, optionButtonHeight, 16);\n    fill(255);\n\n    let optionString = option.toString();\n    optionString = optionString[0].toUpperCase() + optionString.substring(1)\n    optionString = optionString.split(\" \").join(\"\\n\");\n\n    text(optionString, xPos, height/2)\n  }\n}\n  \n  pop();\n}\n\n\np.mousePressedWhileSurveying = () => {\n  if(progressSurveyThroughIssues()){\n    return\n  }\n\n\n  let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n  let options = setting[0]\n  if(options[0] == \"x\"){\n    options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  } else if (options[0] == \"k\"){\n    options = keywords;\n  } else if (options[0] == \"c\"){\n    options = creature_types;\n  }\n  \n  if(options[0] == \"x/x\"){\n    setting[1] = {x: floor(map(mouseX, 0, width, 1, 11)),\n                  y: floor(map(mouseY, 0, height, 1, 11))}\n  } else {\n    setting[1] = options[hoveredOption];\n  }\n  \n  current_survey_topic++;\n\n  if(progressSurveyThroughIssues()){\n    return\n  }\n\n}\n\n\np.mousePressedWhileNotSurveying = () => {\n  let clickedCard = null;\n\n  for (let c of cards) {\n    if (c.mouseInImg()) {\n      clickedCard = c;\n    }\n  }\n\n\n  if(clickedCard){\n    if(theMouse.busy){ //dropping effect onto a card\n      dropEffectOnCard(clickedCard)\n    } else { //clicking on a card generally\n      clickToEditCard(clickedCard)\n    }\n  } else {\n    if(theMouse.busy){ //clicked away to drop label\n      theMouse.busy = false;\n      theMouse.setOffset(0, 0);\n      theMouse.effect = null;\n    } else { //other clicks\n\n      if(mouse_over_queuer){\n        add_to_queue();\n      }\n\n      mouse_click_while_editing();\n      \n\n      for (let b of buttons) { //clicking on a button with an empty hand\n        if (b.mouseInRegion()) {\n          theMouse.busy = true;\n          theMouse.setOffset(b.text_x, b.text_y);\n          theMouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n\n          break;\n        }\n      }\n    }\n  }\n\n}\n\n\n\n//returns true if you need to return out of mouse\np.progressSurveyThroughIssues = () => {\n  if(current_survey_topic == survey_topics.length){\n    finished_survey();\n    return true;\n  }\n\n  for(let i = 0; i < survey_topics.length; i++){\n    if(theMouse.effect.settings[survey_topics[current_survey_topic]][0] == null ||\n      (!param_format_names.includes(theMouse.effect.settings[survey_topics[current_survey_topic]][0][0]) &&\n       theMouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1)){\n      current_survey_topic++;\n      if(current_survey_topic == survey_topics.length){\n        finished_survey();\n        return true;\n      }\n    }\n  }\n\n\n  if(current_survey_topic == survey_topics.length){\n    finished_survey();\n    return true;\n  }\n\n\n  return false;\n}\n\np.dropEffectOnCard = (c) => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if(progressSurveyThroughIssues()){\n\n      return\n    }\n}\n\n\np.clickToEditCard = (c) => {\n\n  if(c.mouse_over_mana){\n    editing = \"mana\";\n    editing_card = c;\n  } else if(c.mouse_over_power){\n    editing = \"power\";\n    editing_card = c;\n  } else if(c.mouse_over_toughness && !(editing ==\"effect\" && dist(mouseX, mouseY, editX, editY) < 10)){\n    editing = \"toughness\";\n    editing_card = c;\n  } else if(c.mouse_over_card_effect && !(editing ==\"effect\" && dist(mouseX, mouseY, editX, editY) < 10 )){\n    editing = \"effect\";\n    editX = c.hovered_effect.x + blank_spell_img.width/2;\n    editY = c.hovered_effect.y + c.hovered_effect.effect_string_height/2;\n    editing_card = c;\n    effect_to_remove = c.hovered_effect;\n   } else if(editing==\"effect\" && dist(mouseX, mouseY, editX, editY) < 10){\n      console.log(dist(mouseX, mouseY, editX, editY))\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n    editing = \"none\";\n  }\n}\n\n\np.mouse_click_while_editing = () => {\n  if(editing == \"mana\"){\n    if(dist(mouseX, mouseY, editX-60, editY-50)<40){\n      editing_card.mana--;\n    } else if(dist(mouseX, mouseY, editX+60, editY-50)<40){\n      editing_card.mana++;\n    } else {\n      editing = \"none\"\n    }\n    editing_card.mana = constrain(editing_card.mana, 0, 10)\n  } else if(editing == \"power\"){\n\n    if(dist(mouseX, mouseY, editX-60, editY+50)<40){\n      editing_card.power--;\n    } else if(dist(mouseX, mouseY, editX+60, editY+50)<40){\n      editing_card.power++;\n    } else {\n      editing = \"none\"\n    }\n    editing_card.power = constrain(editing_card.power, 0, 10)\n  } else if(editing == \"toughness\"){\n\n    if(dist(mouseX, mouseY, editX-60, editY+50)<40){\n      editing_card.toughness--;\n    } else if(dist(mouseX, mouseY, editX+60, editY+50)<40){\n      editing_card.toughness++;\n    } else {\n      editing = \"none\"\n    }\n    editing_card.toughness = constrain(editing_card.toughness, 1, 10)\n  } else if(editing = \"effect\"){\n    editing = \"none\";\n  }\n} \n\n\np.draw_edit_overlay = () => {\n  push();\n  if(editing != \"none\"){\n    translate(editX, editY)\n    noStroke();\n    if(editing==\"effect\"){\n      rotate(QUARTER_PI);\n      fill(0);\n      rect(0, 0, 22, 6);\n      rect(0, 0, 6, 22);\n      fill(255);\n      rect(0, 0, 20, 4);\n      rect(0, 0, 4, 20);\n \n    } else {\n      fill(0);\n      rect(-60, editing==\"mana\"?-50:75, 32, 8);\n      rect(60, editing==\"mana\"?-50:75, 32, 8);\n      rect(60, editing==\"mana\"?-50:75, 8, 32);\n      fill(255);\n      rect(-60, editing==\"mana\"?-50:75, 30, 6);\n      rect(60, editing==\"mana\"?-50:75, 30, 6);\n      rect(60, editing==\"mana\"?-50:75, 6, 30);\n    }\n  }\n  pop();\n}\n\np.mousePressed = () => {\n\n  if(survey_topics[current_survey_topic] != \"none\"){\n    mousePressedWhileSurveying();\n  } else {\n    mousePressedWhileNotSurveying();\n  }\n}\n\np.finished_survey = () => {\n\n  survey_drop_target.effects.push(JSON.parse(JSON.stringify(theMouse.effect)))\n  current_survey_topic = 0;\n  theMouse.effect = null;\n  theMouse.busy = false;\n}\n\np.keyPressed = () => {\n  if (key == ' ' && !simulating) {\n    simResults = null;\n    simTurns = null;\n    simulating = true;\n    simTime = simCount;\n    submit();\n  }\n\n}\n\np.windowResized = () => {\n  resizeCanvas(windowWidth, windowHeight);\n  resize_all();\n}\n\np.add_to_queue = () => {\n  if(!simulating){\n    simulating = true;\n    simTime = millis();\n    submit();\n  }\n}\n\np.sim_overlay = () => {\n  push();\n  let queur_x = map(2, 0, 3, w_padding, width-w_padding);\n  let queur_y = height*0.85\n  mouse_over_queuer = (mouseX > queur_x - 100 && mouseX < queur_x + 100 && mouseY > queur_y-30 && mouseY < queur_y+30)\n\n  translate(queur_x, queur_y);\n\n  if(mouse_over_queuer && !simulating){\n    fill(255, 255);\n  } else {\n    fill(map(millis(), simTime, simTime+simDuration, 100, 255, true), 100)\n  } \n  rect(0, 0, 200, 60, 4)\n\n\n  fill(0, 255);\n  textAlign(CENTER, CENTER)\n  text(simulating?\"Adding...\":\"Add to queue\", 0, -4)\n\n  rectMode(CORNER)\n\n  // if(simulating)\n  // fill(0)\n  // rect(-100, -30, map(millis(), simTime, simTime+simDuration, 0, 200, true), 60, 4)\n\n\n  pop();\n\n  if(simulating){\n    if(millis() > simTime+simDuration){\n      simulating = false;\n    }\n  }\n  // if (simulating) {\n  //   simTime = constrain(simTime - random(0.001, 0.002), 0, simCount);\n\n  //   let lw = map(simTime, 0, simCount, 0, 200);\n  //   noStroke();\n  //   fill(200);\n  //   rect(width * 0.5 - 100, height * 0.85 - 16, 200, 40)\n  //   fill(0)\n  //   rect(width * 0.5 - 100, height * 0.85 - 16, lw, 40)\n  //   fill(255);\n  //   text(\"Simulating...\", width * 0.5, height * 0.85)\n  // } else {\n  //   text(\"Press Spacebar to simulate\", width / 2, height * 0.9);\n  // }\n\n  // if (simResults != null) {\n\n  //   text(\"The win rate with your card is: \" + simResults +\n  //     \"%\\n\" + \"The average game lasted \" + simTurns +\n  //     \" turns.\", width * 0.5, height * 0.10);\n  // }\n}\n\np.submit = () => {\n  let submissions = [];\n  for(let c of cards){\n\n    let card_submission = {\n      id: c.card_id,\n      exp: c.card_experiment,\n      user: user,\n      p: c.power,\n      t: c.toughness,\n      m: c.mana,\n\n    }\n\n    \n    let repeat_checker = {};\n\n    for (let e of c.effects) {\n      if(repeat_checker[e.effect_short] == undefined){\n        repeat_checker[e.effect_short] = 0;\n      } else {\n        repeat_checker[e.effect_short]++;\n      }\n\n      if(e.settings.methods[0] != null) card_submission[e.effect_short+\"-method-\"+repeat_checker[e.effect_short]] = e.settings.methods[1];\n      if(e.settings.params[0] != null) card_submission[e.effect_short+\"-param-\"+repeat_checker[e.effect_short]] = e.settings.params[1];\n      if(e.settings.targets[0] != null) card_submission[e.effect_short+\"-target-\"+repeat_checker[e.effect_short]] = e.settings.targets[1];\n      if(e.settings.filters[0] != null) card_submission[e.effect_short+\"-filter-\"+repeat_checker[e.effect_short]] = e.settings.filters[1];\n      if(e.settings.duration[0] != null) card_submission[e.effect_short+\"-duration-\"+repeat_checker[e.effect_short]] = e.settings.duration[1];\n\n    }\n    submissions[c.card_experiment+\"-\"+c.card_id] = card_submission;\n }\n\n console.log(submissions);\n\n send_to_google_sheets(submissions);\n\n}\n\n\np.send_to_google_sheets = (submissions) => {\n\n  for(let submission of submissions){\n\n    \n  }\n\n  gapi.load('client', ()=>{\n    gapi.client.init({ 'apiKey':  config.sheets_api_key}).then(()=>{\n      gapi.client.sheets.spreadsheets.values.get({\n        spreadsheetId: config.sheet_id,\n        range: \"queue!A1:D5\"\n      }).then((response) => {\n        var result = response.result;\n        var numRows = result.values ? result.values.length : 0;\n        console.log(`${numRows} rows retrieved.`);\n      });\n    }); \n  });\n\n\n\n\n\n\n\n  // httpPost('https://hearth-mici-backend.loca.lt/get_winrates', submission, (response) => {\n  //   simulating = false;\n  //   simResults = round(JSON.parse(response).win_rate, 2);\n  //   simTurns = round(JSON.parse(response).num_turns, 2);\n  //   console.log(simResults, simTurns)\n  // });\n\n\n  // httpPost('https://sheets.googleapis.com/v4/spreadsheets/1TlgFYV4zwkyfwGq1DNU39Sq1kOsOaL3jfppokpmgX0w/values/queue!A1:E1:append?key='+config.sheets_api_key, {\n  //   range: \"queue!A1:E1\",\n  //   key: config.sheets_api_key,\n  //   majorDimension: \"ROWS\",\n  //   values: [\n  //     [\"Door\", \"$15\", \"2\", \"3/15/2016\"],\n  //     [\"Engine\", \"$100\", \"1\", \"3/20/2016\"],\n  //   ],\n  // }, (response) => {\n  //   console.log(response)\n  // });\n\n}\n\np.resize_all = () => {\n  for (let b of buttons) {\n    b.resized();\n  }\n\n  for (let c of cards) {\n    c.resized();\n  }\n\n}\n\np.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n\n  effects[effect_text] = new Effect(effect_text, effect_short, method, param, targets, filters, duration);\n  buttons.push(new Button(effect_text, button_id++));\n}\n\np.register_all = () => {\n\n  register_effect(\"Deal damage\", \"dam\",\n    [\"randomly\", \"targeted\", \"all\"],\n    [\"x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  register_effect(\"Destroy\", \"des\",\n    [\"randomly\", \"targeted\", \"all\"],\n    null,\n    [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  register_effect(\"Heal\", \"hea\",\n    [\"randomly\", \"targeted\", \"all\"],\n    [\"x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  register_effect(\"Gain armour\", \"arm\",\n    null,\n    [\"x\"],\n    null,\n    null,\n    null);\n\n  register_effect(\"Change stats\", \"cha\",\n    [\"randomly\", \"targeted\", \"all\", \"aura\"],\n    [\"x/x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    [\"turn\", \"permanently\"]);\n\n  register_effect(\"Set stats\", \"set\",\n    [\"randomly\", \"targeted\", \"all\", \"aura\"],\n    [\"x/x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    [\"turn\", \"permanently\"]);\n\n\n  register_effect(\"Give keyword\", \"giv\",\n    [\"randomly\", \"targeted\", \"all\", \"aura\"],\n    [\"k\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    [\"turn\", \"permanently\"]);\n\n  register_effect(\"Return to hand\", \"ret\",\n    [\"randomly\", \"targeted\", \"all\"],\n    null,\n    [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n\n  register_effect(\"Draw\", \"dra\",\n    null,\n    [\"x\"],\n    null,\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n\n  register_effect(\"Gain mana\", \"gai\",\n    null,\n    [\"x\"],\n    null,\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  register_effect(\"Summon\", \"sum\",\n    null,\n    [\"x/x\"],\n    null,\n    null,\n    null);\n\n    register_effect(\"Keyword\", \"key\",\n    null,\n    [\"k\"],\n    null,\n    null,\n    null);\n\n    register_effect(\"Creature type\", \"cre\",\n    null,\n    [\"c\"],\n    null,\n    null,\n    null);\n\n\n\n}\n\n\n\n\ndocument.oncontextmenu = function() {\n  return false;\n}\n\n\n}"]},"metadata":{},"sourceType":"module"}