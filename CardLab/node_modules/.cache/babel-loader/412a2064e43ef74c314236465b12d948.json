{"ast":null,"code":"export default function sketch(p) {\n  let blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\n  let bg;\n  let GAN_imgs = [];\n  let flavour_img, masked_flavour_ellipse, masked_flavour_rect;\n  const buttons = [];\n  let button_id = 0;\n  const effects = [];\n  let experiments = [\"mvw\", \"2mur\", \"longer_game\"];\n  let user = \"\";\n  const cards = [];\n  const card_num = 3;\n  const card_types = [\"spell\", \"minion\", \"weapon\"];\n  const method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\n  const target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\n  const target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"];\n  const filter_names = [\"enemy\", \"friendly\", \"all\"];\n  const duration_names = [\"turn\", \"permanently\"];\n  const param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\n  const effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"];\n  const keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"];\n  const all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"];\n  const creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"];\n  const survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\n  let current_survey_topic = 0;\n  let survey_drop_target = null;\n  const font_pixels = 24;\n  const smaller_font_size = 20;\n  let hearthstone_font;\n  const mouse_padding = 1;\n  let w_padding, h_padding;\n  let grid_w_padding, grid_h_padding;\n  let theMouse;\n  let hoveredOption = -1;\n  let editing = \"none\";\n  let editing_card = null;\n  let effect_to_remove = null;\n  let editX = 0;\n  let editY = 0;\n  let simCount = 3;\n  let simulating = false;\n  let simDuration = 2000;\n  let simTime = -simDuration;\n  let mouse_over_queuer;\n  let simResults = null;\n  let simTurns = null;\n\n  p.myCustomRedrawAccordingToNewPropsHandler = props => {\n    bg = p.loadImage(props.bg_img);\n    blank_spell_img = p.loadImage(props.spell_img);\n    blank_weapon_img = p.loadImage(props.weapon_img);\n    blank_creature_img = p.loadImage(props.creature_img);\n    full_blank_creature_img = p.loadImage(props.full_blank_creature_img);\n    flavour_img = p.loadImage(props.gan_img); // GAN_imgs.push(p.loadImage(\"../images/gan_samples/sample_\"+p.floor(p.random(1000))+\".jpg\"));\n    // flavour_img = p.random(GAN_imgs);\n  };\n\n  p.preload = () => {\n    //bg = p.loadImage(bg_img);\n    blank_spell_img = p.loadImage(\"../images/blank_cards/spell.png\");\n    blank_weapon_img = p.loadImage(\"../images/blank_cards/weapon.png\");\n    blank_creature_img = p.loadImage(\"../images/blank_cards/creature.png\");\n    full_blank_creature_img = p.loadImage(\"../images/blank_cards/fullBlankCreature.png\");\n    GAN_imgs.push(p.loadImage(\"../images/gan_samples/sample_\" + p.floor(p.random(1000)) + \".jpg\"));\n    flavour_img = p.random(GAN_imgs); //hearthstone_font = p.loadFont(\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\");\n  };\n\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    user = p.getURLParams().user;\n    h_padding = p.height * 0.1;\n    w_padding = p.width * 0.2;\n    grid_h_padding = p.height * 0.2;\n    grid_w_padding = p.width * 0.1;\n    p.imageMode(p.CENTER);\n    p.rectMode(p.CENTER); //`p.textFont(hearthstone_font);\n\n    p.textSize(font_pixels);\n    p.fill(255);\n    p.noStroke();\n    theMouse = new p.FancyMouse();\n    p.register_all();\n\n    for (let i = 0; i < card_num; i++) {\n      cards.push(new p.Card(i, \"mvw\"));\n    }\n\n    p.resize_all();\n    let ellipse_mask = p.createGraphics(p.width, p.height);\n    p.ellipse_mask.ellipse(p.width / 2, p.height / 2 + 50, 900, 840);\n    let rect_mask = p.createGraphics(p.width, p.height);\n    p.rect_mask.rect(p.width / 2 - 450, p.height / 2 - 300, 900, 800);\n    masked_flavour_ellipse = flavour_img.get();\n    masked_flavour_ellipse.mask(ellipse_mask);\n    masked_flavour_rect = flavour_img.get();\n    masked_flavour_rect.mask(rect_mask);\n  };\n\n  p.draw = () => {\n    p.background(255);\n    p.textAlign(p.LEFT, p.CENTER);\n    p.image(bg, p.width / 2, p.height / 2, p.width, p.height);\n\n    for (let c of cards) {\n      c.run();\n    }\n\n    for (let b of buttons) {\n      b.run();\n    }\n\n    if (theMouse.busy && current_survey_topic == 0) {\n      p.push();\n      p.translate(p.mouseX - theMouse.xOffset, p.mouseY - theMouse.yOffset);\n      p.textSize(28);\n      p.text(theMouse.effect.label_name, 0, 0);\n      p.pop();\n    }\n\n    p.draw_edit_overlay();\n    p.sim_overlay();\n\n    if (survey_topics[current_survey_topic] != \"none\") {\n      p.draw_survey();\n    }\n  };\n\n  p.draw_survey = () => {\n    p.push();\n    p.textAlign(p.CENTER, p.CENTER);\n    p.textSize(font_pixels);\n    p.rectMode(p.CENTER);\n    p.background(0, 100);\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (setting[0][0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (setting[0][0] == \"k\") {\n      options = keywords;\n    } else if (setting[0][0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      for (let attack = 1; attack < 11; attack++) {\n        for (let defense = 1; defense < 11; defense++) {\n          let xPos = p.map(attack, 1, 10, grid_w_padding, p.width - grid_w_padding);\n          let yPos = p.map(defense, 1, 10, grid_h_padding, p.height - grid_h_padding);\n          let boxWidth = (p.width - grid_w_padding * 2) / 10;\n          let boxHeight = (p.height - grid_h_padding * 2) / 10;\n\n          if (p.mouseX > xPos - boxWidth / 2 && p.mouseX < xPos + boxWidth / 2 && p.mouseY > yPos - boxHeight / 2 && p.mouseY < yPos + boxHeight / 2) {\n            p.fill(255, 100);\n          } else {\n            p.fill(255, 0);\n          }\n\n          p.rect(xPos, yPos, boxWidth, boxHeight);\n          p.fill(255);\n          p.text(attack + \"/\" + defense, xPos, yPos - 10);\n        }\n      }\n    } else {\n      p.textSize(40);\n      p.fill(255);\n      p.text(theMouse.effect.label_name + \"...\", p.width / 2, p.height * 0.1);\n      p.textSize(font_pixels);\n      p.rectMode(p.CENTER);\n      let optionButtonWidth = p.width / options.length * 0.5;\n      let optionButtonHeight = p.height * 0.10;\n      let optionButtonsPadding = p.width * 0.25;\n\n      for (let [index, option] of options.entries()) {\n        let xPos = p.map(index, 0, options.length - 1, optionButtonsPadding, p.width - optionButtonsPadding);\n\n        if (p.mouseX > xPos - optionButtonWidth / 2 && p.mouseX < xPos + optionButtonWidth / 2) {\n          p.fill(255, 100);\n          hoveredOption = index;\n        } else {\n          p.fill(255, 50);\n        }\n\n        p.rect(xPos, p.height * 0.5, optionButtonWidth, optionButtonHeight, 16);\n        p.fill(255);\n        let optionString = option.toString();\n        optionString = optionString[0].toUpperCase() + optionString.substring(1);\n        optionString = optionString.split(\" \").join(\"\\n\");\n        p.text(optionString, xPos, p.height / 2);\n      }\n    }\n\n    p.pop();\n  };\n\n  p.mousePressedWhileSurveying = () => {\n    if (p.progressSurveyThroughIssues()) {\n      return;\n    }\n\n    let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n    let options = setting[0];\n\n    if (options[0] == \"x\") {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    } else if (options[0] == \"k\") {\n      options = keywords;\n    } else if (options[0] == \"c\") {\n      options = creature_types;\n    }\n\n    if (options[0] == \"x/x\") {\n      setting[1] = {\n        x: p.floor(p.map(p.mouseX, 0, p.width, 1, 11)),\n        y: p.floor(p.map(p.mouseY, 0, p.height, 1, 11))\n      };\n    } else {\n      setting[1] = options[hoveredOption];\n    }\n\n    current_survey_topic++;\n\n    if (p.progressSurveyThroughIssues()) {\n      return;\n    }\n  };\n\n  p.mousePressedWhileNotSurveying = () => {\n    let clickedCard = null;\n\n    for (let c of cards) {\n      if (c.mouseInImg()) {\n        clickedCard = c;\n      }\n    }\n\n    if (clickedCard) {\n      if (theMouse.busy) {\n        //dropping effect onto a card\n        p.dropEffectOnCard(clickedCard);\n      } else {\n        //clicking on a card generally\n        p.clickToEditCard(clickedCard);\n      }\n    } else {\n      if (theMouse.busy) {\n        //clicked away to drop label\n        theMouse.busy = false;\n        theMouse.setOffset(0, 0);\n        theMouse.effect = null;\n      } else {\n        //other clicks\n        if (mouse_over_queuer) {\n          p.add_to_queue();\n        }\n\n        p.mouse_click_while_editing();\n\n        for (let b of buttons) {\n          //clicking on a button with an empty hand\n          if (b.mouseInRegion()) {\n            theMouse.busy = true;\n            theMouse.setOffset(b.text_x, b.text_y);\n            theMouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n            break;\n          }\n        }\n      }\n    }\n  }; //returns true if you need to return out of mouse\n\n\n  p.progressSurveyThroughIssues = () => {\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    for (let i = 0; i < survey_topics.length; i++) {\n      if (theMouse.effect.settings[survey_topics[current_survey_topic]][0] == null || !param_format_names.includes(theMouse.effect.settings[survey_topics[current_survey_topic]][0][0]) && theMouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1) {\n        current_survey_topic++;\n\n        if (current_survey_topic == survey_topics.length) {\n          p.finished_survey();\n          return true;\n        }\n      }\n    }\n\n    if (current_survey_topic == survey_topics.length) {\n      p.finished_survey();\n      return true;\n    }\n\n    return false;\n  };\n\n  p.dropEffectOnCard = c => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if (p.progressSurveyThroughIssues()) {\n      return;\n    }\n  };\n\n  p.clickToEditCard = c => {\n    if (c.mouse_over_mana) {\n      editing = \"mana\";\n      editing_card = c;\n    } else if (c.mouse_over_power) {\n      editing = \"power\";\n      editing_card = c;\n    } else if (c.mouse_over_toughness && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"toughness\";\n      editing_card = c;\n    } else if (c.mouse_over_card_effect && !(editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)) {\n      editing = \"effect\";\n      editX = c.hovered_effect.x + blank_spell_img.width / 2;\n      editY = c.hovered_effect.y + c.hovered_effect.effect_string_height / 2;\n      editing_card = c;\n      effect_to_remove = c.hovered_effect;\n    } else if (editing == \"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10) {\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n      editing = \"none\";\n    }\n  };\n\n  p.mouse_click_while_editing = () => {\n    if (editing == \"mana\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY - 50) < 40) {\n        editing_card.mana--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY - 50) < 40) {\n        editing_card.mana++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.mana = p.constrain(editing_card.mana, 0, 10);\n    } else if (editing == \"power\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.power--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.power++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.power = p.constrain(editing_card.power, 0, 10);\n    } else if (editing == \"toughness\") {\n      if (p.dist(p.mouseX, p.mouseY, editX - 60, editY + 50) < 40) {\n        editing_card.toughness--;\n      } else if (p.dist(p.mouseX, p.mouseY, editX + 60, editY + 50) < 40) {\n        editing_card.toughness++;\n      } else {\n        editing = \"none\";\n      }\n\n      editing_card.toughness = p.constrain(editing_card.toughness, 1, 10);\n    } else if (editing = \"effect\") {\n      editing = \"none\";\n    }\n  };\n\n  p.draw_edit_overlay = () => {\n    p.push();\n\n    if (editing != \"none\") {\n      p.translate(editX, editY);\n      p.noStroke();\n\n      if (editing == \"effect\") {\n        p.rotate(p.QUARTER_PI);\n        p.fill(0);\n        p.rect(0, 0, 22, 6);\n        p.rect(0, 0, 6, 22);\n        p.fill(255);\n        p.rect(0, 0, 20, 4);\n        p.rect(0, 0, 4, 20);\n      } else {\n        p.fill(0);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 32, 8);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 8, 32);\n        p.fill(255);\n        p.rect(-60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 30, 6);\n        p.rect(60, editing == \"mana\" ? -50 : 75, 6, 30);\n      }\n    }\n\n    p.pop();\n  };\n\n  p.mousePressed = () => {\n    if (survey_topics[current_survey_topic] != \"none\") {\n      p.mousePressedWhileSurveying();\n    } else {\n      p.mousePressedWhileNotSurveying();\n    }\n  };\n\n  p.finished_survey = () => {\n    survey_drop_target.effects.push(JSON.parse(JSON.stringify(theMouse.effect)));\n    current_survey_topic = 0;\n    theMouse.effect = null;\n    theMouse.busy = false;\n  };\n\n  p.keyPressed = () => {\n    if (p.key == ' ' && !simulating) {\n      simResults = null;\n      simTurns = null;\n      simulating = true;\n      simTime = simCount;\n      p.submit();\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    p.resize_all();\n  };\n\n  p.add_to_queue = () => {\n    if (!simulating) {\n      simulating = true;\n      simTime = p.millis();\n      p.submit();\n    }\n  };\n\n  p.sim_overlay = () => {\n    p.push();\n    let queur_x = p.map(2, 0, 3, w_padding, p.width - w_padding);\n    let queur_y = p.height * 0.85;\n    mouse_over_queuer = p.mouseX > queur_x - 100 && p.mouseX < queur_x + 100 && p.mouseY > queur_y - 30 && p.mouseY < queur_y + 30;\n    p.translate(queur_x, queur_y);\n\n    if (mouse_over_queuer && !simulating) {\n      p.fill(255, 255);\n    } else {\n      p.fill(p.map(p.millis(), simTime, simTime + simDuration, 100, 255, true), 100);\n    }\n\n    p.rect(0, 0, 200, 60, 4);\n    p.fill(0, 255);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.text(simulating ? \"Adding...\" : \"Add to queue\", 0, -4);\n    p.rectMode(p.CORNER); // if(simulating)\n    // p.fill(0)\n    // p.rect(-100, -30, map(millis(), simTime, simTime+simDuration, 0, 200, true), 60, 4)\n\n    p.pop();\n\n    if (simulating) {\n      if (p.millis() > simTime + simDuration) {\n        simulating = false;\n      }\n    } // if (simulating) {\n    //   simTime = constrain(simTime - random(0.001, 0.002), 0, simCount);\n    //   let lw = map(simTime, 0, simCount, 0, 200);\n    //   noStroke();\n    //   p.fill(200);\n    //   p.rect(width * 0.5 - 100, height * 0.85 - 16, 200, 40)\n    //   p.fill(0)\n    //   p.rect(width * 0.5 - 100, height * 0.85 - 16, lw, 40)\n    //   p.fill(255);\n    //   text(\"Simulating...\", width * 0.5, height * 0.85)\n    // } else {\n    //   text(\"Press Spacebar to simulate\", width / 2, height * 0.9);\n    // }\n    // if (simResults != null) {\n    //   text(\"The win rate with your card is: \" + simResults +\n    //     \"%\\n\" + \"The average game lasted \" + simTurns +\n    //     \" turns.\", width * 0.5, height * 0.10);\n    // }\n\n  };\n\n  p.submit = () => {\n    let submissions = [];\n\n    for (let c of cards) {\n      let card_submission = {\n        id: c.card_id,\n        exp: c.card_experiment,\n        user: user,\n        p: c.power,\n        t: c.toughness,\n        m: c.mana\n      };\n      let repeat_checker = {};\n\n      for (let e of c.effects) {\n        if (repeat_checker[e.effect_short] == undefined) {\n          repeat_checker[e.effect_short] = 0;\n        } else {\n          repeat_checker[e.effect_short]++;\n        }\n\n        if (e.settings.methods[0] != null) card_submission[e.effect_short + \"-method-\" + repeat_checker[e.effect_short]] = e.settings.methods[1];\n        if (e.settings.params[0] != null) card_submission[e.effect_short + \"-param-\" + repeat_checker[e.effect_short]] = e.settings.params[1];\n        if (e.settings.targets[0] != null) card_submission[e.effect_short + \"-target-\" + repeat_checker[e.effect_short]] = e.settings.targets[1];\n        if (e.settings.filters[0] != null) card_submission[e.effect_short + \"-filter-\" + repeat_checker[e.effect_short]] = e.settings.filters[1];\n        if (e.settings.duration[0] != null) card_submission[e.effect_short + \"-duration-\" + repeat_checker[e.effect_short]] = e.settings.duration[1];\n      }\n\n      submissions[c.card_experiment + \"-\" + c.card_id] = card_submission;\n    }\n\n    p.send_to_google_sheets(submissions);\n  };\n\n  p.send_to_google_sheets = submissions => {\n    for (let submission of submissions) {} // gapi.load('client', ()=>{\n    //   gapi.client.init({ 'apiKey':  config.sheets_api_key}).then(()=>{\n    //     gapi.client.sheets.spreadsheets.values.get({\n    //       spreadsheetId: config.sheet_id,\n    //       range: \"queue!A1:D5\"\n    //     }).then((response) => {\n    //       var result = response.result;\n    //       var numRows = result.values ? result.values.length : 0;\n    //       console.log(`${numRows} rows retrieved.`);\n    //     });\n    //   }); \n    // });\n    // httpPost('https://hearth-mici-backend.loca.lt/get_winrates', submission, (response) => {\n    //   simulating = false;\n    //   simResults = round(JSON.parse(response).win_rate, 2);\n    //   simTurns = round(JSON.parse(response).num_turns, 2);\n    //   console.log(simResults, simTurns)\n    // });\n    // httpPost('https://sheets.googleapis.com/v4/spreadsheets/1TlgFYV4zwkyfwGq1DNU39Sq1kOsOaL3jfppokpmgX0w/values/queue!A1:E1:append?key='+config.sheets_api_key, {\n    //   range: \"queue!A1:E1\",\n    //   key: config.sheets_api_key,\n    //   majorDimension: \"ROWS\",\n    //   values: [\n    //     [\"Door\", \"$15\", \"2\", \"3/15/2016\"],\n    //     [\"Engine\", \"$100\", \"1\", \"3/20/2016\"],\n    //   ],\n    // }, (response) => {\n    //   console.log(response)\n    // });\n\n  };\n\n  p.resize_all = () => {\n    for (let b of buttons) {\n      b.resized();\n    }\n\n    for (let c of cards) {\n      c.resized();\n    }\n  };\n\n  p.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n    effects[effect_text] = new p.Effect(effect_text, effect_short, method, param, targets, filters, duration);\n    buttons.push(new p.Button(effect_text, button_id++));\n  };\n\n  p.register_all = () => {\n    p.register_effect(\"Deal damage\", \"dam\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Destroy\", \"des\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Heal\", \"hea\", [\"randomly\", \"targeted\", \"all\"], [\"x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Gain armour\", \"arm\", null, [\"x\"], null, null, null);\n    p.register_effect(\"Change stats\", \"cha\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Set stats\", \"set\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"x/x\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Give keyword\", \"giv\", [\"randomly\", \"targeted\", \"all\", \"aura\"], [\"k\"], [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"], [\"enemy\", \"friendly\", \"all\"], [\"turn\", \"permanently\"]);\n    p.register_effect(\"Return to hand\", \"ret\", [\"randomly\", \"targeted\", \"all\"], null, [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"], [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Draw\", \"dra\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Gain mana\", \"gai\", null, [\"x\"], null, [\"enemy\", \"friendly\", \"all\"], null);\n    p.register_effect(\"Summon\", \"sum\", null, [\"x/x\"], null, null, null);\n    p.register_effect(\"Keyword\", \"key\", null, [\"k\"], null, null, null);\n    p.register_effect(\"Creature type\", \"cre\", null, [\"c\"], null, null, null);\n  };\n\n  p.FancyMouse = fm => {\n    fm.constuctor = () => {\n      this.busy = false;\n      this.xOffset = 0;\n      this.yOffset = 0;\n      this.effect = null;\n    };\n\n    fm.setOffset = (buttonX, buttonY) => {\n      this.xOffset = p.mouseX - buttonX;\n      this.yOffset = p.mouseY - buttonY;\n    };\n  };\n\n  p.Effect = ef => {\n    ef.constructor = (label_name, effect_short, methods, param_format, targets, filters, duration) => {\n      this.x = 0;\n      this.y = 0;\n      this.effect_string = \"\";\n      this.effect_string_height = 0;\n      this.effect_string_width = blank_spell_img.width * 0.5;\n      this.label_name = label_name;\n      this.effect_short = effect_short;\n      this.settings = {\n        methods: [methods, \"\"],\n        params: [param_format, \"\"],\n        targets: [targets, \"\"],\n        filters: [filters, \"\"],\n        duration: [duration, \"\"]\n      };\n    };\n  };\n\n  p.Card = cd => {\n    cd.constructor = (card_id, card_experiment) => {\n      this.y = 0;\n      this.x = 0;\n      this.w = blank_spell_img.width * 0.75;\n      this.h = blank_spell_img.height * 0.75;\n      this.oversized = false;\n      this.class = \"mage\";\n      this.type_id = 1;\n      this.card_id = card_id;\n      this.card_experiment = card_experiment;\n      this.creature_type = \"\";\n      this.mana = 5;\n      this.power = 5;\n      this.toughness = 5;\n      this.keywords = [];\n      this.effects = [];\n      this.hovered_effect = null;\n      this.mouse_over_card_effect = false;\n      this.mouse_over_mana = false;\n      this.mouse_over_power = false;\n      this.mouse_over_toughness = false;\n    };\n\n    cd.resized = () => {\n      this.x = p.map(this.card_id + 1, 0, cards.length, w_padding, p.width - w_padding);\n      this.y = p.height / 2;\n    };\n\n    cd.run = () => {\n      this.generate_effect_text();\n      this.check_mouse_hovers();\n      this.display();\n    };\n\n    cd.generate_effect_text = () => {\n      for (let e of this.effects) {\n        e.effect_string = \"\";\n\n        if (e.label_name == \"Keyword\" || e.label_name == \"Creature type\") {\n          e.effect_string = e.settings.params[1];\n        } else if (e.label_name == \"Deal damage\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n          } else {\n            e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \";\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1];\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n          }\n        } else if (e.label_name == \"Destroy\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Randomly destroy a \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Destroy a target \";\n          } else {\n            e.effect_string = \"Destroy all \";\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1];\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n          }\n        } else if (e.label_name == \"Heal\") {\n          if (e.settings.methods[1] == \"randomly\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n          } else if (e.settings.methods[1] == \"targeted\") {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n          } else {\n            e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n          }\n\n          e.effect_string += e.settings.filters[1] == \"all\" ? \"\" : e.settings.filters[1] + \" \"; //remove \"all all\"\n\n          if (e.settings.methods[1] == \"all\") {\n            e.effect_string += e.settings.targets[1];\n          } else {\n            e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])];\n          }\n        } else {\n          e.effect_string = e.label_name;\n        }\n\n        let estimatedCharactersPerLine = 20;\n        let estimatedLines = e.effect_string.length / estimatedCharactersPerLine;\n        e.effect_string_height = smaller_font_size * estimatedLines + 30;\n      }\n    };\n\n    cd.display = () => {\n      p.push();\n      p.fill(0);\n      p.textAlign(p.CENTER, p.CENTER);\n\n      if (this.effects.length > 2) {\n        this.oversized = true;\n      } else {\n        this.oversized = false;\n      }\n\n      let flav;\n      let forg;\n\n      if (card_types[this.type_id] == \"spell\") {\n        flav = masked_flavour_rect;\n        forg = blank_spell_img;\n      } else if (card_types[this.type_id] == \"minion\") {\n        flav = masked_flavour_ellipse;\n        forg = this.oversized ? full_blank_creature_img : blank_creature_img;\n      } else {\n        flav = masked_flavour_rect;\n        forg = blank_weapon_img;\n      }\n\n      if (!this.oversized) {\n        p.image(flav, this.x + 5, this.y - 50, 300, 300);\n      }\n\n      p.image(forg, this.x, this.y, this.w, this.h);\n      p.push();\n      p.textSize(60);\n      p.fill(255);\n      p.strokeWeight(3);\n      p.stroke(0);\n\n      if (card_types[this.type_id] == \"minion\") {\n        p.text(this.power, this.x - this.w / 2.99, this.y + this.h / 2.8);\n        p.text(this.toughness, this.x + this.w / 2.6, this.y + this.h / 2.8);\n      }\n\n      p.text(this.mana, this.x - this.w / 2.99, this.y - this.h / 2.3);\n      p.pop();\n      p.push();\n      p.fill(0);\n      p.textSize(smaller_font_size);\n      let translation_offset_y;\n\n      if (this.oversized) {\n        translation_offset_y = this.y - this.h / 2 + 80;\n        p.translate(this.x, this.y - this.h / 2 + 80);\n      } else {\n        translation_offset_y = this.y + 50;\n        p.translate(this.x, this.y + 50);\n      }\n\n      this.mouse_over_card_effect = false;\n      this.hovered_effect = null;\n\n      for (let e of this.effects) {\n        translation_offset_y += e.effect_string_height / 2;\n        p.translate(0, e.effect_string_height / 2);\n\n        if (p.mouseY > translation_offset_y - e.effect_string_height / 2 && p.mouseY < translation_offset_y + e.effect_string_height / 2 && p.mouseX > this.x - e.effect_string_width / 2 && p.mouseX < this.x + e.effect_string_width / 2) {\n          this.mouse_over_card_effect = true;\n          this.hovered_effect = e;\n          this.hovered_effect.x = this.x - e.effect_string_width / 2;\n          this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n          p.fill(0, 100);\n        } else {\n          p.fill(0, 50);\n        }\n\n        p.rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4);\n        p.fill(255, 255);\n        p.text(e.effect_string, 0, 0, blank_spell_img.width / 2, blank_spell_img.height / 2);\n        translation_offset_y += e.effect_string_height / 2 + 5;\n        p.translate(0, e.effect_string_height / 2 + 5);\n      }\n\n      p.pop();\n      p.push();\n\n      if (editing_card == this) {\n        if (editing == \"mana\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y - this.h / 2.3;\n        } else if (editing == \"power\") {\n          editX = this.x - this.w / 2.99;\n          editY = this.y + this.h / 2.8;\n        } else if (editing == \"toughness\") {\n          editX = this.x + this.w / 2.6;\n          editY = this.y + this.h / 2.8;\n        }\n      }\n\n      p.pop();\n    };\n\n    cd.mouseInImg = () => {\n      return p.mouseX > this.x - this.w / 2 - mouse_padding && p.mouseX < this.x + this.w / 2 + mouse_padding && p.mouseY > this.y - this.h / 2 - mouse_padding && p.mouseY < this.y + this.h / 2 + mouse_padding;\n    };\n\n    cd.check_mouse_hovers = () => {\n      if (card_types[this.type_id] == \"minion\") {\n        this.mouse_over_power = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y + this.h / 2.8) < 50;\n        this.mouse_over_toughness = p.dist(p.mouseX, p.mouseY, this.x + this.w / 2.6, this.y + this.h / 2.8) < 50;\n      }\n\n      this.mouse_over_mana = p.dist(p.mouseX, p.mouseY, this.x - this.w / 2.99, this.y - this.h / 2.3) < 50;\n    };\n  };\n\n  p.Button = btn => {\n    btn.constructor = (button_name, button_id) => {\n      this.button_name = button_name;\n      this.button_id = button_id;\n      this.x = 0;\n      this.y = 0;\n      this.w = p.textWidth(button_name) + 14;\n      this.h = font_pixels + 10;\n      this.fillAlpha = 100;\n      this.text_x = 0;\n      this.text_y = 0;\n    };\n\n    btn.mouseInRegion = () => {\n      return p.mouseX > this.x - this.w / 2 - mouse_padding && p.mouseX < this.x + this.w / 2 + mouse_padding && p.mouseY > this.y - this.h / 2 - mouse_padding && p.mouseY < this.y + this.h / 2 + mouse_padding;\n    };\n\n    btn.resized = () => {\n      this.x = w_padding - 150 + this.w / 2 - 7;\n      this.y = p.map(this.button_id, 0, buttons.length, h_padding, p.height - h_padding);\n      this.text_x = this.x - this.w / 2 + 7;\n      this.text_y = this.y - 6;\n    };\n\n    btn.run = () => {\n      this.update();\n      this.display();\n    };\n\n    btn.update = () => {\n      if (this.mouseInRegion() && current_survey_topic == 0) {\n        this.fillAlpha = 255;\n      } else {\n        this.fillAlpha = 100;\n      }\n    };\n\n    btn.display = () => {\n      p.textSize(font_pixels);\n      p.textAlign(p.LEFT, p.CENTER);\n      p.fill(255, this.fillAlpha);\n      p.rect(this.x, this.y, this.w, this.h, 4, 4);\n      p.fill(0, 255);\n      p.text(this.button_name, this.text_x, this.text_y);\n    };\n  };\n\n  document.oncontextmenu = function () {\n    return false;\n  };\n}","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/src/sketch_stuff/sketch.js"],"names":["sketch","p","blank_spell_img","blank_creature_img","blank_weapon_img","full_blank_creature_img","bg","GAN_imgs","flavour_img","masked_flavour_ellipse","masked_flavour_rect","buttons","button_id","effects","experiments","user","cards","card_num","card_types","method_names","target_names","target_names_singular","filter_names","duration_names","param_format_names","effect_names","keywords","all_creature_types","creature_types","survey_topics","current_survey_topic","survey_drop_target","font_pixels","smaller_font_size","hearthstone_font","mouse_padding","w_padding","h_padding","grid_w_padding","grid_h_padding","theMouse","hoveredOption","editing","editing_card","effect_to_remove","editX","editY","simCount","simulating","simDuration","simTime","mouse_over_queuer","simResults","simTurns","myCustomRedrawAccordingToNewPropsHandler","props","loadImage","bg_img","spell_img","weapon_img","creature_img","gan_img","preload","push","floor","random","setup","createCanvas","windowWidth","windowHeight","getURLParams","height","width","imageMode","CENTER","rectMode","textSize","fill","noStroke","FancyMouse","register_all","i","Card","resize_all","ellipse_mask","createGraphics","ellipse","rect_mask","rect","get","mask","draw","background","textAlign","LEFT","image","c","run","b","busy","translate","mouseX","xOffset","mouseY","yOffset","text","effect","label_name","pop","draw_edit_overlay","sim_overlay","draw_survey","setting","settings","options","attack","defense","xPos","map","yPos","boxWidth","boxHeight","optionButtonWidth","length","optionButtonHeight","optionButtonsPadding","index","option","entries","optionString","toString","toUpperCase","substring","split","join","mousePressedWhileSurveying","progressSurveyThroughIssues","x","y","mousePressedWhileNotSurveying","clickedCard","mouseInImg","dropEffectOnCard","clickToEditCard","setOffset","add_to_queue","mouse_click_while_editing","mouseInRegion","text_x","text_y","JSON","parse","stringify","button_name","finished_survey","includes","mouse_over_mana","mouse_over_power","mouse_over_toughness","dist","mouse_over_card_effect","hovered_effect","effect_string_height","splice","indexOf","mana","constrain","power","toughness","rotate","QUARTER_PI","mousePressed","keyPressed","key","submit","windowResized","resizeCanvas","millis","queur_x","queur_y","CORNER","submissions","card_submission","id","card_id","exp","card_experiment","t","m","repeat_checker","e","effect_short","undefined","methods","params","targets","filters","duration","send_to_google_sheets","submission","resized","register_effect","effect_text","method","param","Effect","Button","fm","constuctor","buttonX","buttonY","ef","constructor","param_format","effect_string","effect_string_width","cd","w","h","oversized","class","type_id","creature_type","generate_effect_text","check_mouse_hovers","display","estimatedCharactersPerLine","estimatedLines","flav","forg","strokeWeight","stroke","translation_offset_y","btn","textWidth","fillAlpha","update","document","oncontextmenu"],"mappings":"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","sourcesContent":["\nexport default function sketch(p){\n\nlet blank_spell_img, blank_creature_img, blank_weapon_img, full_blank_creature_img;\nlet bg;\nlet GAN_imgs = [];\nlet flavour_img, masked_flavour_ellipse, masked_flavour_rect;\n\n\nconst buttons = [];\nlet button_id = 0;\n\nconst effects = [];\n\nlet experiments = [\"mvw\", \"2mur\", \"longer_game\"];\nlet user = \"\"\n\nconst cards = [];\nconst card_num = 3;\nconst card_types = [\"spell\", \"minion\", \"weapon\"]\n\nconst method_names = [\"randomly\", \"targeted\", \"all\", \"aura\"];\nconst target_names = [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"];\nconst target_names_singular = [\"minion\", \"hero\", \"minion or hero\", \"murloc\", \"beast\", \"demon\", \"totem\", \"weapon\"]\nconst filter_names = [\"enemy\", \"friendly\", \"all\"];\nconst duration_names = [\"turn\", \"permanently\"];\nconst param_format_names = [\"x\", \"x/x\", \"k\", \"c\"];\nconst effect_names = [\"Deal damage\", \"Destroy\", \"Heal\", \"Gain armour\", \"Change stats\", \"Set stats\", \"Give keyword\", \"Return to hand\", \"Draw\", \"Gain mana\", \"Summon: \", \"Battlecry: \", \"Deathrattle: \"]\nconst keywords = [\"Taunt\", \"Charge\", \"Lifesteal\", \"Spell damage +1\", \"Divine shield\", \"Poisonous\", \"Windfury\", \"Frozen\"]\nconst all_creature_types = [\"murloc\", \"beast\", \"demon\", \"totem\", \"dragon\", \"pirate\", \"mech\", \"elemental\"]\nconst creature_types = [\"Murloc\", \"Beast\", \"Demon\", \"Totem\"]\n\nconst survey_topics = [\"none\", \"methods\", \"filters\", \"targets\", \"duration\", \"params\"];\nlet current_survey_topic = 0;\n\nlet survey_drop_target = null;\n\n\nconst font_pixels = 24;\nconst smaller_font_size = 20;\nlet hearthstone_font;\nconst mouse_padding = 1;\nlet w_padding, h_padding;\nlet grid_w_padding, grid_h_padding;\n\nlet theMouse;\nlet hoveredOption = -1;\n\nlet editing = \"none\";\nlet editing_card = null;\nlet effect_to_remove = null;\nlet editX = 0;\nlet editY = 0;\n\nlet simCount = 3;\nlet simulating = false;\nlet simDuration = 2000;\nlet simTime = -simDuration;\n\nlet mouse_over_queuer;\n\nlet simResults = null;\nlet simTurns = null;\n\n\np.myCustomRedrawAccordingToNewPropsHandler = (props) => {\n  bg = p.loadImage(props.bg_img)\n\n  blank_spell_img = p.loadImage(props.spell_img);\n  blank_weapon_img = p.loadImage(props.weapon_img)\n  blank_creature_img = p.loadImage(props.creature_img)\n  full_blank_creature_img = p.loadImage(props.full_blank_creature_img);\n  flavour_img = p.loadImage(props.gan_img)\n\n\n  // GAN_imgs.push(p.loadImage(\"../images/gan_samples/sample_\"+p.floor(p.random(1000))+\".jpg\"));\n  // flavour_img = p.random(GAN_imgs);\n\n}\n\np.preload = () => {\n  //bg = p.loadImage(bg_img);\n\n  blank_spell_img = p.loadImage(\"../images/blank_cards/spell.png\");\n  blank_weapon_img = p.loadImage(\"../images/blank_cards/weapon.png\")\n  blank_creature_img = p.loadImage(\"../images/blank_cards/creature.png\")\n  full_blank_creature_img = p.loadImage(\"../images/blank_cards/fullBlankCreature.png\");\n  \n  GAN_imgs.push(p.loadImage(\"../images/gan_samples/sample_\"+p.floor(p.random(1000))+\".jpg\"));\n  flavour_img = p.random(GAN_imgs);\n\n  //hearthstone_font = p.loadFont(\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\");\n}\n\n\np.setup = () => {\n  p.createCanvas(p.windowWidth, p.windowHeight);\n  user = p.getURLParams().user;\n\n  h_padding = p.height * 0.1;\n  w_padding = p.width * 0.2;\n  grid_h_padding = p.height * 0.2;\n  grid_w_padding = p.width * 0.1;\n  p.imageMode(p.CENTER)\n  p.rectMode(p.CENTER);\n  //`p.textFont(hearthstone_font);\n  p.textSize(font_pixels);\n  p.fill(255);\n  p.noStroke();\n\n\n\n\n  theMouse = new p.FancyMouse();\n\n\n  p.register_all();\n\n\n  for (let i = 0; i < card_num; i++) {\n    cards.push(new p.Card(i, \"mvw\"));\n  }\n\n  p.resize_all();\n\n\n  let ellipse_mask = p.createGraphics(p.width, p.height);\n  p.ellipse_mask.ellipse(p.width / 2, p.height / 2+50, 900, 840)\n\n  let rect_mask = p.createGraphics(p.width, p.height);\n  p.rect_mask.rect(p.width / 2-450, p.height / 2 - 300, 900, 800)\n\n  masked_flavour_ellipse = flavour_img.get();\n  masked_flavour_ellipse.mask(ellipse_mask)\n  masked_flavour_rect = flavour_img.get();\n  masked_flavour_rect.mask(rect_mask)\n\n\n\n}\n\n\np.draw = () => {\n  p.background(255)\n  p.textAlign(p.LEFT, p.CENTER);\n  p.image(bg, p.width / 2, p.height / 2, p.width, p.height);\n\n  for (let c of cards) {\n    c.run();\n  }\n\n  for (let b of buttons) {\n    b.run();\n  }\n\n  if(theMouse.busy && current_survey_topic == 0){\n    p.push();\n    p.translate(p.mouseX-theMouse.xOffset, p.mouseY-theMouse.yOffset)\n    p.textSize(28)\n    p.text(theMouse.effect.label_name, 0, 0)\n    p.pop();\n  }\n\n  p.draw_edit_overlay();\n\n  p.sim_overlay();\n\n\n  if(survey_topics[current_survey_topic] != \"none\"){\n    p.draw_survey(); \n  }\n    \n}\n\n\n\np.draw_survey = () => {\n  p.push();\n  p.textAlign(p.CENTER, p.CENTER)\n  p.textSize(font_pixels)\n\n  p.rectMode(p.CENTER)\n  p.background(0, 100)\n\n  let setting = theMouse.effect.settings[survey_topics[current_survey_topic]]\n  let options = setting[0]\n\n    \n  if(setting[0][0] == \"x\"){\n    options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  } else if(setting[0][0] == \"k\"){\n    options = keywords\n  } else if(setting[0][0] == \"c\"){\n    options = creature_types;\n  }\n  \n\n  if(options[0] == \"x/x\"){\n    for(let attack = 1; attack < 11; attack++){\n      for(let defense = 1; defense < 11; defense++){\n        let xPos = p.map(attack, 1, 10, grid_w_padding, p.width-grid_w_padding);\n        let yPos = p.map(defense, 1, 10, grid_h_padding, p.height-grid_h_padding);\n        let boxWidth = (p.width-grid_w_padding*2)/10;\n        let boxHeight = (p.height-grid_h_padding*2)/10;\n\n        if(p.mouseX > xPos - boxWidth/2 && p.mouseX < xPos + boxWidth/2 &&\n          p.mouseY > yPos - boxHeight/2 && p.mouseY < yPos+boxHeight/2){\n              p.fill(255, 100);\n          } else {\n            p.fill(255, 0);\n          }\n          p.rect(xPos, yPos, boxWidth, boxHeight);\n          p.fill(255);\n          p.text(attack + \"/\" + defense, xPos, yPos-10)\n      }\n    }\n  } else {\n\n\n  p.textSize(40);\n  p.fill(255)\n  p.text(theMouse.effect.label_name + \"...\", p.width/2, p.height*0.1);\n\n  p.textSize(font_pixels)\n  p.rectMode(p.CENTER)\n\n  let optionButtonWidth = (p.width/options.length)*0.5;\n  let optionButtonHeight = p.height*0.10;\n  let optionButtonsPadding = p.width*0.25;\n\n  for(let [index, option] of options.entries()){\n    let xPos = p.map(index, 0, options.length-1, optionButtonsPadding, p.width-optionButtonsPadding);\n    if(p.mouseX > xPos-optionButtonWidth/2 && p.mouseX < xPos + optionButtonWidth/2){\n      p.fill(255, 100)\n      hoveredOption = index;\n    } else {\n      p.fill(255, 50)\n    }\n    p.rect(xPos, p.height*0.5, optionButtonWidth, optionButtonHeight, 16);\n    p.fill(255);\n\n    let optionString = option.toString();\n    optionString = optionString[0].toUpperCase() + optionString.substring(1)\n    optionString = optionString.split(\" \").join(\"\\n\");\n\n    p.text(optionString, xPos, p.height/2)\n  }\n}\n  \np.pop();\n}\n\n\np.mousePressedWhileSurveying = () => {\n  if(p.progressSurveyThroughIssues()){\n    return\n  }\n\n\n  let setting = theMouse.effect.settings[survey_topics[current_survey_topic]];\n  let options = setting[0]\n  if(options[0] == \"x\"){\n    options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  } else if (options[0] == \"k\"){\n    options = keywords;\n  } else if (options[0] == \"c\"){\n    options = creature_types;\n  }\n  \n  if(options[0] == \"x/x\"){\n    setting[1] = {x: p.floor(p.map(p.mouseX, 0, p.width, 1, 11)),\n                  y: p.floor(p.map(p.mouseY, 0, p.height, 1, 11))}\n  } else {\n    setting[1] = options[hoveredOption];\n  }\n  \n  current_survey_topic++;\n\n  if(p.progressSurveyThroughIssues()){\n    return\n  }\n\n}\n\n\np.mousePressedWhileNotSurveying = () => {\n  let clickedCard = null;\n\n  for (let c of cards) {\n    if (c.mouseInImg()) {\n      clickedCard = c;\n    }\n  }\n\n\n  if(clickedCard){\n    if(theMouse.busy){ //dropping effect onto a card\n      p.dropEffectOnCard(clickedCard)\n    } else { //clicking on a card generally\n      p.clickToEditCard(clickedCard)\n    }\n  } else {\n    if(theMouse.busy){ //clicked away to drop label\n      theMouse.busy = false;\n      theMouse.setOffset(0, 0);\n      theMouse.effect = null;\n    } else { //other clicks\n\n      if(mouse_over_queuer){\n        p.add_to_queue();\n      }\n\n      p.mouse_click_while_editing();\n      \n\n      for (let b of buttons) { //clicking on a button with an empty hand\n        if (b.mouseInRegion()) {\n          theMouse.busy = true;\n          theMouse.setOffset(b.text_x, b.text_y);\n          theMouse.effect = JSON.parse(JSON.stringify(effects[b.button_name]));\n\n          break;\n        }\n      }\n    }\n  }\n\n}\n\n\n\n//returns true if you need to return out of mouse\np.progressSurveyThroughIssues = () => {\n  if(current_survey_topic == survey_topics.length){\n    p.finished_survey();\n    return true;\n  }\n\n  for(let i = 0; i < survey_topics.length; i++){\n    if(theMouse.effect.settings[survey_topics[current_survey_topic]][0] == null ||\n      (!param_format_names.includes(theMouse.effect.settings[survey_topics[current_survey_topic]][0][0]) &&\n       theMouse.effect.settings[survey_topics[current_survey_topic]][0].length == 1)){\n      current_survey_topic++;\n      if(current_survey_topic == survey_topics.length){\n        p.finished_survey();\n        return true;\n      }\n    }\n  }\n\n\n  if(current_survey_topic == survey_topics.length){\n    p.finished_survey();\n    return true;\n  }\n\n\n  return false;\n}\n\np.dropEffectOnCard = (c) => {\n    current_survey_topic = 1;\n    survey_drop_target = c;\n\n    if(p.progressSurveyThroughIssues()){\n\n      return\n    }\n}\n\n\np.clickToEditCard = (c) => {\n\n  if(c.mouse_over_mana){\n    editing = \"mana\";\n    editing_card = c;\n  } else if(c.mouse_over_power){\n    editing = \"power\";\n    editing_card = c;\n  } else if(c.mouse_over_toughness && !(editing ==\"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10)){\n    editing = \"toughness\";\n    editing_card = c;\n  } else if(c.mouse_over_card_effect && !(editing ==\"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10 )){\n    editing = \"effect\";\n    editX = c.hovered_effect.x + blank_spell_img.width/2;\n    editY = c.hovered_effect.y + c.hovered_effect.effect_string_height/2;\n    editing_card = c;\n    effect_to_remove = c.hovered_effect;\n   } else if(editing==\"effect\" && p.dist(p.mouseX, p.mouseY, editX, editY) < 10){\n      editing_card.effects.splice(editing_card.effects.indexOf(effect_to_remove), 1);\n      editing = \"none\";\n    } else {\n    editing = \"none\";\n  }\n}\n\n\np.mouse_click_while_editing = () => {\n  if(editing == \"mana\"){\n    if(p.dist(p.mouseX, p.mouseY, editX-60, editY-50)<40){\n      editing_card.mana--;\n    } else if(p.dist(p.mouseX, p.mouseY, editX+60, editY-50)<40){\n      editing_card.mana++;\n    } else {\n      editing = \"none\"\n    }\n    editing_card.mana = p.constrain(editing_card.mana, 0, 10)\n  } else if(editing == \"power\"){\n\n    if(p.dist(p.mouseX, p.mouseY, editX-60, editY+50)<40){\n      editing_card.power--;\n    } else if(p.dist(p.mouseX, p.mouseY, editX+60, editY+50)<40){\n      editing_card.power++;\n    } else {\n      editing = \"none\"\n    }\n    editing_card.power = p.constrain(editing_card.power, 0, 10)\n  } else if(editing == \"toughness\"){\n\n    if(p.dist(p.mouseX, p.mouseY, editX-60, editY+50)<40){\n      editing_card.toughness--;\n    } else if(p.dist(p.mouseX, p.mouseY, editX+60, editY+50)<40){\n      editing_card.toughness++;\n    } else {\n      editing = \"none\"\n    }\n    editing_card.toughness = p.constrain(editing_card.toughness, 1, 10)\n  } else if(editing = \"effect\"){\n    editing = \"none\";\n  }\n} \n\n\np.draw_edit_overlay = () => {\n  p.push();\n  if(editing != \"none\"){\n    p.translate(editX, editY)\n    p.noStroke();\n    if(editing==\"effect\"){\n      p.rotate(p.QUARTER_PI);\n      p.fill(0);\n      p.rect(0, 0, 22, 6);\n      p.rect(0, 0, 6, 22);\n      p.fill(255);\n      p.rect(0, 0, 20, 4);\n      p.rect(0, 0, 4, 20);\n \n    } else {\n      p.fill(0);\n      p.rect(-60, editing==\"mana\"?-50:75, 32, 8);\n      p.rect(60, editing==\"mana\"?-50:75, 32, 8);\n      p.rect(60, editing==\"mana\"?-50:75, 8, 32);\n      p.fill(255);\n      p.rect(-60, editing==\"mana\"?-50:75, 30, 6);\n      p.rect(60, editing==\"mana\"?-50:75, 30, 6);\n      p.rect(60, editing==\"mana\"?-50:75, 6, 30);\n    }\n  }\n  p.pop();\n}\n\np.mousePressed = () => {\n\n  if(survey_topics[current_survey_topic] != \"none\"){\n    p.mousePressedWhileSurveying();\n  } else {\n    p.mousePressedWhileNotSurveying();\n  }\n}\n\np.finished_survey = () => {\n\n  survey_drop_target.effects.push(JSON.parse(JSON.stringify(theMouse.effect)))\n  current_survey_topic = 0;\n  theMouse.effect = null;\n  theMouse.busy = false;\n}\n\np.keyPressed = () => {\n  if (p.key == ' ' && !simulating) {\n    simResults = null;\n    simTurns = null;\n    simulating = true;\n    simTime = simCount;\n    p.submit();\n  }\n\n}\n\np.windowResized = () => {\n  p.resizeCanvas(p.windowWidth, p.windowHeight);\n  p.resize_all();\n}\n\np.add_to_queue = () => {\n  if(!simulating){\n    simulating = true;\n    simTime = p.millis();\n    p.submit();\n  }\n}\n\np.sim_overlay = () => {\n  p.push();\n  let queur_x = p.map(2, 0, 3, w_padding, p.width-w_padding);\n  let queur_y = p.height*0.85\n  mouse_over_queuer = (p.mouseX > queur_x - 100 && p.mouseX < queur_x + 100 && p.mouseY > queur_y-30 && p.mouseY < queur_y+30)\n\n  p.translate(queur_x, queur_y);\n\n  if(mouse_over_queuer && !simulating){\n    p.fill(255, 255);\n  } else {\n    p.fill(p.map(p.millis(), simTime, simTime+simDuration, 100, 255, true), 100)\n  } \n  p.rect(0, 0, 200, 60, 4)\n\n\n  p.fill(0, 255);\n  p.textAlign(p.CENTER, p.CENTER)\n  p.text(simulating?\"Adding...\":\"Add to queue\", 0, -4)\n\n  p.rectMode(p.CORNER)\n\n  // if(simulating)\n  // p.fill(0)\n  // p.rect(-100, -30, map(millis(), simTime, simTime+simDuration, 0, 200, true), 60, 4)\n\n\n  p.pop();\n\n  if(simulating){\n    if(p.millis() > simTime+simDuration){\n      simulating = false;\n    }\n  }\n  // if (simulating) {\n  //   simTime = constrain(simTime - random(0.001, 0.002), 0, simCount);\n\n  //   let lw = map(simTime, 0, simCount, 0, 200);\n  //   noStroke();\n  //   p.fill(200);\n  //   p.rect(width * 0.5 - 100, height * 0.85 - 16, 200, 40)\n  //   p.fill(0)\n  //   p.rect(width * 0.5 - 100, height * 0.85 - 16, lw, 40)\n  //   p.fill(255);\n  //   text(\"Simulating...\", width * 0.5, height * 0.85)\n  // } else {\n  //   text(\"Press Spacebar to simulate\", width / 2, height * 0.9);\n  // }\n\n  // if (simResults != null) {\n\n  //   text(\"The win rate with your card is: \" + simResults +\n  //     \"%\\n\" + \"The average game lasted \" + simTurns +\n  //     \" turns.\", width * 0.5, height * 0.10);\n  // }\n}\n\np.submit = () => {\n  let submissions = [];\n  for(let c of cards){\n\n    let card_submission = {\n      id: c.card_id,\n      exp: c.card_experiment,\n      user: user,\n      p: c.power,\n      t: c.toughness,\n      m: c.mana,\n\n    }\n\n    \n    let repeat_checker = {};\n\n    for (let e of c.effects) {\n      if(repeat_checker[e.effect_short] == undefined){\n        repeat_checker[e.effect_short] = 0;\n      } else {\n        repeat_checker[e.effect_short]++;\n      }\n\n      if(e.settings.methods[0] != null) card_submission[e.effect_short+\"-method-\"+repeat_checker[e.effect_short]] = e.settings.methods[1];\n      if(e.settings.params[0] != null) card_submission[e.effect_short+\"-param-\"+repeat_checker[e.effect_short]] = e.settings.params[1];\n      if(e.settings.targets[0] != null) card_submission[e.effect_short+\"-target-\"+repeat_checker[e.effect_short]] = e.settings.targets[1];\n      if(e.settings.filters[0] != null) card_submission[e.effect_short+\"-filter-\"+repeat_checker[e.effect_short]] = e.settings.filters[1];\n      if(e.settings.duration[0] != null) card_submission[e.effect_short+\"-duration-\"+repeat_checker[e.effect_short]] = e.settings.duration[1];\n\n    }\n    submissions[c.card_experiment+\"-\"+c.card_id] = card_submission;\n }\n\n\n p.send_to_google_sheets(submissions);\n\n}\n\n\np.send_to_google_sheets = (submissions) => {\n\n  for(let submission of submissions){\n\n    \n  }\n\n  // gapi.load('client', ()=>{\n  //   gapi.client.init({ 'apiKey':  config.sheets_api_key}).then(()=>{\n  //     gapi.client.sheets.spreadsheets.values.get({\n  //       spreadsheetId: config.sheet_id,\n  //       range: \"queue!A1:D5\"\n  //     }).then((response) => {\n  //       var result = response.result;\n  //       var numRows = result.values ? result.values.length : 0;\n  //       console.log(`${numRows} rows retrieved.`);\n  //     });\n  //   }); \n  // });\n\n\n\n\n\n\n\n  // httpPost('https://hearth-mici-backend.loca.lt/get_winrates', submission, (response) => {\n  //   simulating = false;\n  //   simResults = round(JSON.parse(response).win_rate, 2);\n  //   simTurns = round(JSON.parse(response).num_turns, 2);\n  //   console.log(simResults, simTurns)\n  // });\n\n\n  // httpPost('https://sheets.googleapis.com/v4/spreadsheets/1TlgFYV4zwkyfwGq1DNU39Sq1kOsOaL3jfppokpmgX0w/values/queue!A1:E1:append?key='+config.sheets_api_key, {\n  //   range: \"queue!A1:E1\",\n  //   key: config.sheets_api_key,\n  //   majorDimension: \"ROWS\",\n  //   values: [\n  //     [\"Door\", \"$15\", \"2\", \"3/15/2016\"],\n  //     [\"Engine\", \"$100\", \"1\", \"3/20/2016\"],\n  //   ],\n  // }, (response) => {\n  //   console.log(response)\n  // });\n\n}\n\np.resize_all = () => {\n  for (let b of buttons) {\n    b.resized();\n  }\n\n  for (let c of cards) {\n    c.resized();\n  }\n\n}\n\np.register_effect = (effect_text, effect_short, method, param, targets, filters, duration) => {\n\n  effects[effect_text] = new p.Effect(effect_text, effect_short, method, param, targets, filters, duration);\n  buttons.push(new p.Button(effect_text, button_id++));\n}\n\np.register_all = () => {\n\n  p.register_effect(\"Deal damage\", \"dam\",\n    [\"randomly\", \"targeted\", \"all\"],\n    [\"x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  p.register_effect(\"Destroy\", \"des\",\n    [\"randomly\", \"targeted\", \"all\"],\n    null,\n    [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  p.register_effect(\"Heal\", \"hea\",\n    [\"randomly\", \"targeted\", \"all\"],\n    [\"x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  p.register_effect(\"Gain armour\", \"arm\",\n    null,\n    [\"x\"],\n    null,\n    null,\n    null);\n\n  p.register_effect(\"Change stats\", \"cha\",\n    [\"randomly\", \"targeted\", \"all\", \"aura\"],\n    [\"x/x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    [\"turn\", \"permanently\"]);\n\n  p.register_effect(\"Set stats\", \"set\",\n    [\"randomly\", \"targeted\", \"all\", \"aura\"],\n    [\"x/x\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    [\"turn\", \"permanently\"]);\n\n\n  p.register_effect(\"Give keyword\", \"giv\",\n    [\"randomly\", \"targeted\", \"all\", \"aura\"],\n    [\"k\"],\n    [\"minions\", \"heroes\", \"minions or heroes\", \"murlocs\", \"beasts\", \"demons\", \"totems\", \"weapons\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    [\"turn\", \"permanently\"]);\n\n  p.register_effect(\"Return to hand\", \"ret\",\n    [\"randomly\", \"targeted\", \"all\"],\n    null,\n    [\"minions\", \"murlocs\", \"beasts\", \"demons\", \"totems\"],\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n\n  p.register_effect(\"Draw\", \"dra\",\n    null,\n    [\"x\"],\n    null,\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n\n  p.register_effect(\"Gain mana\", \"gai\",\n    null,\n    [\"x\"],\n    null,\n    [\"enemy\", \"friendly\", \"all\"],\n    null);\n\n  p.register_effect(\"Summon\", \"sum\",\n    null,\n    [\"x/x\"],\n    null,\n    null,\n    null);\n\n    p.register_effect(\"Keyword\", \"key\",\n    null,\n    [\"k\"],\n    null,\n    null,\n    null);\n\n    p.register_effect(\"Creature type\", \"cre\",\n    null,\n    [\"c\"],\n    null,\n    null,\n    null);\n\n\n\n}\n\n\np.FancyMouse = (fm) => {\n  fm.constuctor = () => {\n    this.busy = false;\n    this.xOffset = 0;\n    this.yOffset = 0;\n    this.effect = null;\n  }\n  fm.setOffset = (buttonX, buttonY) => {\n    this.xOffset = p.mouseX - buttonX;\n    this.yOffset = p.mouseY - buttonY;\n  }\n}\n\n\n\n\n\np.Effect = (ef) => {\n  ef.constructor = (label_name,effect_short,methods, param_format, targets, filters, duration) => {\n    this.x = 0;\n    this.y = 0;\n\n    this.effect_string = \"\";\n    this.effect_string_height = 0;\n    this.effect_string_width = blank_spell_img.width * 0.5;\n    this.label_name = label_name;\n    this.effect_short = effect_short;\n\n    this.settings = {\n      methods: [methods, \"\"],\n      params: [param_format, \"\"],\n      targets: [targets, \"\"],\n      filters: [filters, \"\"],\n      duration: [duration, \"\"]\n    };\n  }\n}\n\n\np.Card = (cd) => {\n  cd.constructor = (card_id, card_experiment) => {\n      this.y = 0;\n      this.x = 0;\n      this.w = blank_spell_img.width * 0.75;\n      this.h = blank_spell_img.height * 0.75;\n      this.oversized = false;\n\n\n      this.class = \"mage\";\n      this.type_id = 1;\n      this.card_id = card_id;\n      this.card_experiment = card_experiment;\n\n      this.creature_type = \"\";\n      this.mana = 5;\n      this.power = 5;\n      this.toughness = 5;\n      this.keywords = [];\n      this.effects = [];\n\n      this.hovered_effect = null;\n      this.mouse_over_card_effect = false;\n      this.mouse_over_mana = false;\n      this.mouse_over_power = false;\n      this.mouse_over_toughness = false;\n\n\n  }\n\n  cd.resized = () => {\n      this.x = p.map(this.card_id + 1, 0, cards.length, w_padding, p.width - w_padding)\n      this.y = p.height / 2;\n  }\n\n  cd.run = () => {\n      this.generate_effect_text();\n      this.check_mouse_hovers();\n      this.display();\n  }\n\n  cd.generate_effect_text = () => {\n      for (let e of this.effects) {\n          e.effect_string = \"\";\n          if(e.label_name == \"Keyword\" || e.label_name == \"Creature type\"){\n              e.effect_string = e.settings.params[1];\n          } else if(e.label_name == \"Deal damage\"){\n              if(e.settings.methods[1] == \"randomly\"){\n                  e.effect_string = \"Randomly deal \" + e.settings.params[1] + \" damage to a \";\n              } else if(e.settings.methods[1] == \"targeted\"){\n                  e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to target \";\n              } else {\n                  e.effect_string = \"Deal \" + e.settings.params[1] + \" damage to all \"\n              }\n\n              e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n              if(e.settings.methods[1] == \"all\"){\n                  e.effect_string += e.settings.targets[1]\n              } else {\n                  e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n              }\n          } else if(e.label_name ==\"Destroy\"){\n              if(e.settings.methods[1] == \"randomly\"){\n                  e.effect_string = \"Randomly destroy a \";\n              } else if(e.settings.methods[1] == \"targeted\"){\n                  e.effect_string = \"Destroy a target \";\n              } else {\n                  e.effect_string = \"Destroy all \"\n              }\n              e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n              if(e.settings.methods[1] == \"all\"){\n                  e.effect_string += e.settings.targets[1]\n              } else {\n                  e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n              }\n          } else if(e.label_name ==\"Heal\"){\n              if(e.settings.methods[1] == \"randomly\"){\n                  e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a random \";\n              } else if(e.settings.methods[1] == \"targeted\"){\n                  e.effect_string = \"Restore \" + e.settings.params[1] + \" health to a target \";\n              } else {\n                  e.effect_string = \"Restore \" + e.settings.params[1] + \" health to all \";\n              }\n              e.effect_string += e.settings.filters[1]==\"all\"?\"\":e.settings.filters[1] + \" \" //remove \"all all\"\n              if(e.settings.methods[1] == \"all\"){\n                  e.effect_string += e.settings.targets[1]\n              } else {\n                  e.effect_string += target_names_singular[target_names.indexOf(e.settings.targets[1])]\n              }                \n          } else {\n              e.effect_string = e.label_name\n          }\n\n          \n\n          let estimatedCharactersPerLine = 20;\n          let estimatedLines =  e.effect_string.length/estimatedCharactersPerLine;\n          e.effect_string_height = smaller_font_size * estimatedLines + 30;\n          \n      }\n\n  }\n\n  cd.display = () => {\n    p.push();\n    p.fill(0);\n    p.textAlign(p.CENTER, p.CENTER)\n      if(this.effects.length > 2){\n          this.oversized = true;\n      } else {\n          this.oversized = false;\n      }\n      let flav;\n      let forg;\n\n      if (card_types[this.type_id] == \"spell\") {\n          flav = masked_flavour_rect;\n          forg = blank_spell_img;\n      } else if (card_types[this.type_id] == \"minion\") {\n          flav = masked_flavour_ellipse;\n          forg = this.oversized ? full_blank_creature_img:blank_creature_img;\n      } else {\n          flav = masked_flavour_rect;\n          forg = blank_weapon_img;\n      }\n\n      if(!this.oversized){\n        p.image(flav, this.x + 5, this.y - 50, 300, 300)\n      }\n      p.image(forg, this.x, this.y, this.w, this.h);\n\n      p.push();\n      p.textSize(60);\n      p.fill(255);\n      p.strokeWeight(3);\n      p.stroke(0);\n\n      if (card_types[this.type_id] == \"minion\") {\n        p.text(this.power, this.x-this.w/2.99, this.y+this.h/2.8)\n        p.text(this.toughness, this.x+this.w/2.6, this.y+this.h/2.8)\n      }\n\n    \n      p.text(this.mana, this.x-this.w/2.99, this.y-this.h/2.3)\n     \n      p.pop();\n\n     \n      p.push();\n      p.fill(0);\n      p.textSize(smaller_font_size);\n      let translation_offset_y;\n      if(this.oversized){\n          translation_offset_y = this.y - this.h/2 + 80;\n          p.translate(this.x, this.y - this.h/2 + 80);\n      } else {\n          translation_offset_y = this.y  + 50;\n          p.translate(this.x, this.y + 50);\n      }\n      \n      this.mouse_over_card_effect = false;\n      this.hovered_effect = null;\n      for(let e of this.effects){\n          \n          translation_offset_y += e.effect_string_height/2;\n          p.translate(0, e.effect_string_height/2)\n\n          if(p.mouseY > translation_offset_y - e.effect_string_height/2 &&\n            p.mouseY < translation_offset_y + e.effect_string_height/2 &&\n            p.mouseX > this.x - e.effect_string_width/2 &&\n            p.mouseX < this.x + e.effect_string_width/2){\n\n              this.mouse_over_card_effect = true;\n\n              this.hovered_effect = e;\n              this.hovered_effect.x = this.x - e.effect_string_width/2;\n              this.hovered_effect.y = translation_offset_y - e.effect_string_height;\n              p.fill(0, 100);\n          } else {\n              p.fill(0, 50)\n          }\n\n          p.rect(0, 0, e.effect_string_width, e.effect_string_height, 4, 4)\n          p.fill(255, 255)\n          p.text(e.effect_string, 0, 0, blank_spell_img.width/2, blank_spell_img.height/2)\n          translation_offset_y += e.effect_string_height/2+5;\n          p.translate(0, e.effect_string_height/2+5)\n\n      }\n      p.pop();\n\n\n      p.push();\n\n      if(editing_card == this){\n          if(editing == \"mana\"){\n              editX = this.x-this.w/2.99;\n              editY = this.y-this.h/2.3;\n          } else if(editing == \"power\"){\n              editX = this.x-this.w/2.99;\n              editY = this.y+this.h/2.8;\n          } else if(editing == \"toughness\"){\n              editX = this.x+this.w/2.6;\n              editY = this.y+this.h/2.8;\n          } \n      }\n\n      p.pop();\n  }\n\n\n  cd.mouseInImg = () => {\n      return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n        p.mouseX < this.x + this.w / 2 + mouse_padding &&\n        p.mouseY > this.y - this.h / 2 - mouse_padding &&\n        p.mouseY < this.y + this.h / 2 + mouse_padding);\n\n  }\n  cd.check_mouse_hovers = () => {\n      if (card_types[this.type_id] == \"minion\") {\n          this.mouse_over_power = p.dist(p.mouseX, p.mouseY, this.x-this.w/2.99, this.y+this.h/2.8) < 50\n          this.mouse_over_toughness = p.dist(p.mouseX, p.mouseY, this.x+this.w/2.6, this.y+this.h/2.8) < 50\n      }\n      this.mouse_over_mana = p.dist(p.mouseX, p.mouseY, this.x-this.w/2.99, this.y-this.h/2.3) < 50\n  }\n}\n\n\n\n\n\np.Button = (btn) =>{\n\n  btn.constructor = (button_name, button_id) => {\n    this.button_name = button_name;\n    this.button_id = button_id;\n\n    this.x = 0;\n    this.y = 0;\n    this.w = p.textWidth(button_name) + 14;\n    this.h = font_pixels + 10;\n    this.fillAlpha = 100;\n\n    this.text_x = 0;\n    this.text_y = 0;\n  }\n  btn.mouseInRegion = () => {\n    return (p.mouseX > this.x - this.w / 2 - mouse_padding &&\n      p.mouseX < this.x + this.w / 2 + mouse_padding &&\n      p.mouseY > this.y - this.h / 2 - mouse_padding &&\n      p.mouseY < this.y + this.h / 2 + mouse_padding);\n  }\n\n  btn.resized = () => {\n    this.x = w_padding - 150 + this.w / 2 - 7;\n    this.y = p.map(this.button_id, 0, buttons.length, h_padding, p.height - h_padding);\n    this.text_x = this.x - this.w / 2 + 7;\n    this.text_y = this.y - 6;\n  }\n\n  btn.run = () => {\n    this.update();\n    this.display();\n  }\n\n  btn.update = () => {\n\n    if (this.mouseInRegion() && current_survey_topic == 0) {\n      this.fillAlpha = 255;\n    } else {\n      this.fillAlpha = 100;\n    }\n\n  }\n\n  btn.display = () => {\n\n\n    p.textSize(font_pixels)\n    p.textAlign(p.LEFT, p.CENTER)\n    p.fill(255, this.fillAlpha);\n    p.rect(this.x, this.y, this.w, this.h, 4, 4);\n    p.fill(0, 255);\n    p.text(this.button_name, this.text_x, this.text_y);\n  }\n\n  \n}\n\n\ndocument.oncontextmenu = function() {\n  return false;\n}\n\n\n}"]},"metadata":{},"sourceType":"module"}