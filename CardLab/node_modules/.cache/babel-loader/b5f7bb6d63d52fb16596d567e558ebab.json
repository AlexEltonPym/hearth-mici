{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.userRecordConstructor = exports.UserBuilder = exports.UserRecordMetadata = exports._userWithOptions = exports.user = exports.service = exports.provider = void 0;\n\nconst _ = require(\"lodash\");\n\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\n\n\nexports.provider = 'google.firebase.auth';\n/** @hidden */\n\nexports.service = 'firebaseauth.googleapis.com';\n/**\n * Handle events related to Firebase authentication users.\n */\n\nfunction user() {\n  return _userWithOptions({});\n}\n\nexports.user = user;\n/** @hidden */\n\nfunction _userWithOptions(options) {\n  return new UserBuilder(() => {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return 'projects/' + process.env.GCLOUD_PROJECT;\n  }, options);\n}\n\nexports._userWithOptions = _userWithOptions;\n\nclass UserRecordMetadata {\n  constructor(creationTime, lastSignInTime) {\n    this.creationTime = creationTime;\n    this.lastSignInTime = lastSignInTime;\n  }\n  /** Returns a plain JavaScript object with the properties of UserRecordMetadata. */\n\n\n  toJSON() {\n    return {\n      creationTime: this.creationTime,\n      lastSignInTime: this.lastSignInTime\n    };\n  }\n\n}\n\nexports.UserRecordMetadata = UserRecordMetadata;\n/** Builder used to create Cloud Functions for Firebase Auth user lifecycle events. */\n\nclass UserBuilder {\n  /** @hidden */\n  constructor(triggerResource, options) {\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n\n  static dataConstructor(raw) {\n    return userRecordConstructor(raw.data);\n  }\n  /** Respond to the creation of a Firebase Auth user. */\n\n\n  onCreate(handler) {\n    return this.onOperation(handler, 'user.create');\n  }\n  /** Respond to the deletion of a Firebase Auth user. */\n\n\n  onDelete(handler) {\n    return this.onOperation(handler, 'user.delete');\n  }\n\n  onOperation(handler, eventType) {\n    return cloud_functions_1.makeCloudFunction({\n      handler,\n      provider: exports.provider,\n      eventType,\n      service: exports.service,\n      triggerResource: this.triggerResource,\n      dataConstructor: UserBuilder.dataConstructor,\n      legacyEventType: `providers/firebase.auth/eventTypes/${eventType}`,\n      options: this.options\n    });\n  }\n\n}\n\nexports.UserBuilder = UserBuilder;\n\nfunction userRecordConstructor(wireData) {\n  // Falsey values from the wire format proto get lost when converted to JSON, this adds them back.\n  const falseyValues = {\n    email: null,\n    emailVerified: false,\n    displayName: null,\n    photoURL: null,\n    phoneNumber: null,\n    disabled: false,\n    providerData: [],\n    customClaims: {},\n    passwordSalt: null,\n    passwordHash: null,\n    tokensValidAfterTime: null\n  };\n\n  const record = _.assign({}, falseyValues, wireData);\n\n  const meta = _.get(record, 'metadata');\n\n  if (meta) {\n    _.set(record, 'metadata', new UserRecordMetadata(meta.createdAt || meta.creationTime, meta.lastSignedInAt || meta.lastSignInTime));\n  } else {\n    _.set(record, 'metadata', new UserRecordMetadata(null, null));\n  }\n\n  _.forEach(record.providerData, entry => {\n    _.set(entry, 'toJSON', () => {\n      return entry;\n    });\n  });\n\n  _.set(record, 'toJSON', () => {\n    const json = _.pick(record, ['uid', 'email', 'emailVerified', 'displayName', 'photoURL', 'phoneNumber', 'disabled', 'passwordHash', 'passwordSalt', 'tokensValidAfterTime']);\n\n    json.metadata = _.get(record, 'metadata').toJSON();\n    json.customClaims = _.cloneDeep(record.customClaims);\n    json.providerData = _.map(record.providerData, entry => entry.toJSON());\n    return json;\n  });\n\n  return record;\n}\n\nexports.userRecordConstructor = userRecordConstructor;","map":{"version":3,"sources":["/Users/aep/phd/hearth-mici/node_modules/firebase-functions/lib/providers/auth.js"],"names":["Object","defineProperty","exports","value","userRecordConstructor","UserBuilder","UserRecordMetadata","_userWithOptions","user","service","provider","_","require","cloud_functions_1","options","process","env","GCLOUD_PROJECT","Error","constructor","creationTime","lastSignInTime","toJSON","triggerResource","dataConstructor","raw","data","onCreate","handler","onOperation","onDelete","eventType","makeCloudFunction","legacyEventType","wireData","falseyValues","email","emailVerified","displayName","photoURL","phoneNumber","disabled","providerData","customClaims","passwordSalt","passwordHash","tokensValidAfterTime","record","assign","meta","get","set","createdAt","lastSignedInAt","forEach","entry","json","pick","metadata","cloneDeep","map"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.userRecordConstructor = exports.UserBuilder = exports.UserRecordMetadata = exports._userWithOptions = exports.user = exports.service = exports.provider = void 0;\nconst _ = require(\"lodash\");\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\nexports.provider = 'google.firebase.auth';\n/** @hidden */\nexports.service = 'firebaseauth.googleapis.com';\n/**\n * Handle events related to Firebase authentication users.\n */\nfunction user() {\n    return _userWithOptions({});\n}\nexports.user = user;\n/** @hidden */\nfunction _userWithOptions(options) {\n    return new UserBuilder(() => {\n        if (!process.env.GCLOUD_PROJECT) {\n            throw new Error('process.env.GCLOUD_PROJECT is not set.');\n        }\n        return 'projects/' + process.env.GCLOUD_PROJECT;\n    }, options);\n}\nexports._userWithOptions = _userWithOptions;\nclass UserRecordMetadata {\n    constructor(creationTime, lastSignInTime) {\n        this.creationTime = creationTime;\n        this.lastSignInTime = lastSignInTime;\n    }\n    /** Returns a plain JavaScript object with the properties of UserRecordMetadata. */\n    toJSON() {\n        return {\n            creationTime: this.creationTime,\n            lastSignInTime: this.lastSignInTime,\n        };\n    }\n}\nexports.UserRecordMetadata = UserRecordMetadata;\n/** Builder used to create Cloud Functions for Firebase Auth user lifecycle events. */\nclass UserBuilder {\n    /** @hidden */\n    constructor(triggerResource, options) {\n        this.triggerResource = triggerResource;\n        this.options = options;\n    }\n    static dataConstructor(raw) {\n        return userRecordConstructor(raw.data);\n    }\n    /** Respond to the creation of a Firebase Auth user. */\n    onCreate(handler) {\n        return this.onOperation(handler, 'user.create');\n    }\n    /** Respond to the deletion of a Firebase Auth user. */\n    onDelete(handler) {\n        return this.onOperation(handler, 'user.delete');\n    }\n    onOperation(handler, eventType) {\n        return cloud_functions_1.makeCloudFunction({\n            handler,\n            provider: exports.provider,\n            eventType,\n            service: exports.service,\n            triggerResource: this.triggerResource,\n            dataConstructor: UserBuilder.dataConstructor,\n            legacyEventType: `providers/firebase.auth/eventTypes/${eventType}`,\n            options: this.options,\n        });\n    }\n}\nexports.UserBuilder = UserBuilder;\nfunction userRecordConstructor(wireData) {\n    // Falsey values from the wire format proto get lost when converted to JSON, this adds them back.\n    const falseyValues = {\n        email: null,\n        emailVerified: false,\n        displayName: null,\n        photoURL: null,\n        phoneNumber: null,\n        disabled: false,\n        providerData: [],\n        customClaims: {},\n        passwordSalt: null,\n        passwordHash: null,\n        tokensValidAfterTime: null,\n    };\n    const record = _.assign({}, falseyValues, wireData);\n    const meta = _.get(record, 'metadata');\n    if (meta) {\n        _.set(record, 'metadata', new UserRecordMetadata(meta.createdAt || meta.creationTime, meta.lastSignedInAt || meta.lastSignInTime));\n    }\n    else {\n        _.set(record, 'metadata', new UserRecordMetadata(null, null));\n    }\n    _.forEach(record.providerData, (entry) => {\n        _.set(entry, 'toJSON', () => {\n            return entry;\n        });\n    });\n    _.set(record, 'toJSON', () => {\n        const json = _.pick(record, [\n            'uid',\n            'email',\n            'emailVerified',\n            'displayName',\n            'photoURL',\n            'phoneNumber',\n            'disabled',\n            'passwordHash',\n            'passwordSalt',\n            'tokensValidAfterTime',\n        ]);\n        json.metadata = _.get(record, 'metadata').toJSON();\n        json.customClaims = _.cloneDeep(record.customClaims);\n        json.providerData = _.map(record.providerData, (entry) => entry.toJSON());\n        return json;\n    });\n    return record;\n}\nexports.userRecordConstructor = userRecordConstructor;\n"]},"metadata":{},"sourceType":"script"}